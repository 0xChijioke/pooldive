schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type Query {
  bal_balancer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_Balancer
  bal_balancers(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_Balancer_orderBy
    orderDirection: bal_OrderDirection
    where: bal_Balancer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_Balancer!]!
  bal_pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_Pool
  bal_pools(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_Pool_orderBy
    orderDirection: bal_OrderDirection
    where: bal_Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_Pool!]!
  bal_poolContract(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_PoolContract
  bal_poolContracts(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_PoolContract_orderBy
    orderDirection: bal_OrderDirection
    where: bal_PoolContract_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_PoolContract!]!
  bal_poolToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_PoolToken
  bal_poolTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_PoolToken_orderBy
    orderDirection: bal_OrderDirection
    where: bal_PoolToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_PoolToken!]!
  bal_priceRateProvider(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_PriceRateProvider
  bal_priceRateProviders(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_PriceRateProvider_orderBy
    orderDirection: bal_OrderDirection
    where: bal_PriceRateProvider_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_PriceRateProvider!]!
  bal_circuitBreaker(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_CircuitBreaker
  bal_circuitBreakers(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_CircuitBreaker_orderBy
    orderDirection: bal_OrderDirection
    where: bal_CircuitBreaker_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_CircuitBreaker!]!
  bal_poolShare(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_PoolShare
  bal_poolShares(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_PoolShare_orderBy
    orderDirection: bal_OrderDirection
    where: bal_PoolShare_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_PoolShare!]!
  bal_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_User
  bal_users(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_User_orderBy
    orderDirection: bal_OrderDirection
    where: bal_User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_User!]!
  bal_userInternalBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_UserInternalBalance
  bal_userInternalBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_UserInternalBalance_orderBy
    orderDirection: bal_OrderDirection
    where: bal_UserInternalBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_UserInternalBalance!]!
  bal_gradualWeightUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_GradualWeightUpdate
  bal_gradualWeightUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_GradualWeightUpdate_orderBy
    orderDirection: bal_OrderDirection
    where: bal_GradualWeightUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_GradualWeightUpdate!]!
  bal_ampUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_AmpUpdate
  bal_ampUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_AmpUpdate_orderBy
    orderDirection: bal_OrderDirection
    where: bal_AmpUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_AmpUpdate!]!
  bal_swapFeeUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_SwapFeeUpdate
  bal_swapFeeUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_SwapFeeUpdate_orderBy
    orderDirection: bal_OrderDirection
    where: bal_SwapFeeUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_SwapFeeUpdate!]!
  bal_swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_Swap
  bal_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_Swap_orderBy
    orderDirection: bal_OrderDirection
    where: bal_Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_Swap!]!
  bal_joinExit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_JoinExit
  bal_joinExits(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_JoinExit_orderBy
    orderDirection: bal_OrderDirection
    where: bal_JoinExit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_JoinExit!]!
  bal_latestPrice(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_LatestPrice
  bal_latestPrices(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_LatestPrice_orderBy
    orderDirection: bal_OrderDirection
    where: bal_LatestPrice_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_LatestPrice!]!
  bal_poolHistoricalLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_PoolHistoricalLiquidity
  bal_poolHistoricalLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_PoolHistoricalLiquidity_orderBy
    orderDirection: bal_OrderDirection
    where: bal_PoolHistoricalLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_PoolHistoricalLiquidity!]!
  bal_tokenPrice(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_TokenPrice
  bal_tokenPrices(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_TokenPrice_orderBy
    orderDirection: bal_OrderDirection
    where: bal_TokenPrice_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_TokenPrice!]!
  bal_managementOperation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_ManagementOperation
  bal_managementOperations(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_ManagementOperation_orderBy
    orderDirection: bal_OrderDirection
    where: bal_ManagementOperation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_ManagementOperation!]!
  bal_poolSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_PoolSnapshot
  bal_poolSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_PoolSnapshot_orderBy
    orderDirection: bal_OrderDirection
    where: bal_PoolSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_PoolSnapshot!]!
  bal_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_Token
  bal_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_Token_orderBy
    orderDirection: bal_OrderDirection
    where: bal_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_Token!]!
  bal_tokenSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_TokenSnapshot
  bal_tokenSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_TokenSnapshot_orderBy
    orderDirection: bal_OrderDirection
    where: bal_TokenSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_TokenSnapshot!]!
  bal_tradePair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_TradePair
  bal_tradePairs(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_TradePair_orderBy
    orderDirection: bal_OrderDirection
    where: bal_TradePair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_TradePair!]!
  bal_tradePairSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_TradePairSnapshot
  bal_tradePairSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_TradePairSnapshot_orderBy
    orderDirection: bal_OrderDirection
    where: bal_TradePairSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_TradePairSnapshot!]!
  bal_balancerSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_BalancerSnapshot
  bal_balancerSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_BalancerSnapshot_orderBy
    orderDirection: bal_OrderDirection
    where: bal_BalancerSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_BalancerSnapshot!]!
  bal_protocolIdData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_ProtocolIdData
  bal_protocolIdDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_ProtocolIdData_orderBy
    orderDirection: bal_OrderDirection
    where: bal_ProtocolIdData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_ProtocolIdData!]!
  bal_fxoracle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_FXOracle
  bal_fxoracles(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_FXOracle_orderBy
    orderDirection: bal_OrderDirection
    where: bal_FXOracle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_FXOracle!]!
  """Access to subgraph metadata"""
  bal__meta(block: bal_Block_height): bal__Meta_
  uni_factory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_Factory
  uni_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_Factory_orderBy
    orderDirection: uni_OrderDirection
    where: uni_Factory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_Factory!]!
  uni_bundle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_Bundle
  uni_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_Bundle_orderBy
    orderDirection: uni_OrderDirection
    where: uni_Bundle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_Bundle!]!
  uni_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_Token
  uni_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_Token_orderBy
    orderDirection: uni_OrderDirection
    where: uni_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_Token!]!
  uni_pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_Pool
  uni_pools(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_Pool_orderBy
    orderDirection: uni_OrderDirection
    where: uni_Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_Pool!]!
  uni_tick(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_Tick
  uni_ticks(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_Tick_orderBy
    orderDirection: uni_OrderDirection
    where: uni_Tick_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_Tick!]!
  uni_position(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_Position
  uni_positions(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_Position_orderBy
    orderDirection: uni_OrderDirection
    where: uni_Position_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_Position!]!
  uni_positionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_PositionSnapshot
  uni_positionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_PositionSnapshot_orderBy
    orderDirection: uni_OrderDirection
    where: uni_PositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_PositionSnapshot!]!
  uni_transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_Transaction
  uni_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_Transaction_orderBy
    orderDirection: uni_OrderDirection
    where: uni_Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_Transaction!]!
  uni_mint(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_Mint
  uni_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_Mint_orderBy
    orderDirection: uni_OrderDirection
    where: uni_Mint_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_Mint!]!
  uni_burn(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_Burn
  uni_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_Burn_orderBy
    orderDirection: uni_OrderDirection
    where: uni_Burn_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_Burn!]!
  uni_swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_Swap
  uni_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_Swap_orderBy
    orderDirection: uni_OrderDirection
    where: uni_Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_Swap!]!
  uni_collect(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_Collect
  uni_collects(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_Collect_orderBy
    orderDirection: uni_OrderDirection
    where: uni_Collect_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_Collect!]!
  uni_flash(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_Flash
  uni_flashes(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_Flash_orderBy
    orderDirection: uni_OrderDirection
    where: uni_Flash_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_Flash!]!
  uni_uniswapDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_UniswapDayData
  uni_uniswapDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_UniswapDayData_orderBy
    orderDirection: uni_OrderDirection
    where: uni_UniswapDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_UniswapDayData!]!
  uni_poolDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_PoolDayData
  uni_poolDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_PoolDayData_orderBy
    orderDirection: uni_OrderDirection
    where: uni_PoolDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_PoolDayData!]!
  uni_poolHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_PoolHourData
  uni_poolHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_PoolHourData_orderBy
    orderDirection: uni_OrderDirection
    where: uni_PoolHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_PoolHourData!]!
  uni_tickHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_TickHourData
  uni_tickHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_TickHourData_orderBy
    orderDirection: uni_OrderDirection
    where: uni_TickHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_TickHourData!]!
  uni_tickDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_TickDayData
  uni_tickDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_TickDayData_orderBy
    orderDirection: uni_OrderDirection
    where: uni_TickDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_TickDayData!]!
  uni_tokenDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_TokenDayData
  uni_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_TokenDayData_orderBy
    orderDirection: uni_OrderDirection
    where: uni_TokenDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_TokenDayData!]!
  uni_tokenHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_TokenHourData
  uni_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_TokenHourData_orderBy
    orderDirection: uni_OrderDirection
    where: uni_TokenHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_TokenHourData!]!
  """Access to subgraph metadata"""
  uni__meta(block: uni_Block_height): uni__Meta_
}

type Subscription {
  bal_balancer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_Balancer
  bal_balancers(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_Balancer_orderBy
    orderDirection: bal_OrderDirection
    where: bal_Balancer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_Balancer!]!
  bal_pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_Pool
  bal_pools(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_Pool_orderBy
    orderDirection: bal_OrderDirection
    where: bal_Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_Pool!]!
  bal_poolContract(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_PoolContract
  bal_poolContracts(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_PoolContract_orderBy
    orderDirection: bal_OrderDirection
    where: bal_PoolContract_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_PoolContract!]!
  bal_poolToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_PoolToken
  bal_poolTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_PoolToken_orderBy
    orderDirection: bal_OrderDirection
    where: bal_PoolToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_PoolToken!]!
  bal_priceRateProvider(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_PriceRateProvider
  bal_priceRateProviders(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_PriceRateProvider_orderBy
    orderDirection: bal_OrderDirection
    where: bal_PriceRateProvider_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_PriceRateProvider!]!
  bal_circuitBreaker(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_CircuitBreaker
  bal_circuitBreakers(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_CircuitBreaker_orderBy
    orderDirection: bal_OrderDirection
    where: bal_CircuitBreaker_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_CircuitBreaker!]!
  bal_poolShare(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_PoolShare
  bal_poolShares(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_PoolShare_orderBy
    orderDirection: bal_OrderDirection
    where: bal_PoolShare_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_PoolShare!]!
  bal_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_User
  bal_users(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_User_orderBy
    orderDirection: bal_OrderDirection
    where: bal_User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_User!]!
  bal_userInternalBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_UserInternalBalance
  bal_userInternalBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_UserInternalBalance_orderBy
    orderDirection: bal_OrderDirection
    where: bal_UserInternalBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_UserInternalBalance!]!
  bal_gradualWeightUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_GradualWeightUpdate
  bal_gradualWeightUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_GradualWeightUpdate_orderBy
    orderDirection: bal_OrderDirection
    where: bal_GradualWeightUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_GradualWeightUpdate!]!
  bal_ampUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_AmpUpdate
  bal_ampUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_AmpUpdate_orderBy
    orderDirection: bal_OrderDirection
    where: bal_AmpUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_AmpUpdate!]!
  bal_swapFeeUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_SwapFeeUpdate
  bal_swapFeeUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_SwapFeeUpdate_orderBy
    orderDirection: bal_OrderDirection
    where: bal_SwapFeeUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_SwapFeeUpdate!]!
  bal_swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_Swap
  bal_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_Swap_orderBy
    orderDirection: bal_OrderDirection
    where: bal_Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_Swap!]!
  bal_joinExit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_JoinExit
  bal_joinExits(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_JoinExit_orderBy
    orderDirection: bal_OrderDirection
    where: bal_JoinExit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_JoinExit!]!
  bal_latestPrice(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_LatestPrice
  bal_latestPrices(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_LatestPrice_orderBy
    orderDirection: bal_OrderDirection
    where: bal_LatestPrice_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_LatestPrice!]!
  bal_poolHistoricalLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_PoolHistoricalLiquidity
  bal_poolHistoricalLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_PoolHistoricalLiquidity_orderBy
    orderDirection: bal_OrderDirection
    where: bal_PoolHistoricalLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_PoolHistoricalLiquidity!]!
  bal_tokenPrice(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_TokenPrice
  bal_tokenPrices(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_TokenPrice_orderBy
    orderDirection: bal_OrderDirection
    where: bal_TokenPrice_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_TokenPrice!]!
  bal_managementOperation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_ManagementOperation
  bal_managementOperations(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_ManagementOperation_orderBy
    orderDirection: bal_OrderDirection
    where: bal_ManagementOperation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_ManagementOperation!]!
  bal_poolSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_PoolSnapshot
  bal_poolSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_PoolSnapshot_orderBy
    orderDirection: bal_OrderDirection
    where: bal_PoolSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_PoolSnapshot!]!
  bal_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_Token
  bal_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_Token_orderBy
    orderDirection: bal_OrderDirection
    where: bal_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_Token!]!
  bal_tokenSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_TokenSnapshot
  bal_tokenSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_TokenSnapshot_orderBy
    orderDirection: bal_OrderDirection
    where: bal_TokenSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_TokenSnapshot!]!
  bal_tradePair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_TradePair
  bal_tradePairs(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_TradePair_orderBy
    orderDirection: bal_OrderDirection
    where: bal_TradePair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_TradePair!]!
  bal_tradePairSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_TradePairSnapshot
  bal_tradePairSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_TradePairSnapshot_orderBy
    orderDirection: bal_OrderDirection
    where: bal_TradePairSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_TradePairSnapshot!]!
  bal_balancerSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_BalancerSnapshot
  bal_balancerSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_BalancerSnapshot_orderBy
    orderDirection: bal_OrderDirection
    where: bal_BalancerSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_BalancerSnapshot!]!
  bal_protocolIdData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_ProtocolIdData
  bal_protocolIdDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_ProtocolIdData_orderBy
    orderDirection: bal_OrderDirection
    where: bal_ProtocolIdData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_ProtocolIdData!]!
  bal_fxoracle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): bal_FXOracle
  bal_fxoracles(
    skip: Int = 0
    first: Int = 100
    orderBy: bal_FXOracle_orderBy
    orderDirection: bal_OrderDirection
    where: bal_FXOracle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bal_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: bal__SubgraphErrorPolicy_! = deny
  ): [bal_FXOracle!]!
  """Access to subgraph metadata"""
  bal__meta(block: bal_Block_height): bal__Meta_
  uni_factory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_Factory
  uni_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_Factory_orderBy
    orderDirection: uni_OrderDirection
    where: uni_Factory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_Factory!]!
  uni_bundle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_Bundle
  uni_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_Bundle_orderBy
    orderDirection: uni_OrderDirection
    where: uni_Bundle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_Bundle!]!
  uni_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_Token
  uni_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_Token_orderBy
    orderDirection: uni_OrderDirection
    where: uni_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_Token!]!
  uni_pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_Pool
  uni_pools(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_Pool_orderBy
    orderDirection: uni_OrderDirection
    where: uni_Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_Pool!]!
  uni_tick(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_Tick
  uni_ticks(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_Tick_orderBy
    orderDirection: uni_OrderDirection
    where: uni_Tick_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_Tick!]!
  uni_position(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_Position
  uni_positions(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_Position_orderBy
    orderDirection: uni_OrderDirection
    where: uni_Position_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_Position!]!
  uni_positionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_PositionSnapshot
  uni_positionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_PositionSnapshot_orderBy
    orderDirection: uni_OrderDirection
    where: uni_PositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_PositionSnapshot!]!
  uni_transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_Transaction
  uni_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_Transaction_orderBy
    orderDirection: uni_OrderDirection
    where: uni_Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_Transaction!]!
  uni_mint(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_Mint
  uni_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_Mint_orderBy
    orderDirection: uni_OrderDirection
    where: uni_Mint_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_Mint!]!
  uni_burn(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_Burn
  uni_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_Burn_orderBy
    orderDirection: uni_OrderDirection
    where: uni_Burn_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_Burn!]!
  uni_swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_Swap
  uni_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_Swap_orderBy
    orderDirection: uni_OrderDirection
    where: uni_Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_Swap!]!
  uni_collect(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_Collect
  uni_collects(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_Collect_orderBy
    orderDirection: uni_OrderDirection
    where: uni_Collect_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_Collect!]!
  uni_flash(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_Flash
  uni_flashes(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_Flash_orderBy
    orderDirection: uni_OrderDirection
    where: uni_Flash_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_Flash!]!
  uni_uniswapDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_UniswapDayData
  uni_uniswapDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_UniswapDayData_orderBy
    orderDirection: uni_OrderDirection
    where: uni_UniswapDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_UniswapDayData!]!
  uni_poolDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_PoolDayData
  uni_poolDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_PoolDayData_orderBy
    orderDirection: uni_OrderDirection
    where: uni_PoolDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_PoolDayData!]!
  uni_poolHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_PoolHourData
  uni_poolHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_PoolHourData_orderBy
    orderDirection: uni_OrderDirection
    where: uni_PoolHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_PoolHourData!]!
  uni_tickHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_TickHourData
  uni_tickHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_TickHourData_orderBy
    orderDirection: uni_OrderDirection
    where: uni_TickHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_TickHourData!]!
  uni_tickDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_TickDayData
  uni_tickDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_TickDayData_orderBy
    orderDirection: uni_OrderDirection
    where: uni_TickDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_TickDayData!]!
  uni_tokenDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_TokenDayData
  uni_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_TokenDayData_orderBy
    orderDirection: uni_OrderDirection
    where: uni_TokenDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_TokenDayData!]!
  uni_tokenHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): uni_TokenHourData
  uni_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: uni_TokenHourData_orderBy
    orderDirection: uni_OrderDirection
    where: uni_TokenHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: uni_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: uni__SubgraphErrorPolicy_! = deny
  ): [uni_TokenHourData!]!
  """Access to subgraph metadata"""
  uni__meta(block: uni_Block_height): uni__Meta_
}

enum bal_Aggregation_interval {
  hour
  day
}

type bal_AmpUpdate {
  id: ID!
  poolId: bal_Pool!
  scheduledTimestamp: Int!
  startTimestamp: BigInt!
  endTimestamp: BigInt!
  startAmp: BigInt!
  endAmp: BigInt!
}

input bal_AmpUpdate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  poolId: String
  poolId_not: String
  poolId_gt: String
  poolId_lt: String
  poolId_gte: String
  poolId_lte: String
  poolId_in: [String!]
  poolId_not_in: [String!]
  poolId_contains: String
  poolId_contains_nocase: String
  poolId_not_contains: String
  poolId_not_contains_nocase: String
  poolId_starts_with: String
  poolId_starts_with_nocase: String
  poolId_not_starts_with: String
  poolId_not_starts_with_nocase: String
  poolId_ends_with: String
  poolId_ends_with_nocase: String
  poolId_not_ends_with: String
  poolId_not_ends_with_nocase: String
  poolId_: bal_Pool_filter
  scheduledTimestamp: Int
  scheduledTimestamp_not: Int
  scheduledTimestamp_gt: Int
  scheduledTimestamp_lt: Int
  scheduledTimestamp_gte: Int
  scheduledTimestamp_lte: Int
  scheduledTimestamp_in: [Int!]
  scheduledTimestamp_not_in: [Int!]
  startTimestamp: BigInt
  startTimestamp_not: BigInt
  startTimestamp_gt: BigInt
  startTimestamp_lt: BigInt
  startTimestamp_gte: BigInt
  startTimestamp_lte: BigInt
  startTimestamp_in: [BigInt!]
  startTimestamp_not_in: [BigInt!]
  endTimestamp: BigInt
  endTimestamp_not: BigInt
  endTimestamp_gt: BigInt
  endTimestamp_lt: BigInt
  endTimestamp_gte: BigInt
  endTimestamp_lte: BigInt
  endTimestamp_in: [BigInt!]
  endTimestamp_not_in: [BigInt!]
  startAmp: BigInt
  startAmp_not: BigInt
  startAmp_gt: BigInt
  startAmp_lt: BigInt
  startAmp_gte: BigInt
  startAmp_lte: BigInt
  startAmp_in: [BigInt!]
  startAmp_not_in: [BigInt!]
  endAmp: BigInt
  endAmp_not: BigInt
  endAmp_gt: BigInt
  endAmp_lt: BigInt
  endAmp_gte: BigInt
  endAmp_lte: BigInt
  endAmp_in: [BigInt!]
  endAmp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: bal_BlockChangedFilter
  and: [bal_AmpUpdate_filter]
  or: [bal_AmpUpdate_filter]
}

enum bal_AmpUpdate_orderBy {
  id
  poolId
  poolId__id
  poolId__address
  poolId__poolType
  poolId__poolTypeVersion
  poolId__factory
  poolId__strategyType
  poolId__oracleEnabled
  poolId__symbol
  poolId__name
  poolId__swapEnabled
  poolId__swapEnabledInternal
  poolId__swapEnabledCurationSignal
  poolId__swapFee
  poolId__owner
  poolId__isPaused
  poolId__totalWeight
  poolId__totalSwapVolume
  poolId__totalSwapFee
  poolId__totalLiquidity
  poolId__totalLiquiditySansBPT
  poolId__totalShares
  poolId__totalProtocolFee
  poolId__createTime
  poolId__swapsCount
  poolId__holdersCount
  poolId__tx
  poolId__amp
  poolId__principalToken
  poolId__baseToken
  poolId__expiryTime
  poolId__unitSeconds
  poolId__managementFee
  poolId__joinExitEnabled
  poolId__mustAllowlistLPs
  poolId__managementAumFee
  poolId__totalAumFeeCollectedInBPT
  poolId__mainIndex
  poolId__wrappedIndex
  poolId__lowerTarget
  poolId__upperTarget
  poolId__sqrtAlpha
  poolId__sqrtBeta
  poolId__root3Alpha
  poolId__c
  poolId__s
  poolId__tauAlphaX
  poolId__tauAlphaY
  poolId__tauBetaX
  poolId__tauBetaY
  poolId__u
  poolId__v
  poolId__w
  poolId__z
  poolId__dSq
  poolId__alpha
  poolId__beta
  poolId__lambda
  poolId__delta
  poolId__epsilon
  poolId__isInRecoveryMode
  poolId__protocolSwapFeeCache
  poolId__protocolYieldFeeCache
  poolId__protocolAumFeeCache
  poolId__totalProtocolFeePaidInBPT
  poolId__lastJoinExitAmp
  poolId__lastPostJoinExitInvariant
  poolId__protocolId
  scheduledTimestamp
  startTimestamp
  endTimestamp
  startAmp
  endAmp
}

type bal_Balancer {
  id: ID!
  poolCount: Int!
  pools(skip: Int = 0, first: Int = 100, orderBy: bal_Pool_orderBy, orderDirection: bal_OrderDirection, where: bal_Pool_filter): [bal_Pool!]
  snapshots(skip: Int = 0, first: Int = 100, orderBy: bal_BalancerSnapshot_orderBy, orderDirection: bal_OrderDirection, where: bal_BalancerSnapshot_filter): [bal_BalancerSnapshot!]
  totalLiquidity: bal_BigDecimal!
  totalSwapCount: BigInt!
  totalSwapVolume: bal_BigDecimal!
  totalSwapFee: bal_BigDecimal!
  totalProtocolFee: bal_BigDecimal
  protocolFeesCollector: bal_Bytes
}

type bal_BalancerSnapshot {
  id: ID!
  vault: bal_Balancer!
  timestamp: Int!
  poolCount: Int!
  totalLiquidity: bal_BigDecimal!
  totalSwapCount: BigInt!
  totalSwapVolume: bal_BigDecimal!
  totalSwapFee: bal_BigDecimal!
  totalProtocolFee: bal_BigDecimal
}

input bal_BalancerSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  vault: String
  vault_not: String
  vault_gt: String
  vault_lt: String
  vault_gte: String
  vault_lte: String
  vault_in: [String!]
  vault_not_in: [String!]
  vault_contains: String
  vault_contains_nocase: String
  vault_not_contains: String
  vault_not_contains_nocase: String
  vault_starts_with: String
  vault_starts_with_nocase: String
  vault_not_starts_with: String
  vault_not_starts_with_nocase: String
  vault_ends_with: String
  vault_ends_with_nocase: String
  vault_not_ends_with: String
  vault_not_ends_with_nocase: String
  vault_: bal_Balancer_filter
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  poolCount: Int
  poolCount_not: Int
  poolCount_gt: Int
  poolCount_lt: Int
  poolCount_gte: Int
  poolCount_lte: Int
  poolCount_in: [Int!]
  poolCount_not_in: [Int!]
  totalLiquidity: bal_BigDecimal
  totalLiquidity_not: bal_BigDecimal
  totalLiquidity_gt: bal_BigDecimal
  totalLiquidity_lt: bal_BigDecimal
  totalLiquidity_gte: bal_BigDecimal
  totalLiquidity_lte: bal_BigDecimal
  totalLiquidity_in: [bal_BigDecimal!]
  totalLiquidity_not_in: [bal_BigDecimal!]
  totalSwapCount: BigInt
  totalSwapCount_not: BigInt
  totalSwapCount_gt: BigInt
  totalSwapCount_lt: BigInt
  totalSwapCount_gte: BigInt
  totalSwapCount_lte: BigInt
  totalSwapCount_in: [BigInt!]
  totalSwapCount_not_in: [BigInt!]
  totalSwapVolume: bal_BigDecimal
  totalSwapVolume_not: bal_BigDecimal
  totalSwapVolume_gt: bal_BigDecimal
  totalSwapVolume_lt: bal_BigDecimal
  totalSwapVolume_gte: bal_BigDecimal
  totalSwapVolume_lte: bal_BigDecimal
  totalSwapVolume_in: [bal_BigDecimal!]
  totalSwapVolume_not_in: [bal_BigDecimal!]
  totalSwapFee: bal_BigDecimal
  totalSwapFee_not: bal_BigDecimal
  totalSwapFee_gt: bal_BigDecimal
  totalSwapFee_lt: bal_BigDecimal
  totalSwapFee_gte: bal_BigDecimal
  totalSwapFee_lte: bal_BigDecimal
  totalSwapFee_in: [bal_BigDecimal!]
  totalSwapFee_not_in: [bal_BigDecimal!]
  totalProtocolFee: bal_BigDecimal
  totalProtocolFee_not: bal_BigDecimal
  totalProtocolFee_gt: bal_BigDecimal
  totalProtocolFee_lt: bal_BigDecimal
  totalProtocolFee_gte: bal_BigDecimal
  totalProtocolFee_lte: bal_BigDecimal
  totalProtocolFee_in: [bal_BigDecimal!]
  totalProtocolFee_not_in: [bal_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: bal_BlockChangedFilter
  and: [bal_BalancerSnapshot_filter]
  or: [bal_BalancerSnapshot_filter]
}

enum bal_BalancerSnapshot_orderBy {
  id
  vault
  vault__id
  vault__poolCount
  vault__totalLiquidity
  vault__totalSwapCount
  vault__totalSwapVolume
  vault__totalSwapFee
  vault__totalProtocolFee
  vault__protocolFeesCollector
  timestamp
  poolCount
  totalLiquidity
  totalSwapCount
  totalSwapVolume
  totalSwapFee
  totalProtocolFee
}

input bal_Balancer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  poolCount: Int
  poolCount_not: Int
  poolCount_gt: Int
  poolCount_lt: Int
  poolCount_gte: Int
  poolCount_lte: Int
  poolCount_in: [Int!]
  poolCount_not_in: [Int!]
  pools_: bal_Pool_filter
  snapshots_: bal_BalancerSnapshot_filter
  totalLiquidity: bal_BigDecimal
  totalLiquidity_not: bal_BigDecimal
  totalLiquidity_gt: bal_BigDecimal
  totalLiquidity_lt: bal_BigDecimal
  totalLiquidity_gte: bal_BigDecimal
  totalLiquidity_lte: bal_BigDecimal
  totalLiquidity_in: [bal_BigDecimal!]
  totalLiquidity_not_in: [bal_BigDecimal!]
  totalSwapCount: BigInt
  totalSwapCount_not: BigInt
  totalSwapCount_gt: BigInt
  totalSwapCount_lt: BigInt
  totalSwapCount_gte: BigInt
  totalSwapCount_lte: BigInt
  totalSwapCount_in: [BigInt!]
  totalSwapCount_not_in: [BigInt!]
  totalSwapVolume: bal_BigDecimal
  totalSwapVolume_not: bal_BigDecimal
  totalSwapVolume_gt: bal_BigDecimal
  totalSwapVolume_lt: bal_BigDecimal
  totalSwapVolume_gte: bal_BigDecimal
  totalSwapVolume_lte: bal_BigDecimal
  totalSwapVolume_in: [bal_BigDecimal!]
  totalSwapVolume_not_in: [bal_BigDecimal!]
  totalSwapFee: bal_BigDecimal
  totalSwapFee_not: bal_BigDecimal
  totalSwapFee_gt: bal_BigDecimal
  totalSwapFee_lt: bal_BigDecimal
  totalSwapFee_gte: bal_BigDecimal
  totalSwapFee_lte: bal_BigDecimal
  totalSwapFee_in: [bal_BigDecimal!]
  totalSwapFee_not_in: [bal_BigDecimal!]
  totalProtocolFee: bal_BigDecimal
  totalProtocolFee_not: bal_BigDecimal
  totalProtocolFee_gt: bal_BigDecimal
  totalProtocolFee_lt: bal_BigDecimal
  totalProtocolFee_gte: bal_BigDecimal
  totalProtocolFee_lte: bal_BigDecimal
  totalProtocolFee_in: [bal_BigDecimal!]
  totalProtocolFee_not_in: [bal_BigDecimal!]
  protocolFeesCollector: bal_Bytes
  protocolFeesCollector_not: bal_Bytes
  protocolFeesCollector_gt: bal_Bytes
  protocolFeesCollector_lt: bal_Bytes
  protocolFeesCollector_gte: bal_Bytes
  protocolFeesCollector_lte: bal_Bytes
  protocolFeesCollector_in: [bal_Bytes!]
  protocolFeesCollector_not_in: [bal_Bytes!]
  protocolFeesCollector_contains: bal_Bytes
  protocolFeesCollector_not_contains: bal_Bytes
  """Filter for the block changed event."""
  _change_block: bal_BlockChangedFilter
  and: [bal_Balancer_filter]
  or: [bal_Balancer_filter]
}

enum bal_Balancer_orderBy {
  id
  poolCount
  pools
  snapshots
  totalLiquidity
  totalSwapCount
  totalSwapVolume
  totalSwapFee
  totalProtocolFee
  protocolFeesCollector
}

scalar bal_BigDecimal

scalar BigInt

input bal_BlockChangedFilter {
  number_gte: Int!
}

input bal_Block_height {
  hash: bal_Bytes
  number: Int
  number_gte: Int
}

scalar bal_Bytes

type bal_CircuitBreaker {
  id: ID!
  pool: bal_Pool!
  token: bal_PoolToken!
  bptPrice: bal_BigDecimal!
  lowerBoundPercentage: bal_BigDecimal!
  upperBoundPercentage: bal_BigDecimal!
}

input bal_CircuitBreaker_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: bal_Pool_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: bal_PoolToken_filter
  bptPrice: bal_BigDecimal
  bptPrice_not: bal_BigDecimal
  bptPrice_gt: bal_BigDecimal
  bptPrice_lt: bal_BigDecimal
  bptPrice_gte: bal_BigDecimal
  bptPrice_lte: bal_BigDecimal
  bptPrice_in: [bal_BigDecimal!]
  bptPrice_not_in: [bal_BigDecimal!]
  lowerBoundPercentage: bal_BigDecimal
  lowerBoundPercentage_not: bal_BigDecimal
  lowerBoundPercentage_gt: bal_BigDecimal
  lowerBoundPercentage_lt: bal_BigDecimal
  lowerBoundPercentage_gte: bal_BigDecimal
  lowerBoundPercentage_lte: bal_BigDecimal
  lowerBoundPercentage_in: [bal_BigDecimal!]
  lowerBoundPercentage_not_in: [bal_BigDecimal!]
  upperBoundPercentage: bal_BigDecimal
  upperBoundPercentage_not: bal_BigDecimal
  upperBoundPercentage_gt: bal_BigDecimal
  upperBoundPercentage_lt: bal_BigDecimal
  upperBoundPercentage_gte: bal_BigDecimal
  upperBoundPercentage_lte: bal_BigDecimal
  upperBoundPercentage_in: [bal_BigDecimal!]
  upperBoundPercentage_not_in: [bal_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: bal_BlockChangedFilter
  and: [bal_CircuitBreaker_filter]
  or: [bal_CircuitBreaker_filter]
}

enum bal_CircuitBreaker_orderBy {
  id
  pool
  pool__id
  pool__address
  pool__poolType
  pool__poolTypeVersion
  pool__factory
  pool__strategyType
  pool__oracleEnabled
  pool__symbol
  pool__name
  pool__swapEnabled
  pool__swapEnabledInternal
  pool__swapEnabledCurationSignal
  pool__swapFee
  pool__owner
  pool__isPaused
  pool__totalWeight
  pool__totalSwapVolume
  pool__totalSwapFee
  pool__totalLiquidity
  pool__totalLiquiditySansBPT
  pool__totalShares
  pool__totalProtocolFee
  pool__createTime
  pool__swapsCount
  pool__holdersCount
  pool__tx
  pool__amp
  pool__principalToken
  pool__baseToken
  pool__expiryTime
  pool__unitSeconds
  pool__managementFee
  pool__joinExitEnabled
  pool__mustAllowlistLPs
  pool__managementAumFee
  pool__totalAumFeeCollectedInBPT
  pool__mainIndex
  pool__wrappedIndex
  pool__lowerTarget
  pool__upperTarget
  pool__sqrtAlpha
  pool__sqrtBeta
  pool__root3Alpha
  pool__c
  pool__s
  pool__tauAlphaX
  pool__tauAlphaY
  pool__tauBetaX
  pool__tauBetaY
  pool__u
  pool__v
  pool__w
  pool__z
  pool__dSq
  pool__alpha
  pool__beta
  pool__lambda
  pool__delta
  pool__epsilon
  pool__isInRecoveryMode
  pool__protocolSwapFeeCache
  pool__protocolYieldFeeCache
  pool__protocolAumFeeCache
  pool__totalProtocolFeePaidInBPT
  pool__lastJoinExitAmp
  pool__lastPostJoinExitInvariant
  pool__protocolId
  token
  token__id
  token__assetManager
  token__symbol
  token__name
  token__decimals
  token__index
  token__address
  token__oldPriceRate
  token__priceRate
  token__balance
  token__paidProtocolFees
  token__cashBalance
  token__managedBalance
  token__weight
  token__isExemptFromYieldProtocolFee
  bptPrice
  lowerBoundPercentage
  upperBoundPercentage
}

type bal_FXOracle {
  id: ID!
  tokens: [bal_Bytes!]!
}

input bal_FXOracle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  tokens: [bal_Bytes!]
  tokens_not: [bal_Bytes!]
  tokens_contains: [bal_Bytes!]
  tokens_contains_nocase: [bal_Bytes!]
  tokens_not_contains: [bal_Bytes!]
  tokens_not_contains_nocase: [bal_Bytes!]
  """Filter for the block changed event."""
  _change_block: bal_BlockChangedFilter
  and: [bal_FXOracle_filter]
  or: [bal_FXOracle_filter]
}

enum bal_FXOracle_orderBy {
  id
  tokens
}

type bal_GradualWeightUpdate {
  id: ID!
  poolId: bal_Pool!
  scheduledTimestamp: Int!
  startTimestamp: BigInt!
  endTimestamp: BigInt!
  startWeights: [BigInt!]!
  endWeights: [BigInt!]!
}

input bal_GradualWeightUpdate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  poolId: String
  poolId_not: String
  poolId_gt: String
  poolId_lt: String
  poolId_gte: String
  poolId_lte: String
  poolId_in: [String!]
  poolId_not_in: [String!]
  poolId_contains: String
  poolId_contains_nocase: String
  poolId_not_contains: String
  poolId_not_contains_nocase: String
  poolId_starts_with: String
  poolId_starts_with_nocase: String
  poolId_not_starts_with: String
  poolId_not_starts_with_nocase: String
  poolId_ends_with: String
  poolId_ends_with_nocase: String
  poolId_not_ends_with: String
  poolId_not_ends_with_nocase: String
  poolId_: bal_Pool_filter
  scheduledTimestamp: Int
  scheduledTimestamp_not: Int
  scheduledTimestamp_gt: Int
  scheduledTimestamp_lt: Int
  scheduledTimestamp_gte: Int
  scheduledTimestamp_lte: Int
  scheduledTimestamp_in: [Int!]
  scheduledTimestamp_not_in: [Int!]
  startTimestamp: BigInt
  startTimestamp_not: BigInt
  startTimestamp_gt: BigInt
  startTimestamp_lt: BigInt
  startTimestamp_gte: BigInt
  startTimestamp_lte: BigInt
  startTimestamp_in: [BigInt!]
  startTimestamp_not_in: [BigInt!]
  endTimestamp: BigInt
  endTimestamp_not: BigInt
  endTimestamp_gt: BigInt
  endTimestamp_lt: BigInt
  endTimestamp_gte: BigInt
  endTimestamp_lte: BigInt
  endTimestamp_in: [BigInt!]
  endTimestamp_not_in: [BigInt!]
  startWeights: [BigInt!]
  startWeights_not: [BigInt!]
  startWeights_contains: [BigInt!]
  startWeights_contains_nocase: [BigInt!]
  startWeights_not_contains: [BigInt!]
  startWeights_not_contains_nocase: [BigInt!]
  endWeights: [BigInt!]
  endWeights_not: [BigInt!]
  endWeights_contains: [BigInt!]
  endWeights_contains_nocase: [BigInt!]
  endWeights_not_contains: [BigInt!]
  endWeights_not_contains_nocase: [BigInt!]
  """Filter for the block changed event."""
  _change_block: bal_BlockChangedFilter
  and: [bal_GradualWeightUpdate_filter]
  or: [bal_GradualWeightUpdate_filter]
}

enum bal_GradualWeightUpdate_orderBy {
  id
  poolId
  poolId__id
  poolId__address
  poolId__poolType
  poolId__poolTypeVersion
  poolId__factory
  poolId__strategyType
  poolId__oracleEnabled
  poolId__symbol
  poolId__name
  poolId__swapEnabled
  poolId__swapEnabledInternal
  poolId__swapEnabledCurationSignal
  poolId__swapFee
  poolId__owner
  poolId__isPaused
  poolId__totalWeight
  poolId__totalSwapVolume
  poolId__totalSwapFee
  poolId__totalLiquidity
  poolId__totalLiquiditySansBPT
  poolId__totalShares
  poolId__totalProtocolFee
  poolId__createTime
  poolId__swapsCount
  poolId__holdersCount
  poolId__tx
  poolId__amp
  poolId__principalToken
  poolId__baseToken
  poolId__expiryTime
  poolId__unitSeconds
  poolId__managementFee
  poolId__joinExitEnabled
  poolId__mustAllowlistLPs
  poolId__managementAumFee
  poolId__totalAumFeeCollectedInBPT
  poolId__mainIndex
  poolId__wrappedIndex
  poolId__lowerTarget
  poolId__upperTarget
  poolId__sqrtAlpha
  poolId__sqrtBeta
  poolId__root3Alpha
  poolId__c
  poolId__s
  poolId__tauAlphaX
  poolId__tauAlphaY
  poolId__tauBetaX
  poolId__tauBetaY
  poolId__u
  poolId__v
  poolId__w
  poolId__z
  poolId__dSq
  poolId__alpha
  poolId__beta
  poolId__lambda
  poolId__delta
  poolId__epsilon
  poolId__isInRecoveryMode
  poolId__protocolSwapFeeCache
  poolId__protocolYieldFeeCache
  poolId__protocolAumFeeCache
  poolId__totalProtocolFeePaidInBPT
  poolId__lastJoinExitAmp
  poolId__lastPostJoinExitInvariant
  poolId__protocolId
  scheduledTimestamp
  startTimestamp
  endTimestamp
  startWeights
  endWeights
}

"""
8 bytes signed integer

"""
scalar bal_Int8

enum bal_InvestType {
  Join
  Exit
}

type bal_JoinExit {
  id: ID!
  type: bal_InvestType!
  sender: bal_Bytes!
  amounts: [bal_BigDecimal!]!
  valueUSD: bal_BigDecimal
  pool: bal_Pool!
  user: bal_User!
  timestamp: Int!
  tx: bal_Bytes!
  block: BigInt
}

input bal_JoinExit_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  type: bal_InvestType
  type_not: bal_InvestType
  type_in: [bal_InvestType!]
  type_not_in: [bal_InvestType!]
  sender: bal_Bytes
  sender_not: bal_Bytes
  sender_gt: bal_Bytes
  sender_lt: bal_Bytes
  sender_gte: bal_Bytes
  sender_lte: bal_Bytes
  sender_in: [bal_Bytes!]
  sender_not_in: [bal_Bytes!]
  sender_contains: bal_Bytes
  sender_not_contains: bal_Bytes
  amounts: [bal_BigDecimal!]
  amounts_not: [bal_BigDecimal!]
  amounts_contains: [bal_BigDecimal!]
  amounts_contains_nocase: [bal_BigDecimal!]
  amounts_not_contains: [bal_BigDecimal!]
  amounts_not_contains_nocase: [bal_BigDecimal!]
  valueUSD: bal_BigDecimal
  valueUSD_not: bal_BigDecimal
  valueUSD_gt: bal_BigDecimal
  valueUSD_lt: bal_BigDecimal
  valueUSD_gte: bal_BigDecimal
  valueUSD_lte: bal_BigDecimal
  valueUSD_in: [bal_BigDecimal!]
  valueUSD_not_in: [bal_BigDecimal!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: bal_Pool_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: bal_User_filter
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  tx: bal_Bytes
  tx_not: bal_Bytes
  tx_gt: bal_Bytes
  tx_lt: bal_Bytes
  tx_gte: bal_Bytes
  tx_lte: bal_Bytes
  tx_in: [bal_Bytes!]
  tx_not_in: [bal_Bytes!]
  tx_contains: bal_Bytes
  tx_not_contains: bal_Bytes
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: bal_BlockChangedFilter
  and: [bal_JoinExit_filter]
  or: [bal_JoinExit_filter]
}

enum bal_JoinExit_orderBy {
  id
  type
  sender
  amounts
  valueUSD
  pool
  pool__id
  pool__address
  pool__poolType
  pool__poolTypeVersion
  pool__factory
  pool__strategyType
  pool__oracleEnabled
  pool__symbol
  pool__name
  pool__swapEnabled
  pool__swapEnabledInternal
  pool__swapEnabledCurationSignal
  pool__swapFee
  pool__owner
  pool__isPaused
  pool__totalWeight
  pool__totalSwapVolume
  pool__totalSwapFee
  pool__totalLiquidity
  pool__totalLiquiditySansBPT
  pool__totalShares
  pool__totalProtocolFee
  pool__createTime
  pool__swapsCount
  pool__holdersCount
  pool__tx
  pool__amp
  pool__principalToken
  pool__baseToken
  pool__expiryTime
  pool__unitSeconds
  pool__managementFee
  pool__joinExitEnabled
  pool__mustAllowlistLPs
  pool__managementAumFee
  pool__totalAumFeeCollectedInBPT
  pool__mainIndex
  pool__wrappedIndex
  pool__lowerTarget
  pool__upperTarget
  pool__sqrtAlpha
  pool__sqrtBeta
  pool__root3Alpha
  pool__c
  pool__s
  pool__tauAlphaX
  pool__tauAlphaY
  pool__tauBetaX
  pool__tauBetaY
  pool__u
  pool__v
  pool__w
  pool__z
  pool__dSq
  pool__alpha
  pool__beta
  pool__lambda
  pool__delta
  pool__epsilon
  pool__isInRecoveryMode
  pool__protocolSwapFeeCache
  pool__protocolYieldFeeCache
  pool__protocolAumFeeCache
  pool__totalProtocolFeePaidInBPT
  pool__lastJoinExitAmp
  pool__lastPostJoinExitInvariant
  pool__protocolId
  user
  user__id
  timestamp
  tx
  block
}

type bal_LatestPrice {
  id: ID!
  asset: bal_Bytes!
  pricingAsset: bal_Bytes!
  poolId: bal_Pool!
  price: bal_BigDecimal!
  block: BigInt!
}

input bal_LatestPrice_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  asset: bal_Bytes
  asset_not: bal_Bytes
  asset_gt: bal_Bytes
  asset_lt: bal_Bytes
  asset_gte: bal_Bytes
  asset_lte: bal_Bytes
  asset_in: [bal_Bytes!]
  asset_not_in: [bal_Bytes!]
  asset_contains: bal_Bytes
  asset_not_contains: bal_Bytes
  pricingAsset: bal_Bytes
  pricingAsset_not: bal_Bytes
  pricingAsset_gt: bal_Bytes
  pricingAsset_lt: bal_Bytes
  pricingAsset_gte: bal_Bytes
  pricingAsset_lte: bal_Bytes
  pricingAsset_in: [bal_Bytes!]
  pricingAsset_not_in: [bal_Bytes!]
  pricingAsset_contains: bal_Bytes
  pricingAsset_not_contains: bal_Bytes
  poolId: String
  poolId_not: String
  poolId_gt: String
  poolId_lt: String
  poolId_gte: String
  poolId_lte: String
  poolId_in: [String!]
  poolId_not_in: [String!]
  poolId_contains: String
  poolId_contains_nocase: String
  poolId_not_contains: String
  poolId_not_contains_nocase: String
  poolId_starts_with: String
  poolId_starts_with_nocase: String
  poolId_not_starts_with: String
  poolId_not_starts_with_nocase: String
  poolId_ends_with: String
  poolId_ends_with_nocase: String
  poolId_not_ends_with: String
  poolId_not_ends_with_nocase: String
  poolId_: bal_Pool_filter
  price: bal_BigDecimal
  price_not: bal_BigDecimal
  price_gt: bal_BigDecimal
  price_lt: bal_BigDecimal
  price_gte: bal_BigDecimal
  price_lte: bal_BigDecimal
  price_in: [bal_BigDecimal!]
  price_not_in: [bal_BigDecimal!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: bal_BlockChangedFilter
  and: [bal_LatestPrice_filter]
  or: [bal_LatestPrice_filter]
}

enum bal_LatestPrice_orderBy {
  id
  asset
  pricingAsset
  poolId
  poolId__id
  poolId__address
  poolId__poolType
  poolId__poolTypeVersion
  poolId__factory
  poolId__strategyType
  poolId__oracleEnabled
  poolId__symbol
  poolId__name
  poolId__swapEnabled
  poolId__swapEnabledInternal
  poolId__swapEnabledCurationSignal
  poolId__swapFee
  poolId__owner
  poolId__isPaused
  poolId__totalWeight
  poolId__totalSwapVolume
  poolId__totalSwapFee
  poolId__totalLiquidity
  poolId__totalLiquiditySansBPT
  poolId__totalShares
  poolId__totalProtocolFee
  poolId__createTime
  poolId__swapsCount
  poolId__holdersCount
  poolId__tx
  poolId__amp
  poolId__principalToken
  poolId__baseToken
  poolId__expiryTime
  poolId__unitSeconds
  poolId__managementFee
  poolId__joinExitEnabled
  poolId__mustAllowlistLPs
  poolId__managementAumFee
  poolId__totalAumFeeCollectedInBPT
  poolId__mainIndex
  poolId__wrappedIndex
  poolId__lowerTarget
  poolId__upperTarget
  poolId__sqrtAlpha
  poolId__sqrtBeta
  poolId__root3Alpha
  poolId__c
  poolId__s
  poolId__tauAlphaX
  poolId__tauAlphaY
  poolId__tauBetaX
  poolId__tauBetaY
  poolId__u
  poolId__v
  poolId__w
  poolId__z
  poolId__dSq
  poolId__alpha
  poolId__beta
  poolId__lambda
  poolId__delta
  poolId__epsilon
  poolId__isInRecoveryMode
  poolId__protocolSwapFeeCache
  poolId__protocolYieldFeeCache
  poolId__protocolAumFeeCache
  poolId__totalProtocolFeePaidInBPT
  poolId__lastJoinExitAmp
  poolId__lastPostJoinExitInvariant
  poolId__protocolId
  price
  block
}

type bal_ManagementOperation {
  id: ID!
  type: bal_OperationType!
  cashDelta: bal_BigDecimal!
  managedDelta: bal_BigDecimal!
  poolTokenId: bal_PoolToken!
  timestamp: Int!
}

input bal_ManagementOperation_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  type: bal_OperationType
  type_not: bal_OperationType
  type_in: [bal_OperationType!]
  type_not_in: [bal_OperationType!]
  cashDelta: bal_BigDecimal
  cashDelta_not: bal_BigDecimal
  cashDelta_gt: bal_BigDecimal
  cashDelta_lt: bal_BigDecimal
  cashDelta_gte: bal_BigDecimal
  cashDelta_lte: bal_BigDecimal
  cashDelta_in: [bal_BigDecimal!]
  cashDelta_not_in: [bal_BigDecimal!]
  managedDelta: bal_BigDecimal
  managedDelta_not: bal_BigDecimal
  managedDelta_gt: bal_BigDecimal
  managedDelta_lt: bal_BigDecimal
  managedDelta_gte: bal_BigDecimal
  managedDelta_lte: bal_BigDecimal
  managedDelta_in: [bal_BigDecimal!]
  managedDelta_not_in: [bal_BigDecimal!]
  poolTokenId: String
  poolTokenId_not: String
  poolTokenId_gt: String
  poolTokenId_lt: String
  poolTokenId_gte: String
  poolTokenId_lte: String
  poolTokenId_in: [String!]
  poolTokenId_not_in: [String!]
  poolTokenId_contains: String
  poolTokenId_contains_nocase: String
  poolTokenId_not_contains: String
  poolTokenId_not_contains_nocase: String
  poolTokenId_starts_with: String
  poolTokenId_starts_with_nocase: String
  poolTokenId_not_starts_with: String
  poolTokenId_not_starts_with_nocase: String
  poolTokenId_ends_with: String
  poolTokenId_ends_with_nocase: String
  poolTokenId_not_ends_with: String
  poolTokenId_not_ends_with_nocase: String
  poolTokenId_: bal_PoolToken_filter
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: bal_BlockChangedFilter
  and: [bal_ManagementOperation_filter]
  or: [bal_ManagementOperation_filter]
}

enum bal_ManagementOperation_orderBy {
  id
  type
  cashDelta
  managedDelta
  poolTokenId
  poolTokenId__id
  poolTokenId__assetManager
  poolTokenId__symbol
  poolTokenId__name
  poolTokenId__decimals
  poolTokenId__index
  poolTokenId__address
  poolTokenId__oldPriceRate
  poolTokenId__priceRate
  poolTokenId__balance
  poolTokenId__paidProtocolFees
  poolTokenId__cashBalance
  poolTokenId__managedBalance
  poolTokenId__weight
  poolTokenId__isExemptFromYieldProtocolFee
  timestamp
}

enum bal_OperationType {
  Deposit
  Withdraw
  Update
}

"""Defines the order direction, either ascending or descending"""
enum bal_OrderDirection {
  asc
  desc
}

type bal_Pool {
  id: ID!
  address: bal_Bytes!
  poolType: String
  poolTypeVersion: Int
  factory: bal_Bytes
  strategyType: Int!
  oracleEnabled: Boolean!
  symbol: String
  name: String
  """
  Indicates if a pool can be swapped against. Combines multiple sources, including offchain curation
  """
  swapEnabled: Boolean!
  """
  The native swapEnabled boolean. internal to the pool. Only applies to Gyro, LBPs and InvestmentPools
  """
  swapEnabledInternal: Boolean
  """External indication from an offchain permissioned actor"""
  swapEnabledCurationSignal: Boolean
  swapFee: bal_BigDecimal!
  owner: bal_Bytes
  isPaused: Boolean
  totalWeight: bal_BigDecimal
  totalSwapVolume: bal_BigDecimal!
  totalSwapFee: bal_BigDecimal!
  totalLiquidity: bal_BigDecimal!
  totalLiquiditySansBPT: bal_BigDecimal
  totalShares: bal_BigDecimal!
  totalProtocolFee: bal_BigDecimal
  createTime: Int!
  swapsCount: BigInt!
  holdersCount: BigInt!
  vaultID: bal_Balancer!
  tx: bal_Bytes
  tokensList: [bal_Bytes!]!
  tokens(skip: Int = 0, first: Int = 100, orderBy: bal_PoolToken_orderBy, orderDirection: bal_OrderDirection, where: bal_PoolToken_filter): [bal_PoolToken!]
  joinsExits(skip: Int = 0, first: Int = 100, orderBy: bal_JoinExit_orderBy, orderDirection: bal_OrderDirection, where: bal_JoinExit_filter): [bal_JoinExit!]
  swaps(skip: Int = 0, first: Int = 100, orderBy: bal_Swap_orderBy, orderDirection: bal_OrderDirection, where: bal_Swap_filter): [bal_Swap!]
  shares(skip: Int = 0, first: Int = 100, orderBy: bal_PoolShare_orderBy, orderDirection: bal_OrderDirection, where: bal_PoolShare_filter): [bal_PoolShare!]
  snapshots(skip: Int = 0, first: Int = 100, orderBy: bal_PoolSnapshot_orderBy, orderDirection: bal_OrderDirection, where: bal_PoolSnapshot_filter): [bal_PoolSnapshot!]
  historicalValues(skip: Int = 0, first: Int = 100, orderBy: bal_PoolHistoricalLiquidity_orderBy, orderDirection: bal_OrderDirection, where: bal_PoolHistoricalLiquidity_filter): [bal_PoolHistoricalLiquidity!]
  weightUpdates(skip: Int = 0, first: Int = 100, orderBy: bal_GradualWeightUpdate_orderBy, orderDirection: bal_OrderDirection, where: bal_GradualWeightUpdate_filter): [bal_GradualWeightUpdate!]
  amp: BigInt
  latestAmpUpdate: bal_AmpUpdate
  ampUpdates(skip: Int = 0, first: Int = 100, orderBy: bal_AmpUpdate_orderBy, orderDirection: bal_OrderDirection, where: bal_AmpUpdate_filter): [bal_AmpUpdate!]
  priceRateProviders(skip: Int = 0, first: Int = 100, orderBy: bal_PriceRateProvider_orderBy, orderDirection: bal_OrderDirection, where: bal_PriceRateProvider_filter): [bal_PriceRateProvider!]
  principalToken: bal_Bytes
  baseToken: bal_Bytes
  expiryTime: BigInt
  unitSeconds: BigInt
  managementFee: bal_BigDecimal
  joinExitEnabled: Boolean
  mustAllowlistLPs: Boolean
  managementAumFee: bal_BigDecimal
  totalAumFeeCollectedInBPT: bal_BigDecimal
  circuitBreakers(skip: Int = 0, first: Int = 100, orderBy: bal_CircuitBreaker_orderBy, orderDirection: bal_OrderDirection, where: bal_CircuitBreaker_filter): [bal_CircuitBreaker!]
  mainIndex: Int
  wrappedIndex: Int
  lowerTarget: bal_BigDecimal
  upperTarget: bal_BigDecimal
  sqrtAlpha: bal_BigDecimal
  sqrtBeta: bal_BigDecimal
  root3Alpha: bal_BigDecimal
  c: bal_BigDecimal
  s: bal_BigDecimal
  tauAlphaX: bal_BigDecimal
  tauAlphaY: bal_BigDecimal
  tauBetaX: bal_BigDecimal
  tauBetaY: bal_BigDecimal
  u: bal_BigDecimal
  v: bal_BigDecimal
  w: bal_BigDecimal
  z: bal_BigDecimal
  dSq: bal_BigDecimal
  alpha: bal_BigDecimal
  beta: bal_BigDecimal
  lambda: bal_BigDecimal
  delta: bal_BigDecimal
  epsilon: bal_BigDecimal
  isInRecoveryMode: Boolean
  protocolSwapFeeCache: bal_BigDecimal
  protocolYieldFeeCache: bal_BigDecimal
  protocolAumFeeCache: bal_BigDecimal
  totalProtocolFeePaidInBPT: bal_BigDecimal
  lastJoinExitAmp: BigInt
  lastPostJoinExitInvariant: bal_BigDecimal
  protocolId: Int
  protocolIdData: bal_ProtocolIdData
}

type bal_PoolContract {
  id: ID!
  pool: bal_Pool!
}

input bal_PoolContract_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: bal_Pool_filter
  """Filter for the block changed event."""
  _change_block: bal_BlockChangedFilter
  and: [bal_PoolContract_filter]
  or: [bal_PoolContract_filter]
}

enum bal_PoolContract_orderBy {
  id
  pool
  pool__id
  pool__address
  pool__poolType
  pool__poolTypeVersion
  pool__factory
  pool__strategyType
  pool__oracleEnabled
  pool__symbol
  pool__name
  pool__swapEnabled
  pool__swapEnabledInternal
  pool__swapEnabledCurationSignal
  pool__swapFee
  pool__owner
  pool__isPaused
  pool__totalWeight
  pool__totalSwapVolume
  pool__totalSwapFee
  pool__totalLiquidity
  pool__totalLiquiditySansBPT
  pool__totalShares
  pool__totalProtocolFee
  pool__createTime
  pool__swapsCount
  pool__holdersCount
  pool__tx
  pool__amp
  pool__principalToken
  pool__baseToken
  pool__expiryTime
  pool__unitSeconds
  pool__managementFee
  pool__joinExitEnabled
  pool__mustAllowlistLPs
  pool__managementAumFee
  pool__totalAumFeeCollectedInBPT
  pool__mainIndex
  pool__wrappedIndex
  pool__lowerTarget
  pool__upperTarget
  pool__sqrtAlpha
  pool__sqrtBeta
  pool__root3Alpha
  pool__c
  pool__s
  pool__tauAlphaX
  pool__tauAlphaY
  pool__tauBetaX
  pool__tauBetaY
  pool__u
  pool__v
  pool__w
  pool__z
  pool__dSq
  pool__alpha
  pool__beta
  pool__lambda
  pool__delta
  pool__epsilon
  pool__isInRecoveryMode
  pool__protocolSwapFeeCache
  pool__protocolYieldFeeCache
  pool__protocolAumFeeCache
  pool__totalProtocolFeePaidInBPT
  pool__lastJoinExitAmp
  pool__lastPostJoinExitInvariant
  pool__protocolId
}

type bal_PoolHistoricalLiquidity {
  id: ID!
  poolId: bal_Pool!
  poolTotalShares: bal_BigDecimal!
  poolLiquidity: bal_BigDecimal!
  poolShareValue: bal_BigDecimal!
  pricingAsset: bal_Bytes!
  block: BigInt!
}

input bal_PoolHistoricalLiquidity_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  poolId: String
  poolId_not: String
  poolId_gt: String
  poolId_lt: String
  poolId_gte: String
  poolId_lte: String
  poolId_in: [String!]
  poolId_not_in: [String!]
  poolId_contains: String
  poolId_contains_nocase: String
  poolId_not_contains: String
  poolId_not_contains_nocase: String
  poolId_starts_with: String
  poolId_starts_with_nocase: String
  poolId_not_starts_with: String
  poolId_not_starts_with_nocase: String
  poolId_ends_with: String
  poolId_ends_with_nocase: String
  poolId_not_ends_with: String
  poolId_not_ends_with_nocase: String
  poolId_: bal_Pool_filter
  poolTotalShares: bal_BigDecimal
  poolTotalShares_not: bal_BigDecimal
  poolTotalShares_gt: bal_BigDecimal
  poolTotalShares_lt: bal_BigDecimal
  poolTotalShares_gte: bal_BigDecimal
  poolTotalShares_lte: bal_BigDecimal
  poolTotalShares_in: [bal_BigDecimal!]
  poolTotalShares_not_in: [bal_BigDecimal!]
  poolLiquidity: bal_BigDecimal
  poolLiquidity_not: bal_BigDecimal
  poolLiquidity_gt: bal_BigDecimal
  poolLiquidity_lt: bal_BigDecimal
  poolLiquidity_gte: bal_BigDecimal
  poolLiquidity_lte: bal_BigDecimal
  poolLiquidity_in: [bal_BigDecimal!]
  poolLiquidity_not_in: [bal_BigDecimal!]
  poolShareValue: bal_BigDecimal
  poolShareValue_not: bal_BigDecimal
  poolShareValue_gt: bal_BigDecimal
  poolShareValue_lt: bal_BigDecimal
  poolShareValue_gte: bal_BigDecimal
  poolShareValue_lte: bal_BigDecimal
  poolShareValue_in: [bal_BigDecimal!]
  poolShareValue_not_in: [bal_BigDecimal!]
  pricingAsset: bal_Bytes
  pricingAsset_not: bal_Bytes
  pricingAsset_gt: bal_Bytes
  pricingAsset_lt: bal_Bytes
  pricingAsset_gte: bal_Bytes
  pricingAsset_lte: bal_Bytes
  pricingAsset_in: [bal_Bytes!]
  pricingAsset_not_in: [bal_Bytes!]
  pricingAsset_contains: bal_Bytes
  pricingAsset_not_contains: bal_Bytes
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: bal_BlockChangedFilter
  and: [bal_PoolHistoricalLiquidity_filter]
  or: [bal_PoolHistoricalLiquidity_filter]
}

enum bal_PoolHistoricalLiquidity_orderBy {
  id
  poolId
  poolId__id
  poolId__address
  poolId__poolType
  poolId__poolTypeVersion
  poolId__factory
  poolId__strategyType
  poolId__oracleEnabled
  poolId__symbol
  poolId__name
  poolId__swapEnabled
  poolId__swapEnabledInternal
  poolId__swapEnabledCurationSignal
  poolId__swapFee
  poolId__owner
  poolId__isPaused
  poolId__totalWeight
  poolId__totalSwapVolume
  poolId__totalSwapFee
  poolId__totalLiquidity
  poolId__totalLiquiditySansBPT
  poolId__totalShares
  poolId__totalProtocolFee
  poolId__createTime
  poolId__swapsCount
  poolId__holdersCount
  poolId__tx
  poolId__amp
  poolId__principalToken
  poolId__baseToken
  poolId__expiryTime
  poolId__unitSeconds
  poolId__managementFee
  poolId__joinExitEnabled
  poolId__mustAllowlistLPs
  poolId__managementAumFee
  poolId__totalAumFeeCollectedInBPT
  poolId__mainIndex
  poolId__wrappedIndex
  poolId__lowerTarget
  poolId__upperTarget
  poolId__sqrtAlpha
  poolId__sqrtBeta
  poolId__root3Alpha
  poolId__c
  poolId__s
  poolId__tauAlphaX
  poolId__tauAlphaY
  poolId__tauBetaX
  poolId__tauBetaY
  poolId__u
  poolId__v
  poolId__w
  poolId__z
  poolId__dSq
  poolId__alpha
  poolId__beta
  poolId__lambda
  poolId__delta
  poolId__epsilon
  poolId__isInRecoveryMode
  poolId__protocolSwapFeeCache
  poolId__protocolYieldFeeCache
  poolId__protocolAumFeeCache
  poolId__totalProtocolFeePaidInBPT
  poolId__lastJoinExitAmp
  poolId__lastPostJoinExitInvariant
  poolId__protocolId
  poolTotalShares
  poolLiquidity
  poolShareValue
  pricingAsset
  block
}

type bal_PoolShare {
  id: ID!
  userAddress: bal_User!
  poolId: bal_Pool!
  balance: bal_BigDecimal!
}

input bal_PoolShare_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  userAddress: String
  userAddress_not: String
  userAddress_gt: String
  userAddress_lt: String
  userAddress_gte: String
  userAddress_lte: String
  userAddress_in: [String!]
  userAddress_not_in: [String!]
  userAddress_contains: String
  userAddress_contains_nocase: String
  userAddress_not_contains: String
  userAddress_not_contains_nocase: String
  userAddress_starts_with: String
  userAddress_starts_with_nocase: String
  userAddress_not_starts_with: String
  userAddress_not_starts_with_nocase: String
  userAddress_ends_with: String
  userAddress_ends_with_nocase: String
  userAddress_not_ends_with: String
  userAddress_not_ends_with_nocase: String
  userAddress_: bal_User_filter
  poolId: String
  poolId_not: String
  poolId_gt: String
  poolId_lt: String
  poolId_gte: String
  poolId_lte: String
  poolId_in: [String!]
  poolId_not_in: [String!]
  poolId_contains: String
  poolId_contains_nocase: String
  poolId_not_contains: String
  poolId_not_contains_nocase: String
  poolId_starts_with: String
  poolId_starts_with_nocase: String
  poolId_not_starts_with: String
  poolId_not_starts_with_nocase: String
  poolId_ends_with: String
  poolId_ends_with_nocase: String
  poolId_not_ends_with: String
  poolId_not_ends_with_nocase: String
  poolId_: bal_Pool_filter
  balance: bal_BigDecimal
  balance_not: bal_BigDecimal
  balance_gt: bal_BigDecimal
  balance_lt: bal_BigDecimal
  balance_gte: bal_BigDecimal
  balance_lte: bal_BigDecimal
  balance_in: [bal_BigDecimal!]
  balance_not_in: [bal_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: bal_BlockChangedFilter
  and: [bal_PoolShare_filter]
  or: [bal_PoolShare_filter]
}

enum bal_PoolShare_orderBy {
  id
  userAddress
  userAddress__id
  poolId
  poolId__id
  poolId__address
  poolId__poolType
  poolId__poolTypeVersion
  poolId__factory
  poolId__strategyType
  poolId__oracleEnabled
  poolId__symbol
  poolId__name
  poolId__swapEnabled
  poolId__swapEnabledInternal
  poolId__swapEnabledCurationSignal
  poolId__swapFee
  poolId__owner
  poolId__isPaused
  poolId__totalWeight
  poolId__totalSwapVolume
  poolId__totalSwapFee
  poolId__totalLiquidity
  poolId__totalLiquiditySansBPT
  poolId__totalShares
  poolId__totalProtocolFee
  poolId__createTime
  poolId__swapsCount
  poolId__holdersCount
  poolId__tx
  poolId__amp
  poolId__principalToken
  poolId__baseToken
  poolId__expiryTime
  poolId__unitSeconds
  poolId__managementFee
  poolId__joinExitEnabled
  poolId__mustAllowlistLPs
  poolId__managementAumFee
  poolId__totalAumFeeCollectedInBPT
  poolId__mainIndex
  poolId__wrappedIndex
  poolId__lowerTarget
  poolId__upperTarget
  poolId__sqrtAlpha
  poolId__sqrtBeta
  poolId__root3Alpha
  poolId__c
  poolId__s
  poolId__tauAlphaX
  poolId__tauAlphaY
  poolId__tauBetaX
  poolId__tauBetaY
  poolId__u
  poolId__v
  poolId__w
  poolId__z
  poolId__dSq
  poolId__alpha
  poolId__beta
  poolId__lambda
  poolId__delta
  poolId__epsilon
  poolId__isInRecoveryMode
  poolId__protocolSwapFeeCache
  poolId__protocolYieldFeeCache
  poolId__protocolAumFeeCache
  poolId__totalProtocolFeePaidInBPT
  poolId__lastJoinExitAmp
  poolId__lastPostJoinExitInvariant
  poolId__protocolId
  balance
}

type bal_PoolSnapshot {
  id: ID!
  pool: bal_Pool!
  amounts: [bal_BigDecimal!]!
  totalShares: bal_BigDecimal!
  swapVolume: bal_BigDecimal!
  protocolFee: bal_BigDecimal
  swapFees: bal_BigDecimal!
  liquidity: bal_BigDecimal!
  swapsCount: BigInt!
  holdersCount: BigInt!
  timestamp: Int!
}

input bal_PoolSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: bal_Pool_filter
  amounts: [bal_BigDecimal!]
  amounts_not: [bal_BigDecimal!]
  amounts_contains: [bal_BigDecimal!]
  amounts_contains_nocase: [bal_BigDecimal!]
  amounts_not_contains: [bal_BigDecimal!]
  amounts_not_contains_nocase: [bal_BigDecimal!]
  totalShares: bal_BigDecimal
  totalShares_not: bal_BigDecimal
  totalShares_gt: bal_BigDecimal
  totalShares_lt: bal_BigDecimal
  totalShares_gte: bal_BigDecimal
  totalShares_lte: bal_BigDecimal
  totalShares_in: [bal_BigDecimal!]
  totalShares_not_in: [bal_BigDecimal!]
  swapVolume: bal_BigDecimal
  swapVolume_not: bal_BigDecimal
  swapVolume_gt: bal_BigDecimal
  swapVolume_lt: bal_BigDecimal
  swapVolume_gte: bal_BigDecimal
  swapVolume_lte: bal_BigDecimal
  swapVolume_in: [bal_BigDecimal!]
  swapVolume_not_in: [bal_BigDecimal!]
  protocolFee: bal_BigDecimal
  protocolFee_not: bal_BigDecimal
  protocolFee_gt: bal_BigDecimal
  protocolFee_lt: bal_BigDecimal
  protocolFee_gte: bal_BigDecimal
  protocolFee_lte: bal_BigDecimal
  protocolFee_in: [bal_BigDecimal!]
  protocolFee_not_in: [bal_BigDecimal!]
  swapFees: bal_BigDecimal
  swapFees_not: bal_BigDecimal
  swapFees_gt: bal_BigDecimal
  swapFees_lt: bal_BigDecimal
  swapFees_gte: bal_BigDecimal
  swapFees_lte: bal_BigDecimal
  swapFees_in: [bal_BigDecimal!]
  swapFees_not_in: [bal_BigDecimal!]
  liquidity: bal_BigDecimal
  liquidity_not: bal_BigDecimal
  liquidity_gt: bal_BigDecimal
  liquidity_lt: bal_BigDecimal
  liquidity_gte: bal_BigDecimal
  liquidity_lte: bal_BigDecimal
  liquidity_in: [bal_BigDecimal!]
  liquidity_not_in: [bal_BigDecimal!]
  swapsCount: BigInt
  swapsCount_not: BigInt
  swapsCount_gt: BigInt
  swapsCount_lt: BigInt
  swapsCount_gte: BigInt
  swapsCount_lte: BigInt
  swapsCount_in: [BigInt!]
  swapsCount_not_in: [BigInt!]
  holdersCount: BigInt
  holdersCount_not: BigInt
  holdersCount_gt: BigInt
  holdersCount_lt: BigInt
  holdersCount_gte: BigInt
  holdersCount_lte: BigInt
  holdersCount_in: [BigInt!]
  holdersCount_not_in: [BigInt!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: bal_BlockChangedFilter
  and: [bal_PoolSnapshot_filter]
  or: [bal_PoolSnapshot_filter]
}

enum bal_PoolSnapshot_orderBy {
  id
  pool
  pool__id
  pool__address
  pool__poolType
  pool__poolTypeVersion
  pool__factory
  pool__strategyType
  pool__oracleEnabled
  pool__symbol
  pool__name
  pool__swapEnabled
  pool__swapEnabledInternal
  pool__swapEnabledCurationSignal
  pool__swapFee
  pool__owner
  pool__isPaused
  pool__totalWeight
  pool__totalSwapVolume
  pool__totalSwapFee
  pool__totalLiquidity
  pool__totalLiquiditySansBPT
  pool__totalShares
  pool__totalProtocolFee
  pool__createTime
  pool__swapsCount
  pool__holdersCount
  pool__tx
  pool__amp
  pool__principalToken
  pool__baseToken
  pool__expiryTime
  pool__unitSeconds
  pool__managementFee
  pool__joinExitEnabled
  pool__mustAllowlistLPs
  pool__managementAumFee
  pool__totalAumFeeCollectedInBPT
  pool__mainIndex
  pool__wrappedIndex
  pool__lowerTarget
  pool__upperTarget
  pool__sqrtAlpha
  pool__sqrtBeta
  pool__root3Alpha
  pool__c
  pool__s
  pool__tauAlphaX
  pool__tauAlphaY
  pool__tauBetaX
  pool__tauBetaY
  pool__u
  pool__v
  pool__w
  pool__z
  pool__dSq
  pool__alpha
  pool__beta
  pool__lambda
  pool__delta
  pool__epsilon
  pool__isInRecoveryMode
  pool__protocolSwapFeeCache
  pool__protocolYieldFeeCache
  pool__protocolAumFeeCache
  pool__totalProtocolFeePaidInBPT
  pool__lastJoinExitAmp
  pool__lastPostJoinExitInvariant
  pool__protocolId
  amounts
  totalShares
  swapVolume
  protocolFee
  swapFees
  liquidity
  swapsCount
  holdersCount
  timestamp
}

type bal_PoolToken {
  id: ID!
  poolId: bal_Pool
  token: bal_Token!
  assetManager: bal_Bytes!
  symbol: String!
  name: String!
  decimals: Int!
  index: Int
  address: String!
  oldPriceRate: bal_BigDecimal
  priceRate: bal_BigDecimal!
  balance: bal_BigDecimal!
  paidProtocolFees: bal_BigDecimal
  cashBalance: bal_BigDecimal!
  managedBalance: bal_BigDecimal!
  managements(skip: Int = 0, first: Int = 100, orderBy: bal_ManagementOperation_orderBy, orderDirection: bal_OrderDirection, where: bal_ManagementOperation_filter): [bal_ManagementOperation!]
  weight: bal_BigDecimal
  isExemptFromYieldProtocolFee: Boolean
  circuitBreaker: bal_CircuitBreaker
}

input bal_PoolToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  poolId: String
  poolId_not: String
  poolId_gt: String
  poolId_lt: String
  poolId_gte: String
  poolId_lte: String
  poolId_in: [String!]
  poolId_not_in: [String!]
  poolId_contains: String
  poolId_contains_nocase: String
  poolId_not_contains: String
  poolId_not_contains_nocase: String
  poolId_starts_with: String
  poolId_starts_with_nocase: String
  poolId_not_starts_with: String
  poolId_not_starts_with_nocase: String
  poolId_ends_with: String
  poolId_ends_with_nocase: String
  poolId_not_ends_with: String
  poolId_not_ends_with_nocase: String
  poolId_: bal_Pool_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: bal_Token_filter
  assetManager: bal_Bytes
  assetManager_not: bal_Bytes
  assetManager_gt: bal_Bytes
  assetManager_lt: bal_Bytes
  assetManager_gte: bal_Bytes
  assetManager_lte: bal_Bytes
  assetManager_in: [bal_Bytes!]
  assetManager_not_in: [bal_Bytes!]
  assetManager_contains: bal_Bytes
  assetManager_not_contains: bal_Bytes
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  index: Int
  index_not: Int
  index_gt: Int
  index_lt: Int
  index_gte: Int
  index_lte: Int
  index_in: [Int!]
  index_not_in: [Int!]
  address: String
  address_not: String
  address_gt: String
  address_lt: String
  address_gte: String
  address_lte: String
  address_in: [String!]
  address_not_in: [String!]
  address_contains: String
  address_contains_nocase: String
  address_not_contains: String
  address_not_contains_nocase: String
  address_starts_with: String
  address_starts_with_nocase: String
  address_not_starts_with: String
  address_not_starts_with_nocase: String
  address_ends_with: String
  address_ends_with_nocase: String
  address_not_ends_with: String
  address_not_ends_with_nocase: String
  oldPriceRate: bal_BigDecimal
  oldPriceRate_not: bal_BigDecimal
  oldPriceRate_gt: bal_BigDecimal
  oldPriceRate_lt: bal_BigDecimal
  oldPriceRate_gte: bal_BigDecimal
  oldPriceRate_lte: bal_BigDecimal
  oldPriceRate_in: [bal_BigDecimal!]
  oldPriceRate_not_in: [bal_BigDecimal!]
  priceRate: bal_BigDecimal
  priceRate_not: bal_BigDecimal
  priceRate_gt: bal_BigDecimal
  priceRate_lt: bal_BigDecimal
  priceRate_gte: bal_BigDecimal
  priceRate_lte: bal_BigDecimal
  priceRate_in: [bal_BigDecimal!]
  priceRate_not_in: [bal_BigDecimal!]
  balance: bal_BigDecimal
  balance_not: bal_BigDecimal
  balance_gt: bal_BigDecimal
  balance_lt: bal_BigDecimal
  balance_gte: bal_BigDecimal
  balance_lte: bal_BigDecimal
  balance_in: [bal_BigDecimal!]
  balance_not_in: [bal_BigDecimal!]
  paidProtocolFees: bal_BigDecimal
  paidProtocolFees_not: bal_BigDecimal
  paidProtocolFees_gt: bal_BigDecimal
  paidProtocolFees_lt: bal_BigDecimal
  paidProtocolFees_gte: bal_BigDecimal
  paidProtocolFees_lte: bal_BigDecimal
  paidProtocolFees_in: [bal_BigDecimal!]
  paidProtocolFees_not_in: [bal_BigDecimal!]
  cashBalance: bal_BigDecimal
  cashBalance_not: bal_BigDecimal
  cashBalance_gt: bal_BigDecimal
  cashBalance_lt: bal_BigDecimal
  cashBalance_gte: bal_BigDecimal
  cashBalance_lte: bal_BigDecimal
  cashBalance_in: [bal_BigDecimal!]
  cashBalance_not_in: [bal_BigDecimal!]
  managedBalance: bal_BigDecimal
  managedBalance_not: bal_BigDecimal
  managedBalance_gt: bal_BigDecimal
  managedBalance_lt: bal_BigDecimal
  managedBalance_gte: bal_BigDecimal
  managedBalance_lte: bal_BigDecimal
  managedBalance_in: [bal_BigDecimal!]
  managedBalance_not_in: [bal_BigDecimal!]
  managements_: bal_ManagementOperation_filter
  weight: bal_BigDecimal
  weight_not: bal_BigDecimal
  weight_gt: bal_BigDecimal
  weight_lt: bal_BigDecimal
  weight_gte: bal_BigDecimal
  weight_lte: bal_BigDecimal
  weight_in: [bal_BigDecimal!]
  weight_not_in: [bal_BigDecimal!]
  isExemptFromYieldProtocolFee: Boolean
  isExemptFromYieldProtocolFee_not: Boolean
  isExemptFromYieldProtocolFee_in: [Boolean!]
  isExemptFromYieldProtocolFee_not_in: [Boolean!]
  circuitBreaker: String
  circuitBreaker_not: String
  circuitBreaker_gt: String
  circuitBreaker_lt: String
  circuitBreaker_gte: String
  circuitBreaker_lte: String
  circuitBreaker_in: [String!]
  circuitBreaker_not_in: [String!]
  circuitBreaker_contains: String
  circuitBreaker_contains_nocase: String
  circuitBreaker_not_contains: String
  circuitBreaker_not_contains_nocase: String
  circuitBreaker_starts_with: String
  circuitBreaker_starts_with_nocase: String
  circuitBreaker_not_starts_with: String
  circuitBreaker_not_starts_with_nocase: String
  circuitBreaker_ends_with: String
  circuitBreaker_ends_with_nocase: String
  circuitBreaker_not_ends_with: String
  circuitBreaker_not_ends_with_nocase: String
  circuitBreaker_: bal_CircuitBreaker_filter
  """Filter for the block changed event."""
  _change_block: bal_BlockChangedFilter
  and: [bal_PoolToken_filter]
  or: [bal_PoolToken_filter]
}

enum bal_PoolToken_orderBy {
  id
  poolId
  poolId__id
  poolId__address
  poolId__poolType
  poolId__poolTypeVersion
  poolId__factory
  poolId__strategyType
  poolId__oracleEnabled
  poolId__symbol
  poolId__name
  poolId__swapEnabled
  poolId__swapEnabledInternal
  poolId__swapEnabledCurationSignal
  poolId__swapFee
  poolId__owner
  poolId__isPaused
  poolId__totalWeight
  poolId__totalSwapVolume
  poolId__totalSwapFee
  poolId__totalLiquidity
  poolId__totalLiquiditySansBPT
  poolId__totalShares
  poolId__totalProtocolFee
  poolId__createTime
  poolId__swapsCount
  poolId__holdersCount
  poolId__tx
  poolId__amp
  poolId__principalToken
  poolId__baseToken
  poolId__expiryTime
  poolId__unitSeconds
  poolId__managementFee
  poolId__joinExitEnabled
  poolId__mustAllowlistLPs
  poolId__managementAumFee
  poolId__totalAumFeeCollectedInBPT
  poolId__mainIndex
  poolId__wrappedIndex
  poolId__lowerTarget
  poolId__upperTarget
  poolId__sqrtAlpha
  poolId__sqrtBeta
  poolId__root3Alpha
  poolId__c
  poolId__s
  poolId__tauAlphaX
  poolId__tauAlphaY
  poolId__tauBetaX
  poolId__tauBetaY
  poolId__u
  poolId__v
  poolId__w
  poolId__z
  poolId__dSq
  poolId__alpha
  poolId__beta
  poolId__lambda
  poolId__delta
  poolId__epsilon
  poolId__isInRecoveryMode
  poolId__protocolSwapFeeCache
  poolId__protocolYieldFeeCache
  poolId__protocolAumFeeCache
  poolId__totalProtocolFeePaidInBPT
  poolId__lastJoinExitAmp
  poolId__lastPostJoinExitInvariant
  poolId__protocolId
  token
  token__id
  token__symbol
  token__name
  token__decimals
  token__address
  token__totalBalanceUSD
  token__totalBalanceNotional
  token__totalVolumeUSD
  token__totalVolumeNotional
  token__totalSwapCount
  token__latestUSDPrice
  token__latestUSDPriceTimestamp
  token__latestFXPrice
  token__fxOracleDecimals
  assetManager
  symbol
  name
  decimals
  index
  address
  oldPriceRate
  priceRate
  balance
  paidProtocolFees
  cashBalance
  managedBalance
  managements
  weight
  isExemptFromYieldProtocolFee
  circuitBreaker
  circuitBreaker__id
  circuitBreaker__bptPrice
  circuitBreaker__lowerBoundPercentage
  circuitBreaker__upperBoundPercentage
}

input bal_Pool_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: bal_Bytes
  address_not: bal_Bytes
  address_gt: bal_Bytes
  address_lt: bal_Bytes
  address_gte: bal_Bytes
  address_lte: bal_Bytes
  address_in: [bal_Bytes!]
  address_not_in: [bal_Bytes!]
  address_contains: bal_Bytes
  address_not_contains: bal_Bytes
  poolType: String
  poolType_not: String
  poolType_gt: String
  poolType_lt: String
  poolType_gte: String
  poolType_lte: String
  poolType_in: [String!]
  poolType_not_in: [String!]
  poolType_contains: String
  poolType_contains_nocase: String
  poolType_not_contains: String
  poolType_not_contains_nocase: String
  poolType_starts_with: String
  poolType_starts_with_nocase: String
  poolType_not_starts_with: String
  poolType_not_starts_with_nocase: String
  poolType_ends_with: String
  poolType_ends_with_nocase: String
  poolType_not_ends_with: String
  poolType_not_ends_with_nocase: String
  poolTypeVersion: Int
  poolTypeVersion_not: Int
  poolTypeVersion_gt: Int
  poolTypeVersion_lt: Int
  poolTypeVersion_gte: Int
  poolTypeVersion_lte: Int
  poolTypeVersion_in: [Int!]
  poolTypeVersion_not_in: [Int!]
  factory: bal_Bytes
  factory_not: bal_Bytes
  factory_gt: bal_Bytes
  factory_lt: bal_Bytes
  factory_gte: bal_Bytes
  factory_lte: bal_Bytes
  factory_in: [bal_Bytes!]
  factory_not_in: [bal_Bytes!]
  factory_contains: bal_Bytes
  factory_not_contains: bal_Bytes
  strategyType: Int
  strategyType_not: Int
  strategyType_gt: Int
  strategyType_lt: Int
  strategyType_gte: Int
  strategyType_lte: Int
  strategyType_in: [Int!]
  strategyType_not_in: [Int!]
  oracleEnabled: Boolean
  oracleEnabled_not: Boolean
  oracleEnabled_in: [Boolean!]
  oracleEnabled_not_in: [Boolean!]
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  swapEnabled: Boolean
  swapEnabled_not: Boolean
  swapEnabled_in: [Boolean!]
  swapEnabled_not_in: [Boolean!]
  swapEnabledInternal: Boolean
  swapEnabledInternal_not: Boolean
  swapEnabledInternal_in: [Boolean!]
  swapEnabledInternal_not_in: [Boolean!]
  swapEnabledCurationSignal: Boolean
  swapEnabledCurationSignal_not: Boolean
  swapEnabledCurationSignal_in: [Boolean!]
  swapEnabledCurationSignal_not_in: [Boolean!]
  swapFee: bal_BigDecimal
  swapFee_not: bal_BigDecimal
  swapFee_gt: bal_BigDecimal
  swapFee_lt: bal_BigDecimal
  swapFee_gte: bal_BigDecimal
  swapFee_lte: bal_BigDecimal
  swapFee_in: [bal_BigDecimal!]
  swapFee_not_in: [bal_BigDecimal!]
  owner: bal_Bytes
  owner_not: bal_Bytes
  owner_gt: bal_Bytes
  owner_lt: bal_Bytes
  owner_gte: bal_Bytes
  owner_lte: bal_Bytes
  owner_in: [bal_Bytes!]
  owner_not_in: [bal_Bytes!]
  owner_contains: bal_Bytes
  owner_not_contains: bal_Bytes
  isPaused: Boolean
  isPaused_not: Boolean
  isPaused_in: [Boolean!]
  isPaused_not_in: [Boolean!]
  totalWeight: bal_BigDecimal
  totalWeight_not: bal_BigDecimal
  totalWeight_gt: bal_BigDecimal
  totalWeight_lt: bal_BigDecimal
  totalWeight_gte: bal_BigDecimal
  totalWeight_lte: bal_BigDecimal
  totalWeight_in: [bal_BigDecimal!]
  totalWeight_not_in: [bal_BigDecimal!]
  totalSwapVolume: bal_BigDecimal
  totalSwapVolume_not: bal_BigDecimal
  totalSwapVolume_gt: bal_BigDecimal
  totalSwapVolume_lt: bal_BigDecimal
  totalSwapVolume_gte: bal_BigDecimal
  totalSwapVolume_lte: bal_BigDecimal
  totalSwapVolume_in: [bal_BigDecimal!]
  totalSwapVolume_not_in: [bal_BigDecimal!]
  totalSwapFee: bal_BigDecimal
  totalSwapFee_not: bal_BigDecimal
  totalSwapFee_gt: bal_BigDecimal
  totalSwapFee_lt: bal_BigDecimal
  totalSwapFee_gte: bal_BigDecimal
  totalSwapFee_lte: bal_BigDecimal
  totalSwapFee_in: [bal_BigDecimal!]
  totalSwapFee_not_in: [bal_BigDecimal!]
  totalLiquidity: bal_BigDecimal
  totalLiquidity_not: bal_BigDecimal
  totalLiquidity_gt: bal_BigDecimal
  totalLiquidity_lt: bal_BigDecimal
  totalLiquidity_gte: bal_BigDecimal
  totalLiquidity_lte: bal_BigDecimal
  totalLiquidity_in: [bal_BigDecimal!]
  totalLiquidity_not_in: [bal_BigDecimal!]
  totalLiquiditySansBPT: bal_BigDecimal
  totalLiquiditySansBPT_not: bal_BigDecimal
  totalLiquiditySansBPT_gt: bal_BigDecimal
  totalLiquiditySansBPT_lt: bal_BigDecimal
  totalLiquiditySansBPT_gte: bal_BigDecimal
  totalLiquiditySansBPT_lte: bal_BigDecimal
  totalLiquiditySansBPT_in: [bal_BigDecimal!]
  totalLiquiditySansBPT_not_in: [bal_BigDecimal!]
  totalShares: bal_BigDecimal
  totalShares_not: bal_BigDecimal
  totalShares_gt: bal_BigDecimal
  totalShares_lt: bal_BigDecimal
  totalShares_gte: bal_BigDecimal
  totalShares_lte: bal_BigDecimal
  totalShares_in: [bal_BigDecimal!]
  totalShares_not_in: [bal_BigDecimal!]
  totalProtocolFee: bal_BigDecimal
  totalProtocolFee_not: bal_BigDecimal
  totalProtocolFee_gt: bal_BigDecimal
  totalProtocolFee_lt: bal_BigDecimal
  totalProtocolFee_gte: bal_BigDecimal
  totalProtocolFee_lte: bal_BigDecimal
  totalProtocolFee_in: [bal_BigDecimal!]
  totalProtocolFee_not_in: [bal_BigDecimal!]
  createTime: Int
  createTime_not: Int
  createTime_gt: Int
  createTime_lt: Int
  createTime_gte: Int
  createTime_lte: Int
  createTime_in: [Int!]
  createTime_not_in: [Int!]
  swapsCount: BigInt
  swapsCount_not: BigInt
  swapsCount_gt: BigInt
  swapsCount_lt: BigInt
  swapsCount_gte: BigInt
  swapsCount_lte: BigInt
  swapsCount_in: [BigInt!]
  swapsCount_not_in: [BigInt!]
  holdersCount: BigInt
  holdersCount_not: BigInt
  holdersCount_gt: BigInt
  holdersCount_lt: BigInt
  holdersCount_gte: BigInt
  holdersCount_lte: BigInt
  holdersCount_in: [BigInt!]
  holdersCount_not_in: [BigInt!]
  vaultID: String
  vaultID_not: String
  vaultID_gt: String
  vaultID_lt: String
  vaultID_gte: String
  vaultID_lte: String
  vaultID_in: [String!]
  vaultID_not_in: [String!]
  vaultID_contains: String
  vaultID_contains_nocase: String
  vaultID_not_contains: String
  vaultID_not_contains_nocase: String
  vaultID_starts_with: String
  vaultID_starts_with_nocase: String
  vaultID_not_starts_with: String
  vaultID_not_starts_with_nocase: String
  vaultID_ends_with: String
  vaultID_ends_with_nocase: String
  vaultID_not_ends_with: String
  vaultID_not_ends_with_nocase: String
  vaultID_: bal_Balancer_filter
  tx: bal_Bytes
  tx_not: bal_Bytes
  tx_gt: bal_Bytes
  tx_lt: bal_Bytes
  tx_gte: bal_Bytes
  tx_lte: bal_Bytes
  tx_in: [bal_Bytes!]
  tx_not_in: [bal_Bytes!]
  tx_contains: bal_Bytes
  tx_not_contains: bal_Bytes
  tokensList: [bal_Bytes!]
  tokensList_not: [bal_Bytes!]
  tokensList_contains: [bal_Bytes!]
  tokensList_contains_nocase: [bal_Bytes!]
  tokensList_not_contains: [bal_Bytes!]
  tokensList_not_contains_nocase: [bal_Bytes!]
  tokens_: bal_PoolToken_filter
  joinsExits_: bal_JoinExit_filter
  swaps_: bal_Swap_filter
  shares_: bal_PoolShare_filter
  snapshots_: bal_PoolSnapshot_filter
  historicalValues_: bal_PoolHistoricalLiquidity_filter
  weightUpdates_: bal_GradualWeightUpdate_filter
  amp: BigInt
  amp_not: BigInt
  amp_gt: BigInt
  amp_lt: BigInt
  amp_gte: BigInt
  amp_lte: BigInt
  amp_in: [BigInt!]
  amp_not_in: [BigInt!]
  latestAmpUpdate: String
  latestAmpUpdate_not: String
  latestAmpUpdate_gt: String
  latestAmpUpdate_lt: String
  latestAmpUpdate_gte: String
  latestAmpUpdate_lte: String
  latestAmpUpdate_in: [String!]
  latestAmpUpdate_not_in: [String!]
  latestAmpUpdate_contains: String
  latestAmpUpdate_contains_nocase: String
  latestAmpUpdate_not_contains: String
  latestAmpUpdate_not_contains_nocase: String
  latestAmpUpdate_starts_with: String
  latestAmpUpdate_starts_with_nocase: String
  latestAmpUpdate_not_starts_with: String
  latestAmpUpdate_not_starts_with_nocase: String
  latestAmpUpdate_ends_with: String
  latestAmpUpdate_ends_with_nocase: String
  latestAmpUpdate_not_ends_with: String
  latestAmpUpdate_not_ends_with_nocase: String
  latestAmpUpdate_: bal_AmpUpdate_filter
  ampUpdates_: bal_AmpUpdate_filter
  priceRateProviders_: bal_PriceRateProvider_filter
  principalToken: bal_Bytes
  principalToken_not: bal_Bytes
  principalToken_gt: bal_Bytes
  principalToken_lt: bal_Bytes
  principalToken_gte: bal_Bytes
  principalToken_lte: bal_Bytes
  principalToken_in: [bal_Bytes!]
  principalToken_not_in: [bal_Bytes!]
  principalToken_contains: bal_Bytes
  principalToken_not_contains: bal_Bytes
  baseToken: bal_Bytes
  baseToken_not: bal_Bytes
  baseToken_gt: bal_Bytes
  baseToken_lt: bal_Bytes
  baseToken_gte: bal_Bytes
  baseToken_lte: bal_Bytes
  baseToken_in: [bal_Bytes!]
  baseToken_not_in: [bal_Bytes!]
  baseToken_contains: bal_Bytes
  baseToken_not_contains: bal_Bytes
  expiryTime: BigInt
  expiryTime_not: BigInt
  expiryTime_gt: BigInt
  expiryTime_lt: BigInt
  expiryTime_gte: BigInt
  expiryTime_lte: BigInt
  expiryTime_in: [BigInt!]
  expiryTime_not_in: [BigInt!]
  unitSeconds: BigInt
  unitSeconds_not: BigInt
  unitSeconds_gt: BigInt
  unitSeconds_lt: BigInt
  unitSeconds_gte: BigInt
  unitSeconds_lte: BigInt
  unitSeconds_in: [BigInt!]
  unitSeconds_not_in: [BigInt!]
  managementFee: bal_BigDecimal
  managementFee_not: bal_BigDecimal
  managementFee_gt: bal_BigDecimal
  managementFee_lt: bal_BigDecimal
  managementFee_gte: bal_BigDecimal
  managementFee_lte: bal_BigDecimal
  managementFee_in: [bal_BigDecimal!]
  managementFee_not_in: [bal_BigDecimal!]
  joinExitEnabled: Boolean
  joinExitEnabled_not: Boolean
  joinExitEnabled_in: [Boolean!]
  joinExitEnabled_not_in: [Boolean!]
  mustAllowlistLPs: Boolean
  mustAllowlistLPs_not: Boolean
  mustAllowlistLPs_in: [Boolean!]
  mustAllowlistLPs_not_in: [Boolean!]
  managementAumFee: bal_BigDecimal
  managementAumFee_not: bal_BigDecimal
  managementAumFee_gt: bal_BigDecimal
  managementAumFee_lt: bal_BigDecimal
  managementAumFee_gte: bal_BigDecimal
  managementAumFee_lte: bal_BigDecimal
  managementAumFee_in: [bal_BigDecimal!]
  managementAumFee_not_in: [bal_BigDecimal!]
  totalAumFeeCollectedInBPT: bal_BigDecimal
  totalAumFeeCollectedInBPT_not: bal_BigDecimal
  totalAumFeeCollectedInBPT_gt: bal_BigDecimal
  totalAumFeeCollectedInBPT_lt: bal_BigDecimal
  totalAumFeeCollectedInBPT_gte: bal_BigDecimal
  totalAumFeeCollectedInBPT_lte: bal_BigDecimal
  totalAumFeeCollectedInBPT_in: [bal_BigDecimal!]
  totalAumFeeCollectedInBPT_not_in: [bal_BigDecimal!]
  circuitBreakers_: bal_CircuitBreaker_filter
  mainIndex: Int
  mainIndex_not: Int
  mainIndex_gt: Int
  mainIndex_lt: Int
  mainIndex_gte: Int
  mainIndex_lte: Int
  mainIndex_in: [Int!]
  mainIndex_not_in: [Int!]
  wrappedIndex: Int
  wrappedIndex_not: Int
  wrappedIndex_gt: Int
  wrappedIndex_lt: Int
  wrappedIndex_gte: Int
  wrappedIndex_lte: Int
  wrappedIndex_in: [Int!]
  wrappedIndex_not_in: [Int!]
  lowerTarget: bal_BigDecimal
  lowerTarget_not: bal_BigDecimal
  lowerTarget_gt: bal_BigDecimal
  lowerTarget_lt: bal_BigDecimal
  lowerTarget_gte: bal_BigDecimal
  lowerTarget_lte: bal_BigDecimal
  lowerTarget_in: [bal_BigDecimal!]
  lowerTarget_not_in: [bal_BigDecimal!]
  upperTarget: bal_BigDecimal
  upperTarget_not: bal_BigDecimal
  upperTarget_gt: bal_BigDecimal
  upperTarget_lt: bal_BigDecimal
  upperTarget_gte: bal_BigDecimal
  upperTarget_lte: bal_BigDecimal
  upperTarget_in: [bal_BigDecimal!]
  upperTarget_not_in: [bal_BigDecimal!]
  sqrtAlpha: bal_BigDecimal
  sqrtAlpha_not: bal_BigDecimal
  sqrtAlpha_gt: bal_BigDecimal
  sqrtAlpha_lt: bal_BigDecimal
  sqrtAlpha_gte: bal_BigDecimal
  sqrtAlpha_lte: bal_BigDecimal
  sqrtAlpha_in: [bal_BigDecimal!]
  sqrtAlpha_not_in: [bal_BigDecimal!]
  sqrtBeta: bal_BigDecimal
  sqrtBeta_not: bal_BigDecimal
  sqrtBeta_gt: bal_BigDecimal
  sqrtBeta_lt: bal_BigDecimal
  sqrtBeta_gte: bal_BigDecimal
  sqrtBeta_lte: bal_BigDecimal
  sqrtBeta_in: [bal_BigDecimal!]
  sqrtBeta_not_in: [bal_BigDecimal!]
  root3Alpha: bal_BigDecimal
  root3Alpha_not: bal_BigDecimal
  root3Alpha_gt: bal_BigDecimal
  root3Alpha_lt: bal_BigDecimal
  root3Alpha_gte: bal_BigDecimal
  root3Alpha_lte: bal_BigDecimal
  root3Alpha_in: [bal_BigDecimal!]
  root3Alpha_not_in: [bal_BigDecimal!]
  c: bal_BigDecimal
  c_not: bal_BigDecimal
  c_gt: bal_BigDecimal
  c_lt: bal_BigDecimal
  c_gte: bal_BigDecimal
  c_lte: bal_BigDecimal
  c_in: [bal_BigDecimal!]
  c_not_in: [bal_BigDecimal!]
  s: bal_BigDecimal
  s_not: bal_BigDecimal
  s_gt: bal_BigDecimal
  s_lt: bal_BigDecimal
  s_gte: bal_BigDecimal
  s_lte: bal_BigDecimal
  s_in: [bal_BigDecimal!]
  s_not_in: [bal_BigDecimal!]
  tauAlphaX: bal_BigDecimal
  tauAlphaX_not: bal_BigDecimal
  tauAlphaX_gt: bal_BigDecimal
  tauAlphaX_lt: bal_BigDecimal
  tauAlphaX_gte: bal_BigDecimal
  tauAlphaX_lte: bal_BigDecimal
  tauAlphaX_in: [bal_BigDecimal!]
  tauAlphaX_not_in: [bal_BigDecimal!]
  tauAlphaY: bal_BigDecimal
  tauAlphaY_not: bal_BigDecimal
  tauAlphaY_gt: bal_BigDecimal
  tauAlphaY_lt: bal_BigDecimal
  tauAlphaY_gte: bal_BigDecimal
  tauAlphaY_lte: bal_BigDecimal
  tauAlphaY_in: [bal_BigDecimal!]
  tauAlphaY_not_in: [bal_BigDecimal!]
  tauBetaX: bal_BigDecimal
  tauBetaX_not: bal_BigDecimal
  tauBetaX_gt: bal_BigDecimal
  tauBetaX_lt: bal_BigDecimal
  tauBetaX_gte: bal_BigDecimal
  tauBetaX_lte: bal_BigDecimal
  tauBetaX_in: [bal_BigDecimal!]
  tauBetaX_not_in: [bal_BigDecimal!]
  tauBetaY: bal_BigDecimal
  tauBetaY_not: bal_BigDecimal
  tauBetaY_gt: bal_BigDecimal
  tauBetaY_lt: bal_BigDecimal
  tauBetaY_gte: bal_BigDecimal
  tauBetaY_lte: bal_BigDecimal
  tauBetaY_in: [bal_BigDecimal!]
  tauBetaY_not_in: [bal_BigDecimal!]
  u: bal_BigDecimal
  u_not: bal_BigDecimal
  u_gt: bal_BigDecimal
  u_lt: bal_BigDecimal
  u_gte: bal_BigDecimal
  u_lte: bal_BigDecimal
  u_in: [bal_BigDecimal!]
  u_not_in: [bal_BigDecimal!]
  v: bal_BigDecimal
  v_not: bal_BigDecimal
  v_gt: bal_BigDecimal
  v_lt: bal_BigDecimal
  v_gte: bal_BigDecimal
  v_lte: bal_BigDecimal
  v_in: [bal_BigDecimal!]
  v_not_in: [bal_BigDecimal!]
  w: bal_BigDecimal
  w_not: bal_BigDecimal
  w_gt: bal_BigDecimal
  w_lt: bal_BigDecimal
  w_gte: bal_BigDecimal
  w_lte: bal_BigDecimal
  w_in: [bal_BigDecimal!]
  w_not_in: [bal_BigDecimal!]
  z: bal_BigDecimal
  z_not: bal_BigDecimal
  z_gt: bal_BigDecimal
  z_lt: bal_BigDecimal
  z_gte: bal_BigDecimal
  z_lte: bal_BigDecimal
  z_in: [bal_BigDecimal!]
  z_not_in: [bal_BigDecimal!]
  dSq: bal_BigDecimal
  dSq_not: bal_BigDecimal
  dSq_gt: bal_BigDecimal
  dSq_lt: bal_BigDecimal
  dSq_gte: bal_BigDecimal
  dSq_lte: bal_BigDecimal
  dSq_in: [bal_BigDecimal!]
  dSq_not_in: [bal_BigDecimal!]
  alpha: bal_BigDecimal
  alpha_not: bal_BigDecimal
  alpha_gt: bal_BigDecimal
  alpha_lt: bal_BigDecimal
  alpha_gte: bal_BigDecimal
  alpha_lte: bal_BigDecimal
  alpha_in: [bal_BigDecimal!]
  alpha_not_in: [bal_BigDecimal!]
  beta: bal_BigDecimal
  beta_not: bal_BigDecimal
  beta_gt: bal_BigDecimal
  beta_lt: bal_BigDecimal
  beta_gte: bal_BigDecimal
  beta_lte: bal_BigDecimal
  beta_in: [bal_BigDecimal!]
  beta_not_in: [bal_BigDecimal!]
  lambda: bal_BigDecimal
  lambda_not: bal_BigDecimal
  lambda_gt: bal_BigDecimal
  lambda_lt: bal_BigDecimal
  lambda_gte: bal_BigDecimal
  lambda_lte: bal_BigDecimal
  lambda_in: [bal_BigDecimal!]
  lambda_not_in: [bal_BigDecimal!]
  delta: bal_BigDecimal
  delta_not: bal_BigDecimal
  delta_gt: bal_BigDecimal
  delta_lt: bal_BigDecimal
  delta_gte: bal_BigDecimal
  delta_lte: bal_BigDecimal
  delta_in: [bal_BigDecimal!]
  delta_not_in: [bal_BigDecimal!]
  epsilon: bal_BigDecimal
  epsilon_not: bal_BigDecimal
  epsilon_gt: bal_BigDecimal
  epsilon_lt: bal_BigDecimal
  epsilon_gte: bal_BigDecimal
  epsilon_lte: bal_BigDecimal
  epsilon_in: [bal_BigDecimal!]
  epsilon_not_in: [bal_BigDecimal!]
  isInRecoveryMode: Boolean
  isInRecoveryMode_not: Boolean
  isInRecoveryMode_in: [Boolean!]
  isInRecoveryMode_not_in: [Boolean!]
  protocolSwapFeeCache: bal_BigDecimal
  protocolSwapFeeCache_not: bal_BigDecimal
  protocolSwapFeeCache_gt: bal_BigDecimal
  protocolSwapFeeCache_lt: bal_BigDecimal
  protocolSwapFeeCache_gte: bal_BigDecimal
  protocolSwapFeeCache_lte: bal_BigDecimal
  protocolSwapFeeCache_in: [bal_BigDecimal!]
  protocolSwapFeeCache_not_in: [bal_BigDecimal!]
  protocolYieldFeeCache: bal_BigDecimal
  protocolYieldFeeCache_not: bal_BigDecimal
  protocolYieldFeeCache_gt: bal_BigDecimal
  protocolYieldFeeCache_lt: bal_BigDecimal
  protocolYieldFeeCache_gte: bal_BigDecimal
  protocolYieldFeeCache_lte: bal_BigDecimal
  protocolYieldFeeCache_in: [bal_BigDecimal!]
  protocolYieldFeeCache_not_in: [bal_BigDecimal!]
  protocolAumFeeCache: bal_BigDecimal
  protocolAumFeeCache_not: bal_BigDecimal
  protocolAumFeeCache_gt: bal_BigDecimal
  protocolAumFeeCache_lt: bal_BigDecimal
  protocolAumFeeCache_gte: bal_BigDecimal
  protocolAumFeeCache_lte: bal_BigDecimal
  protocolAumFeeCache_in: [bal_BigDecimal!]
  protocolAumFeeCache_not_in: [bal_BigDecimal!]
  totalProtocolFeePaidInBPT: bal_BigDecimal
  totalProtocolFeePaidInBPT_not: bal_BigDecimal
  totalProtocolFeePaidInBPT_gt: bal_BigDecimal
  totalProtocolFeePaidInBPT_lt: bal_BigDecimal
  totalProtocolFeePaidInBPT_gte: bal_BigDecimal
  totalProtocolFeePaidInBPT_lte: bal_BigDecimal
  totalProtocolFeePaidInBPT_in: [bal_BigDecimal!]
  totalProtocolFeePaidInBPT_not_in: [bal_BigDecimal!]
  lastJoinExitAmp: BigInt
  lastJoinExitAmp_not: BigInt
  lastJoinExitAmp_gt: BigInt
  lastJoinExitAmp_lt: BigInt
  lastJoinExitAmp_gte: BigInt
  lastJoinExitAmp_lte: BigInt
  lastJoinExitAmp_in: [BigInt!]
  lastJoinExitAmp_not_in: [BigInt!]
  lastPostJoinExitInvariant: bal_BigDecimal
  lastPostJoinExitInvariant_not: bal_BigDecimal
  lastPostJoinExitInvariant_gt: bal_BigDecimal
  lastPostJoinExitInvariant_lt: bal_BigDecimal
  lastPostJoinExitInvariant_gte: bal_BigDecimal
  lastPostJoinExitInvariant_lte: bal_BigDecimal
  lastPostJoinExitInvariant_in: [bal_BigDecimal!]
  lastPostJoinExitInvariant_not_in: [bal_BigDecimal!]
  protocolId: Int
  protocolId_not: Int
  protocolId_gt: Int
  protocolId_lt: Int
  protocolId_gte: Int
  protocolId_lte: Int
  protocolId_in: [Int!]
  protocolId_not_in: [Int!]
  protocolIdData: String
  protocolIdData_not: String
  protocolIdData_gt: String
  protocolIdData_lt: String
  protocolIdData_gte: String
  protocolIdData_lte: String
  protocolIdData_in: [String!]
  protocolIdData_not_in: [String!]
  protocolIdData_contains: String
  protocolIdData_contains_nocase: String
  protocolIdData_not_contains: String
  protocolIdData_not_contains_nocase: String
  protocolIdData_starts_with: String
  protocolIdData_starts_with_nocase: String
  protocolIdData_not_starts_with: String
  protocolIdData_not_starts_with_nocase: String
  protocolIdData_ends_with: String
  protocolIdData_ends_with_nocase: String
  protocolIdData_not_ends_with: String
  protocolIdData_not_ends_with_nocase: String
  protocolIdData_: bal_ProtocolIdData_filter
  """Filter for the block changed event."""
  _change_block: bal_BlockChangedFilter
  and: [bal_Pool_filter]
  or: [bal_Pool_filter]
}

enum bal_Pool_orderBy {
  id
  address
  poolType
  poolTypeVersion
  factory
  strategyType
  oracleEnabled
  symbol
  name
  swapEnabled
  swapEnabledInternal
  swapEnabledCurationSignal
  swapFee
  owner
  isPaused
  totalWeight
  totalSwapVolume
  totalSwapFee
  totalLiquidity
  totalLiquiditySansBPT
  totalShares
  totalProtocolFee
  createTime
  swapsCount
  holdersCount
  vaultID
  vaultID__id
  vaultID__poolCount
  vaultID__totalLiquidity
  vaultID__totalSwapCount
  vaultID__totalSwapVolume
  vaultID__totalSwapFee
  vaultID__totalProtocolFee
  vaultID__protocolFeesCollector
  tx
  tokensList
  tokens
  joinsExits
  swaps
  shares
  snapshots
  historicalValues
  weightUpdates
  amp
  latestAmpUpdate
  latestAmpUpdate__id
  latestAmpUpdate__scheduledTimestamp
  latestAmpUpdate__startTimestamp
  latestAmpUpdate__endTimestamp
  latestAmpUpdate__startAmp
  latestAmpUpdate__endAmp
  ampUpdates
  priceRateProviders
  principalToken
  baseToken
  expiryTime
  unitSeconds
  managementFee
  joinExitEnabled
  mustAllowlistLPs
  managementAumFee
  totalAumFeeCollectedInBPT
  circuitBreakers
  mainIndex
  wrappedIndex
  lowerTarget
  upperTarget
  sqrtAlpha
  sqrtBeta
  root3Alpha
  c
  s
  tauAlphaX
  tauAlphaY
  tauBetaX
  tauBetaY
  u
  v
  w
  z
  dSq
  alpha
  beta
  lambda
  delta
  epsilon
  isInRecoveryMode
  protocolSwapFeeCache
  protocolYieldFeeCache
  protocolAumFeeCache
  totalProtocolFeePaidInBPT
  lastJoinExitAmp
  lastPostJoinExitInvariant
  protocolId
  protocolIdData
  protocolIdData__id
  protocolIdData__name
}

type bal_PriceRateProvider {
  id: ID!
  poolId: bal_Pool!
  token: bal_PoolToken!
  address: bal_Bytes!
  rate: bal_BigDecimal
  lastCached: Int
  cacheDuration: Int
  cacheExpiry: Int
}

input bal_PriceRateProvider_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  poolId: String
  poolId_not: String
  poolId_gt: String
  poolId_lt: String
  poolId_gte: String
  poolId_lte: String
  poolId_in: [String!]
  poolId_not_in: [String!]
  poolId_contains: String
  poolId_contains_nocase: String
  poolId_not_contains: String
  poolId_not_contains_nocase: String
  poolId_starts_with: String
  poolId_starts_with_nocase: String
  poolId_not_starts_with: String
  poolId_not_starts_with_nocase: String
  poolId_ends_with: String
  poolId_ends_with_nocase: String
  poolId_not_ends_with: String
  poolId_not_ends_with_nocase: String
  poolId_: bal_Pool_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: bal_PoolToken_filter
  address: bal_Bytes
  address_not: bal_Bytes
  address_gt: bal_Bytes
  address_lt: bal_Bytes
  address_gte: bal_Bytes
  address_lte: bal_Bytes
  address_in: [bal_Bytes!]
  address_not_in: [bal_Bytes!]
  address_contains: bal_Bytes
  address_not_contains: bal_Bytes
  rate: bal_BigDecimal
  rate_not: bal_BigDecimal
  rate_gt: bal_BigDecimal
  rate_lt: bal_BigDecimal
  rate_gte: bal_BigDecimal
  rate_lte: bal_BigDecimal
  rate_in: [bal_BigDecimal!]
  rate_not_in: [bal_BigDecimal!]
  lastCached: Int
  lastCached_not: Int
  lastCached_gt: Int
  lastCached_lt: Int
  lastCached_gte: Int
  lastCached_lte: Int
  lastCached_in: [Int!]
  lastCached_not_in: [Int!]
  cacheDuration: Int
  cacheDuration_not: Int
  cacheDuration_gt: Int
  cacheDuration_lt: Int
  cacheDuration_gte: Int
  cacheDuration_lte: Int
  cacheDuration_in: [Int!]
  cacheDuration_not_in: [Int!]
  cacheExpiry: Int
  cacheExpiry_not: Int
  cacheExpiry_gt: Int
  cacheExpiry_lt: Int
  cacheExpiry_gte: Int
  cacheExpiry_lte: Int
  cacheExpiry_in: [Int!]
  cacheExpiry_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: bal_BlockChangedFilter
  and: [bal_PriceRateProvider_filter]
  or: [bal_PriceRateProvider_filter]
}

enum bal_PriceRateProvider_orderBy {
  id
  poolId
  poolId__id
  poolId__address
  poolId__poolType
  poolId__poolTypeVersion
  poolId__factory
  poolId__strategyType
  poolId__oracleEnabled
  poolId__symbol
  poolId__name
  poolId__swapEnabled
  poolId__swapEnabledInternal
  poolId__swapEnabledCurationSignal
  poolId__swapFee
  poolId__owner
  poolId__isPaused
  poolId__totalWeight
  poolId__totalSwapVolume
  poolId__totalSwapFee
  poolId__totalLiquidity
  poolId__totalLiquiditySansBPT
  poolId__totalShares
  poolId__totalProtocolFee
  poolId__createTime
  poolId__swapsCount
  poolId__holdersCount
  poolId__tx
  poolId__amp
  poolId__principalToken
  poolId__baseToken
  poolId__expiryTime
  poolId__unitSeconds
  poolId__managementFee
  poolId__joinExitEnabled
  poolId__mustAllowlistLPs
  poolId__managementAumFee
  poolId__totalAumFeeCollectedInBPT
  poolId__mainIndex
  poolId__wrappedIndex
  poolId__lowerTarget
  poolId__upperTarget
  poolId__sqrtAlpha
  poolId__sqrtBeta
  poolId__root3Alpha
  poolId__c
  poolId__s
  poolId__tauAlphaX
  poolId__tauAlphaY
  poolId__tauBetaX
  poolId__tauBetaY
  poolId__u
  poolId__v
  poolId__w
  poolId__z
  poolId__dSq
  poolId__alpha
  poolId__beta
  poolId__lambda
  poolId__delta
  poolId__epsilon
  poolId__isInRecoveryMode
  poolId__protocolSwapFeeCache
  poolId__protocolYieldFeeCache
  poolId__protocolAumFeeCache
  poolId__totalProtocolFeePaidInBPT
  poolId__lastJoinExitAmp
  poolId__lastPostJoinExitInvariant
  poolId__protocolId
  token
  token__id
  token__assetManager
  token__symbol
  token__name
  token__decimals
  token__index
  token__address
  token__oldPriceRate
  token__priceRate
  token__balance
  token__paidProtocolFees
  token__cashBalance
  token__managedBalance
  token__weight
  token__isExemptFromYieldProtocolFee
  address
  rate
  lastCached
  cacheDuration
  cacheExpiry
}

type bal_ProtocolIdData {
  id: ID!
  name: String!
}

input bal_ProtocolIdData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: bal_BlockChangedFilter
  and: [bal_ProtocolIdData_filter]
  or: [bal_ProtocolIdData_filter]
}

enum bal_ProtocolIdData_orderBy {
  id
  name
}

type bal_Swap {
  id: ID!
  caller: bal_Bytes!
  tokenIn: bal_Bytes!
  tokenInSym: String!
  tokenOut: bal_Bytes!
  tokenOutSym: String!
  tokenAmountIn: bal_BigDecimal!
  tokenAmountOut: bal_BigDecimal!
  valueUSD: bal_BigDecimal!
  poolId: bal_Pool!
  userAddress: bal_User!
  timestamp: Int!
  block: BigInt
  tx: bal_Bytes!
}

type bal_SwapFeeUpdate {
  id: ID!
  pool: bal_Pool!
  scheduledTimestamp: Int!
  startTimestamp: BigInt!
  endTimestamp: BigInt!
  startSwapFeePercentage: bal_BigDecimal!
  endSwapFeePercentage: bal_BigDecimal!
}

input bal_SwapFeeUpdate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: bal_Pool_filter
  scheduledTimestamp: Int
  scheduledTimestamp_not: Int
  scheduledTimestamp_gt: Int
  scheduledTimestamp_lt: Int
  scheduledTimestamp_gte: Int
  scheduledTimestamp_lte: Int
  scheduledTimestamp_in: [Int!]
  scheduledTimestamp_not_in: [Int!]
  startTimestamp: BigInt
  startTimestamp_not: BigInt
  startTimestamp_gt: BigInt
  startTimestamp_lt: BigInt
  startTimestamp_gte: BigInt
  startTimestamp_lte: BigInt
  startTimestamp_in: [BigInt!]
  startTimestamp_not_in: [BigInt!]
  endTimestamp: BigInt
  endTimestamp_not: BigInt
  endTimestamp_gt: BigInt
  endTimestamp_lt: BigInt
  endTimestamp_gte: BigInt
  endTimestamp_lte: BigInt
  endTimestamp_in: [BigInt!]
  endTimestamp_not_in: [BigInt!]
  startSwapFeePercentage: bal_BigDecimal
  startSwapFeePercentage_not: bal_BigDecimal
  startSwapFeePercentage_gt: bal_BigDecimal
  startSwapFeePercentage_lt: bal_BigDecimal
  startSwapFeePercentage_gte: bal_BigDecimal
  startSwapFeePercentage_lte: bal_BigDecimal
  startSwapFeePercentage_in: [bal_BigDecimal!]
  startSwapFeePercentage_not_in: [bal_BigDecimal!]
  endSwapFeePercentage: bal_BigDecimal
  endSwapFeePercentage_not: bal_BigDecimal
  endSwapFeePercentage_gt: bal_BigDecimal
  endSwapFeePercentage_lt: bal_BigDecimal
  endSwapFeePercentage_gte: bal_BigDecimal
  endSwapFeePercentage_lte: bal_BigDecimal
  endSwapFeePercentage_in: [bal_BigDecimal!]
  endSwapFeePercentage_not_in: [bal_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: bal_BlockChangedFilter
  and: [bal_SwapFeeUpdate_filter]
  or: [bal_SwapFeeUpdate_filter]
}

enum bal_SwapFeeUpdate_orderBy {
  id
  pool
  pool__id
  pool__address
  pool__poolType
  pool__poolTypeVersion
  pool__factory
  pool__strategyType
  pool__oracleEnabled
  pool__symbol
  pool__name
  pool__swapEnabled
  pool__swapEnabledInternal
  pool__swapEnabledCurationSignal
  pool__swapFee
  pool__owner
  pool__isPaused
  pool__totalWeight
  pool__totalSwapVolume
  pool__totalSwapFee
  pool__totalLiquidity
  pool__totalLiquiditySansBPT
  pool__totalShares
  pool__totalProtocolFee
  pool__createTime
  pool__swapsCount
  pool__holdersCount
  pool__tx
  pool__amp
  pool__principalToken
  pool__baseToken
  pool__expiryTime
  pool__unitSeconds
  pool__managementFee
  pool__joinExitEnabled
  pool__mustAllowlistLPs
  pool__managementAumFee
  pool__totalAumFeeCollectedInBPT
  pool__mainIndex
  pool__wrappedIndex
  pool__lowerTarget
  pool__upperTarget
  pool__sqrtAlpha
  pool__sqrtBeta
  pool__root3Alpha
  pool__c
  pool__s
  pool__tauAlphaX
  pool__tauAlphaY
  pool__tauBetaX
  pool__tauBetaY
  pool__u
  pool__v
  pool__w
  pool__z
  pool__dSq
  pool__alpha
  pool__beta
  pool__lambda
  pool__delta
  pool__epsilon
  pool__isInRecoveryMode
  pool__protocolSwapFeeCache
  pool__protocolYieldFeeCache
  pool__protocolAumFeeCache
  pool__totalProtocolFeePaidInBPT
  pool__lastJoinExitAmp
  pool__lastPostJoinExitInvariant
  pool__protocolId
  scheduledTimestamp
  startTimestamp
  endTimestamp
  startSwapFeePercentage
  endSwapFeePercentage
}

input bal_Swap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  caller: bal_Bytes
  caller_not: bal_Bytes
  caller_gt: bal_Bytes
  caller_lt: bal_Bytes
  caller_gte: bal_Bytes
  caller_lte: bal_Bytes
  caller_in: [bal_Bytes!]
  caller_not_in: [bal_Bytes!]
  caller_contains: bal_Bytes
  caller_not_contains: bal_Bytes
  tokenIn: bal_Bytes
  tokenIn_not: bal_Bytes
  tokenIn_gt: bal_Bytes
  tokenIn_lt: bal_Bytes
  tokenIn_gte: bal_Bytes
  tokenIn_lte: bal_Bytes
  tokenIn_in: [bal_Bytes!]
  tokenIn_not_in: [bal_Bytes!]
  tokenIn_contains: bal_Bytes
  tokenIn_not_contains: bal_Bytes
  tokenInSym: String
  tokenInSym_not: String
  tokenInSym_gt: String
  tokenInSym_lt: String
  tokenInSym_gte: String
  tokenInSym_lte: String
  tokenInSym_in: [String!]
  tokenInSym_not_in: [String!]
  tokenInSym_contains: String
  tokenInSym_contains_nocase: String
  tokenInSym_not_contains: String
  tokenInSym_not_contains_nocase: String
  tokenInSym_starts_with: String
  tokenInSym_starts_with_nocase: String
  tokenInSym_not_starts_with: String
  tokenInSym_not_starts_with_nocase: String
  tokenInSym_ends_with: String
  tokenInSym_ends_with_nocase: String
  tokenInSym_not_ends_with: String
  tokenInSym_not_ends_with_nocase: String
  tokenOut: bal_Bytes
  tokenOut_not: bal_Bytes
  tokenOut_gt: bal_Bytes
  tokenOut_lt: bal_Bytes
  tokenOut_gte: bal_Bytes
  tokenOut_lte: bal_Bytes
  tokenOut_in: [bal_Bytes!]
  tokenOut_not_in: [bal_Bytes!]
  tokenOut_contains: bal_Bytes
  tokenOut_not_contains: bal_Bytes
  tokenOutSym: String
  tokenOutSym_not: String
  tokenOutSym_gt: String
  tokenOutSym_lt: String
  tokenOutSym_gte: String
  tokenOutSym_lte: String
  tokenOutSym_in: [String!]
  tokenOutSym_not_in: [String!]
  tokenOutSym_contains: String
  tokenOutSym_contains_nocase: String
  tokenOutSym_not_contains: String
  tokenOutSym_not_contains_nocase: String
  tokenOutSym_starts_with: String
  tokenOutSym_starts_with_nocase: String
  tokenOutSym_not_starts_with: String
  tokenOutSym_not_starts_with_nocase: String
  tokenOutSym_ends_with: String
  tokenOutSym_ends_with_nocase: String
  tokenOutSym_not_ends_with: String
  tokenOutSym_not_ends_with_nocase: String
  tokenAmountIn: bal_BigDecimal
  tokenAmountIn_not: bal_BigDecimal
  tokenAmountIn_gt: bal_BigDecimal
  tokenAmountIn_lt: bal_BigDecimal
  tokenAmountIn_gte: bal_BigDecimal
  tokenAmountIn_lte: bal_BigDecimal
  tokenAmountIn_in: [bal_BigDecimal!]
  tokenAmountIn_not_in: [bal_BigDecimal!]
  tokenAmountOut: bal_BigDecimal
  tokenAmountOut_not: bal_BigDecimal
  tokenAmountOut_gt: bal_BigDecimal
  tokenAmountOut_lt: bal_BigDecimal
  tokenAmountOut_gte: bal_BigDecimal
  tokenAmountOut_lte: bal_BigDecimal
  tokenAmountOut_in: [bal_BigDecimal!]
  tokenAmountOut_not_in: [bal_BigDecimal!]
  valueUSD: bal_BigDecimal
  valueUSD_not: bal_BigDecimal
  valueUSD_gt: bal_BigDecimal
  valueUSD_lt: bal_BigDecimal
  valueUSD_gte: bal_BigDecimal
  valueUSD_lte: bal_BigDecimal
  valueUSD_in: [bal_BigDecimal!]
  valueUSD_not_in: [bal_BigDecimal!]
  poolId: String
  poolId_not: String
  poolId_gt: String
  poolId_lt: String
  poolId_gte: String
  poolId_lte: String
  poolId_in: [String!]
  poolId_not_in: [String!]
  poolId_contains: String
  poolId_contains_nocase: String
  poolId_not_contains: String
  poolId_not_contains_nocase: String
  poolId_starts_with: String
  poolId_starts_with_nocase: String
  poolId_not_starts_with: String
  poolId_not_starts_with_nocase: String
  poolId_ends_with: String
  poolId_ends_with_nocase: String
  poolId_not_ends_with: String
  poolId_not_ends_with_nocase: String
  poolId_: bal_Pool_filter
  userAddress: String
  userAddress_not: String
  userAddress_gt: String
  userAddress_lt: String
  userAddress_gte: String
  userAddress_lte: String
  userAddress_in: [String!]
  userAddress_not_in: [String!]
  userAddress_contains: String
  userAddress_contains_nocase: String
  userAddress_not_contains: String
  userAddress_not_contains_nocase: String
  userAddress_starts_with: String
  userAddress_starts_with_nocase: String
  userAddress_not_starts_with: String
  userAddress_not_starts_with_nocase: String
  userAddress_ends_with: String
  userAddress_ends_with_nocase: String
  userAddress_not_ends_with: String
  userAddress_not_ends_with_nocase: String
  userAddress_: bal_User_filter
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  tx: bal_Bytes
  tx_not: bal_Bytes
  tx_gt: bal_Bytes
  tx_lt: bal_Bytes
  tx_gte: bal_Bytes
  tx_lte: bal_Bytes
  tx_in: [bal_Bytes!]
  tx_not_in: [bal_Bytes!]
  tx_contains: bal_Bytes
  tx_not_contains: bal_Bytes
  """Filter for the block changed event."""
  _change_block: bal_BlockChangedFilter
  and: [bal_Swap_filter]
  or: [bal_Swap_filter]
}

enum bal_Swap_orderBy {
  id
  caller
  tokenIn
  tokenInSym
  tokenOut
  tokenOutSym
  tokenAmountIn
  tokenAmountOut
  valueUSD
  poolId
  poolId__id
  poolId__address
  poolId__poolType
  poolId__poolTypeVersion
  poolId__factory
  poolId__strategyType
  poolId__oracleEnabled
  poolId__symbol
  poolId__name
  poolId__swapEnabled
  poolId__swapEnabledInternal
  poolId__swapEnabledCurationSignal
  poolId__swapFee
  poolId__owner
  poolId__isPaused
  poolId__totalWeight
  poolId__totalSwapVolume
  poolId__totalSwapFee
  poolId__totalLiquidity
  poolId__totalLiquiditySansBPT
  poolId__totalShares
  poolId__totalProtocolFee
  poolId__createTime
  poolId__swapsCount
  poolId__holdersCount
  poolId__tx
  poolId__amp
  poolId__principalToken
  poolId__baseToken
  poolId__expiryTime
  poolId__unitSeconds
  poolId__managementFee
  poolId__joinExitEnabled
  poolId__mustAllowlistLPs
  poolId__managementAumFee
  poolId__totalAumFeeCollectedInBPT
  poolId__mainIndex
  poolId__wrappedIndex
  poolId__lowerTarget
  poolId__upperTarget
  poolId__sqrtAlpha
  poolId__sqrtBeta
  poolId__root3Alpha
  poolId__c
  poolId__s
  poolId__tauAlphaX
  poolId__tauAlphaY
  poolId__tauBetaX
  poolId__tauBetaY
  poolId__u
  poolId__v
  poolId__w
  poolId__z
  poolId__dSq
  poolId__alpha
  poolId__beta
  poolId__lambda
  poolId__delta
  poolId__epsilon
  poolId__isInRecoveryMode
  poolId__protocolSwapFeeCache
  poolId__protocolYieldFeeCache
  poolId__protocolAumFeeCache
  poolId__totalProtocolFeePaidInBPT
  poolId__lastJoinExitAmp
  poolId__lastPostJoinExitInvariant
  poolId__protocolId
  userAddress
  userAddress__id
  timestamp
  block
  tx
}

type bal_Token {
  id: ID!
  symbol: String
  name: String
  decimals: Int!
  address: String!
  totalBalanceUSD: bal_BigDecimal!
  totalBalanceNotional: bal_BigDecimal!
  totalVolumeUSD: bal_BigDecimal!
  totalVolumeNotional: bal_BigDecimal!
  totalSwapCount: BigInt!
  latestPrice: bal_LatestPrice
  latestUSDPrice: bal_BigDecimal
  latestUSDPriceTimestamp: BigInt
  latestFXPrice: bal_BigDecimal
  pool: bal_Pool
  fxOracleDecimals: Int
}

type bal_TokenPrice {
  id: ID!
  poolId: bal_Pool!
  asset: bal_Bytes!
  amount: bal_BigDecimal!
  pricingAsset: bal_Bytes!
  price: bal_BigDecimal!
  block: BigInt!
  timestamp: Int!
}

input bal_TokenPrice_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  poolId: String
  poolId_not: String
  poolId_gt: String
  poolId_lt: String
  poolId_gte: String
  poolId_lte: String
  poolId_in: [String!]
  poolId_not_in: [String!]
  poolId_contains: String
  poolId_contains_nocase: String
  poolId_not_contains: String
  poolId_not_contains_nocase: String
  poolId_starts_with: String
  poolId_starts_with_nocase: String
  poolId_not_starts_with: String
  poolId_not_starts_with_nocase: String
  poolId_ends_with: String
  poolId_ends_with_nocase: String
  poolId_not_ends_with: String
  poolId_not_ends_with_nocase: String
  poolId_: bal_Pool_filter
  asset: bal_Bytes
  asset_not: bal_Bytes
  asset_gt: bal_Bytes
  asset_lt: bal_Bytes
  asset_gte: bal_Bytes
  asset_lte: bal_Bytes
  asset_in: [bal_Bytes!]
  asset_not_in: [bal_Bytes!]
  asset_contains: bal_Bytes
  asset_not_contains: bal_Bytes
  amount: bal_BigDecimal
  amount_not: bal_BigDecimal
  amount_gt: bal_BigDecimal
  amount_lt: bal_BigDecimal
  amount_gte: bal_BigDecimal
  amount_lte: bal_BigDecimal
  amount_in: [bal_BigDecimal!]
  amount_not_in: [bal_BigDecimal!]
  pricingAsset: bal_Bytes
  pricingAsset_not: bal_Bytes
  pricingAsset_gt: bal_Bytes
  pricingAsset_lt: bal_Bytes
  pricingAsset_gte: bal_Bytes
  pricingAsset_lte: bal_Bytes
  pricingAsset_in: [bal_Bytes!]
  pricingAsset_not_in: [bal_Bytes!]
  pricingAsset_contains: bal_Bytes
  pricingAsset_not_contains: bal_Bytes
  price: bal_BigDecimal
  price_not: bal_BigDecimal
  price_gt: bal_BigDecimal
  price_lt: bal_BigDecimal
  price_gte: bal_BigDecimal
  price_lte: bal_BigDecimal
  price_in: [bal_BigDecimal!]
  price_not_in: [bal_BigDecimal!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: bal_BlockChangedFilter
  and: [bal_TokenPrice_filter]
  or: [bal_TokenPrice_filter]
}

enum bal_TokenPrice_orderBy {
  id
  poolId
  poolId__id
  poolId__address
  poolId__poolType
  poolId__poolTypeVersion
  poolId__factory
  poolId__strategyType
  poolId__oracleEnabled
  poolId__symbol
  poolId__name
  poolId__swapEnabled
  poolId__swapEnabledInternal
  poolId__swapEnabledCurationSignal
  poolId__swapFee
  poolId__owner
  poolId__isPaused
  poolId__totalWeight
  poolId__totalSwapVolume
  poolId__totalSwapFee
  poolId__totalLiquidity
  poolId__totalLiquiditySansBPT
  poolId__totalShares
  poolId__totalProtocolFee
  poolId__createTime
  poolId__swapsCount
  poolId__holdersCount
  poolId__tx
  poolId__amp
  poolId__principalToken
  poolId__baseToken
  poolId__expiryTime
  poolId__unitSeconds
  poolId__managementFee
  poolId__joinExitEnabled
  poolId__mustAllowlistLPs
  poolId__managementAumFee
  poolId__totalAumFeeCollectedInBPT
  poolId__mainIndex
  poolId__wrappedIndex
  poolId__lowerTarget
  poolId__upperTarget
  poolId__sqrtAlpha
  poolId__sqrtBeta
  poolId__root3Alpha
  poolId__c
  poolId__s
  poolId__tauAlphaX
  poolId__tauAlphaY
  poolId__tauBetaX
  poolId__tauBetaY
  poolId__u
  poolId__v
  poolId__w
  poolId__z
  poolId__dSq
  poolId__alpha
  poolId__beta
  poolId__lambda
  poolId__delta
  poolId__epsilon
  poolId__isInRecoveryMode
  poolId__protocolSwapFeeCache
  poolId__protocolYieldFeeCache
  poolId__protocolAumFeeCache
  poolId__totalProtocolFeePaidInBPT
  poolId__lastJoinExitAmp
  poolId__lastPostJoinExitInvariant
  poolId__protocolId
  asset
  amount
  pricingAsset
  price
  block
  timestamp
}

type bal_TokenSnapshot {
  id: ID!
  token: bal_Token!
  timestamp: Int!
  totalBalanceUSD: bal_BigDecimal!
  totalBalanceNotional: bal_BigDecimal!
  totalVolumeUSD: bal_BigDecimal!
  totalVolumeNotional: bal_BigDecimal!
  totalSwapCount: BigInt!
}

input bal_TokenSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: bal_Token_filter
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  totalBalanceUSD: bal_BigDecimal
  totalBalanceUSD_not: bal_BigDecimal
  totalBalanceUSD_gt: bal_BigDecimal
  totalBalanceUSD_lt: bal_BigDecimal
  totalBalanceUSD_gte: bal_BigDecimal
  totalBalanceUSD_lte: bal_BigDecimal
  totalBalanceUSD_in: [bal_BigDecimal!]
  totalBalanceUSD_not_in: [bal_BigDecimal!]
  totalBalanceNotional: bal_BigDecimal
  totalBalanceNotional_not: bal_BigDecimal
  totalBalanceNotional_gt: bal_BigDecimal
  totalBalanceNotional_lt: bal_BigDecimal
  totalBalanceNotional_gte: bal_BigDecimal
  totalBalanceNotional_lte: bal_BigDecimal
  totalBalanceNotional_in: [bal_BigDecimal!]
  totalBalanceNotional_not_in: [bal_BigDecimal!]
  totalVolumeUSD: bal_BigDecimal
  totalVolumeUSD_not: bal_BigDecimal
  totalVolumeUSD_gt: bal_BigDecimal
  totalVolumeUSD_lt: bal_BigDecimal
  totalVolumeUSD_gte: bal_BigDecimal
  totalVolumeUSD_lte: bal_BigDecimal
  totalVolumeUSD_in: [bal_BigDecimal!]
  totalVolumeUSD_not_in: [bal_BigDecimal!]
  totalVolumeNotional: bal_BigDecimal
  totalVolumeNotional_not: bal_BigDecimal
  totalVolumeNotional_gt: bal_BigDecimal
  totalVolumeNotional_lt: bal_BigDecimal
  totalVolumeNotional_gte: bal_BigDecimal
  totalVolumeNotional_lte: bal_BigDecimal
  totalVolumeNotional_in: [bal_BigDecimal!]
  totalVolumeNotional_not_in: [bal_BigDecimal!]
  totalSwapCount: BigInt
  totalSwapCount_not: BigInt
  totalSwapCount_gt: BigInt
  totalSwapCount_lt: BigInt
  totalSwapCount_gte: BigInt
  totalSwapCount_lte: BigInt
  totalSwapCount_in: [BigInt!]
  totalSwapCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: bal_BlockChangedFilter
  and: [bal_TokenSnapshot_filter]
  or: [bal_TokenSnapshot_filter]
}

enum bal_TokenSnapshot_orderBy {
  id
  token
  token__id
  token__symbol
  token__name
  token__decimals
  token__address
  token__totalBalanceUSD
  token__totalBalanceNotional
  token__totalVolumeUSD
  token__totalVolumeNotional
  token__totalSwapCount
  token__latestUSDPrice
  token__latestUSDPriceTimestamp
  token__latestFXPrice
  token__fxOracleDecimals
  timestamp
  totalBalanceUSD
  totalBalanceNotional
  totalVolumeUSD
  totalVolumeNotional
  totalSwapCount
}

input bal_Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  address: String
  address_not: String
  address_gt: String
  address_lt: String
  address_gte: String
  address_lte: String
  address_in: [String!]
  address_not_in: [String!]
  address_contains: String
  address_contains_nocase: String
  address_not_contains: String
  address_not_contains_nocase: String
  address_starts_with: String
  address_starts_with_nocase: String
  address_not_starts_with: String
  address_not_starts_with_nocase: String
  address_ends_with: String
  address_ends_with_nocase: String
  address_not_ends_with: String
  address_not_ends_with_nocase: String
  totalBalanceUSD: bal_BigDecimal
  totalBalanceUSD_not: bal_BigDecimal
  totalBalanceUSD_gt: bal_BigDecimal
  totalBalanceUSD_lt: bal_BigDecimal
  totalBalanceUSD_gte: bal_BigDecimal
  totalBalanceUSD_lte: bal_BigDecimal
  totalBalanceUSD_in: [bal_BigDecimal!]
  totalBalanceUSD_not_in: [bal_BigDecimal!]
  totalBalanceNotional: bal_BigDecimal
  totalBalanceNotional_not: bal_BigDecimal
  totalBalanceNotional_gt: bal_BigDecimal
  totalBalanceNotional_lt: bal_BigDecimal
  totalBalanceNotional_gte: bal_BigDecimal
  totalBalanceNotional_lte: bal_BigDecimal
  totalBalanceNotional_in: [bal_BigDecimal!]
  totalBalanceNotional_not_in: [bal_BigDecimal!]
  totalVolumeUSD: bal_BigDecimal
  totalVolumeUSD_not: bal_BigDecimal
  totalVolumeUSD_gt: bal_BigDecimal
  totalVolumeUSD_lt: bal_BigDecimal
  totalVolumeUSD_gte: bal_BigDecimal
  totalVolumeUSD_lte: bal_BigDecimal
  totalVolumeUSD_in: [bal_BigDecimal!]
  totalVolumeUSD_not_in: [bal_BigDecimal!]
  totalVolumeNotional: bal_BigDecimal
  totalVolumeNotional_not: bal_BigDecimal
  totalVolumeNotional_gt: bal_BigDecimal
  totalVolumeNotional_lt: bal_BigDecimal
  totalVolumeNotional_gte: bal_BigDecimal
  totalVolumeNotional_lte: bal_BigDecimal
  totalVolumeNotional_in: [bal_BigDecimal!]
  totalVolumeNotional_not_in: [bal_BigDecimal!]
  totalSwapCount: BigInt
  totalSwapCount_not: BigInt
  totalSwapCount_gt: BigInt
  totalSwapCount_lt: BigInt
  totalSwapCount_gte: BigInt
  totalSwapCount_lte: BigInt
  totalSwapCount_in: [BigInt!]
  totalSwapCount_not_in: [BigInt!]
  latestPrice: String
  latestPrice_not: String
  latestPrice_gt: String
  latestPrice_lt: String
  latestPrice_gte: String
  latestPrice_lte: String
  latestPrice_in: [String!]
  latestPrice_not_in: [String!]
  latestPrice_contains: String
  latestPrice_contains_nocase: String
  latestPrice_not_contains: String
  latestPrice_not_contains_nocase: String
  latestPrice_starts_with: String
  latestPrice_starts_with_nocase: String
  latestPrice_not_starts_with: String
  latestPrice_not_starts_with_nocase: String
  latestPrice_ends_with: String
  latestPrice_ends_with_nocase: String
  latestPrice_not_ends_with: String
  latestPrice_not_ends_with_nocase: String
  latestPrice_: bal_LatestPrice_filter
  latestUSDPrice: bal_BigDecimal
  latestUSDPrice_not: bal_BigDecimal
  latestUSDPrice_gt: bal_BigDecimal
  latestUSDPrice_lt: bal_BigDecimal
  latestUSDPrice_gte: bal_BigDecimal
  latestUSDPrice_lte: bal_BigDecimal
  latestUSDPrice_in: [bal_BigDecimal!]
  latestUSDPrice_not_in: [bal_BigDecimal!]
  latestUSDPriceTimestamp: BigInt
  latestUSDPriceTimestamp_not: BigInt
  latestUSDPriceTimestamp_gt: BigInt
  latestUSDPriceTimestamp_lt: BigInt
  latestUSDPriceTimestamp_gte: BigInt
  latestUSDPriceTimestamp_lte: BigInt
  latestUSDPriceTimestamp_in: [BigInt!]
  latestUSDPriceTimestamp_not_in: [BigInt!]
  latestFXPrice: bal_BigDecimal
  latestFXPrice_not: bal_BigDecimal
  latestFXPrice_gt: bal_BigDecimal
  latestFXPrice_lt: bal_BigDecimal
  latestFXPrice_gte: bal_BigDecimal
  latestFXPrice_lte: bal_BigDecimal
  latestFXPrice_in: [bal_BigDecimal!]
  latestFXPrice_not_in: [bal_BigDecimal!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: bal_Pool_filter
  fxOracleDecimals: Int
  fxOracleDecimals_not: Int
  fxOracleDecimals_gt: Int
  fxOracleDecimals_lt: Int
  fxOracleDecimals_gte: Int
  fxOracleDecimals_lte: Int
  fxOracleDecimals_in: [Int!]
  fxOracleDecimals_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: bal_BlockChangedFilter
  and: [bal_Token_filter]
  or: [bal_Token_filter]
}

enum bal_Token_orderBy {
  id
  symbol
  name
  decimals
  address
  totalBalanceUSD
  totalBalanceNotional
  totalVolumeUSD
  totalVolumeNotional
  totalSwapCount
  latestPrice
  latestPrice__id
  latestPrice__asset
  latestPrice__pricingAsset
  latestPrice__price
  latestPrice__block
  latestUSDPrice
  latestUSDPriceTimestamp
  latestFXPrice
  pool
  pool__id
  pool__address
  pool__poolType
  pool__poolTypeVersion
  pool__factory
  pool__strategyType
  pool__oracleEnabled
  pool__symbol
  pool__name
  pool__swapEnabled
  pool__swapEnabledInternal
  pool__swapEnabledCurationSignal
  pool__swapFee
  pool__owner
  pool__isPaused
  pool__totalWeight
  pool__totalSwapVolume
  pool__totalSwapFee
  pool__totalLiquidity
  pool__totalLiquiditySansBPT
  pool__totalShares
  pool__totalProtocolFee
  pool__createTime
  pool__swapsCount
  pool__holdersCount
  pool__tx
  pool__amp
  pool__principalToken
  pool__baseToken
  pool__expiryTime
  pool__unitSeconds
  pool__managementFee
  pool__joinExitEnabled
  pool__mustAllowlistLPs
  pool__managementAumFee
  pool__totalAumFeeCollectedInBPT
  pool__mainIndex
  pool__wrappedIndex
  pool__lowerTarget
  pool__upperTarget
  pool__sqrtAlpha
  pool__sqrtBeta
  pool__root3Alpha
  pool__c
  pool__s
  pool__tauAlphaX
  pool__tauAlphaY
  pool__tauBetaX
  pool__tauBetaY
  pool__u
  pool__v
  pool__w
  pool__z
  pool__dSq
  pool__alpha
  pool__beta
  pool__lambda
  pool__delta
  pool__epsilon
  pool__isInRecoveryMode
  pool__protocolSwapFeeCache
  pool__protocolYieldFeeCache
  pool__protocolAumFeeCache
  pool__totalProtocolFeePaidInBPT
  pool__lastJoinExitAmp
  pool__lastPostJoinExitInvariant
  pool__protocolId
  fxOracleDecimals
}

type bal_TradePair {
  """Token Address - Token Address"""
  id: ID!
  token0: bal_Token!
  token1: bal_Token!
  totalSwapVolume: bal_BigDecimal!
  totalSwapFee: bal_BigDecimal!
}

type bal_TradePairSnapshot {
  id: ID!
  pair: bal_TradePair!
  timestamp: Int!
  totalSwapVolume: bal_BigDecimal!
  totalSwapFee: bal_BigDecimal!
}

input bal_TradePairSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  pair_: bal_TradePair_filter
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  totalSwapVolume: bal_BigDecimal
  totalSwapVolume_not: bal_BigDecimal
  totalSwapVolume_gt: bal_BigDecimal
  totalSwapVolume_lt: bal_BigDecimal
  totalSwapVolume_gte: bal_BigDecimal
  totalSwapVolume_lte: bal_BigDecimal
  totalSwapVolume_in: [bal_BigDecimal!]
  totalSwapVolume_not_in: [bal_BigDecimal!]
  totalSwapFee: bal_BigDecimal
  totalSwapFee_not: bal_BigDecimal
  totalSwapFee_gt: bal_BigDecimal
  totalSwapFee_lt: bal_BigDecimal
  totalSwapFee_gte: bal_BigDecimal
  totalSwapFee_lte: bal_BigDecimal
  totalSwapFee_in: [bal_BigDecimal!]
  totalSwapFee_not_in: [bal_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: bal_BlockChangedFilter
  and: [bal_TradePairSnapshot_filter]
  or: [bal_TradePairSnapshot_filter]
}

enum bal_TradePairSnapshot_orderBy {
  id
  pair
  pair__id
  pair__totalSwapVolume
  pair__totalSwapFee
  timestamp
  totalSwapVolume
  totalSwapFee
}

input bal_TradePair_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: bal_Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: bal_Token_filter
  totalSwapVolume: bal_BigDecimal
  totalSwapVolume_not: bal_BigDecimal
  totalSwapVolume_gt: bal_BigDecimal
  totalSwapVolume_lt: bal_BigDecimal
  totalSwapVolume_gte: bal_BigDecimal
  totalSwapVolume_lte: bal_BigDecimal
  totalSwapVolume_in: [bal_BigDecimal!]
  totalSwapVolume_not_in: [bal_BigDecimal!]
  totalSwapFee: bal_BigDecimal
  totalSwapFee_not: bal_BigDecimal
  totalSwapFee_gt: bal_BigDecimal
  totalSwapFee_lt: bal_BigDecimal
  totalSwapFee_gte: bal_BigDecimal
  totalSwapFee_lte: bal_BigDecimal
  totalSwapFee_in: [bal_BigDecimal!]
  totalSwapFee_not_in: [bal_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: bal_BlockChangedFilter
  and: [bal_TradePair_filter]
  or: [bal_TradePair_filter]
}

enum bal_TradePair_orderBy {
  id
  token0
  token0__id
  token0__symbol
  token0__name
  token0__decimals
  token0__address
  token0__totalBalanceUSD
  token0__totalBalanceNotional
  token0__totalVolumeUSD
  token0__totalVolumeNotional
  token0__totalSwapCount
  token0__latestUSDPrice
  token0__latestUSDPriceTimestamp
  token0__latestFXPrice
  token0__fxOracleDecimals
  token1
  token1__id
  token1__symbol
  token1__name
  token1__decimals
  token1__address
  token1__totalBalanceUSD
  token1__totalBalanceNotional
  token1__totalVolumeUSD
  token1__totalVolumeNotional
  token1__totalSwapCount
  token1__latestUSDPrice
  token1__latestUSDPriceTimestamp
  token1__latestFXPrice
  token1__fxOracleDecimals
  totalSwapVolume
  totalSwapFee
}

type bal_User {
  id: ID!
  sharesOwned(skip: Int = 0, first: Int = 100, orderBy: bal_PoolShare_orderBy, orderDirection: bal_OrderDirection, where: bal_PoolShare_filter): [bal_PoolShare!]
  swaps(skip: Int = 0, first: Int = 100, orderBy: bal_Swap_orderBy, orderDirection: bal_OrderDirection, where: bal_Swap_filter): [bal_Swap!]
  userInternalBalances(skip: Int = 0, first: Int = 100, orderBy: bal_UserInternalBalance_orderBy, orderDirection: bal_OrderDirection, where: bal_UserInternalBalance_filter): [bal_UserInternalBalance!]
}

type bal_UserInternalBalance {
  id: ID!
  userAddress: bal_User
  token: bal_Bytes!
  tokenInfo: bal_Token
  balance: bal_BigDecimal!
}

input bal_UserInternalBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  userAddress: String
  userAddress_not: String
  userAddress_gt: String
  userAddress_lt: String
  userAddress_gte: String
  userAddress_lte: String
  userAddress_in: [String!]
  userAddress_not_in: [String!]
  userAddress_contains: String
  userAddress_contains_nocase: String
  userAddress_not_contains: String
  userAddress_not_contains_nocase: String
  userAddress_starts_with: String
  userAddress_starts_with_nocase: String
  userAddress_not_starts_with: String
  userAddress_not_starts_with_nocase: String
  userAddress_ends_with: String
  userAddress_ends_with_nocase: String
  userAddress_not_ends_with: String
  userAddress_not_ends_with_nocase: String
  userAddress_: bal_User_filter
  token: bal_Bytes
  token_not: bal_Bytes
  token_gt: bal_Bytes
  token_lt: bal_Bytes
  token_gte: bal_Bytes
  token_lte: bal_Bytes
  token_in: [bal_Bytes!]
  token_not_in: [bal_Bytes!]
  token_contains: bal_Bytes
  token_not_contains: bal_Bytes
  tokenInfo: String
  tokenInfo_not: String
  tokenInfo_gt: String
  tokenInfo_lt: String
  tokenInfo_gte: String
  tokenInfo_lte: String
  tokenInfo_in: [String!]
  tokenInfo_not_in: [String!]
  tokenInfo_contains: String
  tokenInfo_contains_nocase: String
  tokenInfo_not_contains: String
  tokenInfo_not_contains_nocase: String
  tokenInfo_starts_with: String
  tokenInfo_starts_with_nocase: String
  tokenInfo_not_starts_with: String
  tokenInfo_not_starts_with_nocase: String
  tokenInfo_ends_with: String
  tokenInfo_ends_with_nocase: String
  tokenInfo_not_ends_with: String
  tokenInfo_not_ends_with_nocase: String
  tokenInfo_: bal_Token_filter
  balance: bal_BigDecimal
  balance_not: bal_BigDecimal
  balance_gt: bal_BigDecimal
  balance_lt: bal_BigDecimal
  balance_gte: bal_BigDecimal
  balance_lte: bal_BigDecimal
  balance_in: [bal_BigDecimal!]
  balance_not_in: [bal_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: bal_BlockChangedFilter
  and: [bal_UserInternalBalance_filter]
  or: [bal_UserInternalBalance_filter]
}

enum bal_UserInternalBalance_orderBy {
  id
  userAddress
  userAddress__id
  token
  tokenInfo
  tokenInfo__id
  tokenInfo__symbol
  tokenInfo__name
  tokenInfo__decimals
  tokenInfo__address
  tokenInfo__totalBalanceUSD
  tokenInfo__totalBalanceNotional
  tokenInfo__totalVolumeUSD
  tokenInfo__totalVolumeNotional
  tokenInfo__totalSwapCount
  tokenInfo__latestUSDPrice
  tokenInfo__latestUSDPriceTimestamp
  tokenInfo__latestFXPrice
  tokenInfo__fxOracleDecimals
  balance
}

input bal_User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sharesOwned_: bal_PoolShare_filter
  swaps_: bal_Swap_filter
  userInternalBalances_: bal_UserInternalBalance_filter
  """Filter for the block changed event."""
  _change_block: bal_BlockChangedFilter
  and: [bal_User_filter]
  or: [bal_User_filter]
}

enum bal_User_orderBy {
  id
  sharesOwned
  swaps
  userInternalBalances
}

type bal__Block_ {
  """The hash of the block"""
  hash: bal_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: bal_Bytes
}

"""The type for the top-level _meta field"""
type bal__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: bal__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum bal__SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

enum uni_Aggregation_interval {
  hour
  day
}

scalar uni_BigDecimal

input uni_BlockChangedFilter {
  number_gte: Int!
}

input uni_Block_height {
  hash: uni_Bytes
  number: Int
  number_gte: Int
}

type uni_Bundle {
  id: ID!
  ethPriceUSD: uni_BigDecimal!
}

input uni_Bundle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ethPriceUSD: uni_BigDecimal
  ethPriceUSD_not: uni_BigDecimal
  ethPriceUSD_gt: uni_BigDecimal
  ethPriceUSD_lt: uni_BigDecimal
  ethPriceUSD_gte: uni_BigDecimal
  ethPriceUSD_lte: uni_BigDecimal
  ethPriceUSD_in: [uni_BigDecimal!]
  ethPriceUSD_not_in: [uni_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: uni_BlockChangedFilter
  and: [uni_Bundle_filter]
  or: [uni_Bundle_filter]
}

enum uni_Bundle_orderBy {
  id
  ethPriceUSD
}

type uni_Burn {
  id: ID!
  transaction: uni_Transaction!
  pool: uni_Pool!
  token0: uni_Token!
  token1: uni_Token!
  timestamp: BigInt!
  owner: uni_Bytes
  origin: uni_Bytes!
  amount: BigInt!
  amount0: uni_BigDecimal!
  amount1: uni_BigDecimal!
  amountUSD: uni_BigDecimal
  tickLower: BigInt!
  tickUpper: BigInt!
  logIndex: BigInt
}

input uni_Burn_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: uni_Transaction_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: uni_Pool_filter
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: uni_Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: uni_Token_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  owner: uni_Bytes
  owner_not: uni_Bytes
  owner_gt: uni_Bytes
  owner_lt: uni_Bytes
  owner_gte: uni_Bytes
  owner_lte: uni_Bytes
  owner_in: [uni_Bytes!]
  owner_not_in: [uni_Bytes!]
  owner_contains: uni_Bytes
  owner_not_contains: uni_Bytes
  origin: uni_Bytes
  origin_not: uni_Bytes
  origin_gt: uni_Bytes
  origin_lt: uni_Bytes
  origin_gte: uni_Bytes
  origin_lte: uni_Bytes
  origin_in: [uni_Bytes!]
  origin_not_in: [uni_Bytes!]
  origin_contains: uni_Bytes
  origin_not_contains: uni_Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  amount0: uni_BigDecimal
  amount0_not: uni_BigDecimal
  amount0_gt: uni_BigDecimal
  amount0_lt: uni_BigDecimal
  amount0_gte: uni_BigDecimal
  amount0_lte: uni_BigDecimal
  amount0_in: [uni_BigDecimal!]
  amount0_not_in: [uni_BigDecimal!]
  amount1: uni_BigDecimal
  amount1_not: uni_BigDecimal
  amount1_gt: uni_BigDecimal
  amount1_lt: uni_BigDecimal
  amount1_gte: uni_BigDecimal
  amount1_lte: uni_BigDecimal
  amount1_in: [uni_BigDecimal!]
  amount1_not_in: [uni_BigDecimal!]
  amountUSD: uni_BigDecimal
  amountUSD_not: uni_BigDecimal
  amountUSD_gt: uni_BigDecimal
  amountUSD_lt: uni_BigDecimal
  amountUSD_gte: uni_BigDecimal
  amountUSD_lte: uni_BigDecimal
  amountUSD_in: [uni_BigDecimal!]
  amountUSD_not_in: [uni_BigDecimal!]
  tickLower: BigInt
  tickLower_not: BigInt
  tickLower_gt: BigInt
  tickLower_lt: BigInt
  tickLower_gte: BigInt
  tickLower_lte: BigInt
  tickLower_in: [BigInt!]
  tickLower_not_in: [BigInt!]
  tickUpper: BigInt
  tickUpper_not: BigInt
  tickUpper_gt: BigInt
  tickUpper_lt: BigInt
  tickUpper_gte: BigInt
  tickUpper_lte: BigInt
  tickUpper_in: [BigInt!]
  tickUpper_not_in: [BigInt!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: uni_BlockChangedFilter
  and: [uni_Burn_filter]
  or: [uni_Burn_filter]
}

enum uni_Burn_orderBy {
  id
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  transaction__gasUsed
  transaction__gasPrice
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  token0
  token0__id
  token0__symbol
  token0__name
  token0__decimals
  token0__totalSupply
  token0__volume
  token0__volumeUSD
  token0__untrackedVolumeUSD
  token0__feesUSD
  token0__txCount
  token0__poolCount
  token0__totalValueLocked
  token0__totalValueLockedUSD
  token0__totalValueLockedUSDUntracked
  token0__derivedETH
  token1
  token1__id
  token1__symbol
  token1__name
  token1__decimals
  token1__totalSupply
  token1__volume
  token1__volumeUSD
  token1__untrackedVolumeUSD
  token1__feesUSD
  token1__txCount
  token1__poolCount
  token1__totalValueLocked
  token1__totalValueLockedUSD
  token1__totalValueLockedUSDUntracked
  token1__derivedETH
  timestamp
  owner
  origin
  amount
  amount0
  amount1
  amountUSD
  tickLower
  tickUpper
  logIndex
}

scalar uni_Bytes

type uni_Collect {
  id: ID!
  transaction: uni_Transaction!
  timestamp: BigInt!
  pool: uni_Pool!
  owner: uni_Bytes
  amount0: uni_BigDecimal!
  amount1: uni_BigDecimal!
  amountUSD: uni_BigDecimal
  tickLower: BigInt!
  tickUpper: BigInt!
  logIndex: BigInt
}

input uni_Collect_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: uni_Transaction_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: uni_Pool_filter
  owner: uni_Bytes
  owner_not: uni_Bytes
  owner_gt: uni_Bytes
  owner_lt: uni_Bytes
  owner_gte: uni_Bytes
  owner_lte: uni_Bytes
  owner_in: [uni_Bytes!]
  owner_not_in: [uni_Bytes!]
  owner_contains: uni_Bytes
  owner_not_contains: uni_Bytes
  amount0: uni_BigDecimal
  amount0_not: uni_BigDecimal
  amount0_gt: uni_BigDecimal
  amount0_lt: uni_BigDecimal
  amount0_gte: uni_BigDecimal
  amount0_lte: uni_BigDecimal
  amount0_in: [uni_BigDecimal!]
  amount0_not_in: [uni_BigDecimal!]
  amount1: uni_BigDecimal
  amount1_not: uni_BigDecimal
  amount1_gt: uni_BigDecimal
  amount1_lt: uni_BigDecimal
  amount1_gte: uni_BigDecimal
  amount1_lte: uni_BigDecimal
  amount1_in: [uni_BigDecimal!]
  amount1_not_in: [uni_BigDecimal!]
  amountUSD: uni_BigDecimal
  amountUSD_not: uni_BigDecimal
  amountUSD_gt: uni_BigDecimal
  amountUSD_lt: uni_BigDecimal
  amountUSD_gte: uni_BigDecimal
  amountUSD_lte: uni_BigDecimal
  amountUSD_in: [uni_BigDecimal!]
  amountUSD_not_in: [uni_BigDecimal!]
  tickLower: BigInt
  tickLower_not: BigInt
  tickLower_gt: BigInt
  tickLower_lt: BigInt
  tickLower_gte: BigInt
  tickLower_lte: BigInt
  tickLower_in: [BigInt!]
  tickLower_not_in: [BigInt!]
  tickUpper: BigInt
  tickUpper_not: BigInt
  tickUpper_gt: BigInt
  tickUpper_lt: BigInt
  tickUpper_gte: BigInt
  tickUpper_lte: BigInt
  tickUpper_in: [BigInt!]
  tickUpper_not_in: [BigInt!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: uni_BlockChangedFilter
  and: [uni_Collect_filter]
  or: [uni_Collect_filter]
}

enum uni_Collect_orderBy {
  id
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  transaction__gasUsed
  transaction__gasPrice
  timestamp
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  owner
  amount0
  amount1
  amountUSD
  tickLower
  tickUpper
  logIndex
}

type uni_Factory {
  id: ID!
  poolCount: BigInt!
  txCount: BigInt!
  totalVolumeUSD: uni_BigDecimal!
  totalVolumeETH: uni_BigDecimal!
  totalFeesUSD: uni_BigDecimal!
  totalFeesETH: uni_BigDecimal!
  untrackedVolumeUSD: uni_BigDecimal!
  totalValueLockedUSD: uni_BigDecimal!
  totalValueLockedETH: uni_BigDecimal!
  totalValueLockedUSDUntracked: uni_BigDecimal!
  totalValueLockedETHUntracked: uni_BigDecimal!
  owner: ID!
}

input uni_Factory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  poolCount: BigInt
  poolCount_not: BigInt
  poolCount_gt: BigInt
  poolCount_lt: BigInt
  poolCount_gte: BigInt
  poolCount_lte: BigInt
  poolCount_in: [BigInt!]
  poolCount_not_in: [BigInt!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  totalVolumeUSD: uni_BigDecimal
  totalVolumeUSD_not: uni_BigDecimal
  totalVolumeUSD_gt: uni_BigDecimal
  totalVolumeUSD_lt: uni_BigDecimal
  totalVolumeUSD_gte: uni_BigDecimal
  totalVolumeUSD_lte: uni_BigDecimal
  totalVolumeUSD_in: [uni_BigDecimal!]
  totalVolumeUSD_not_in: [uni_BigDecimal!]
  totalVolumeETH: uni_BigDecimal
  totalVolumeETH_not: uni_BigDecimal
  totalVolumeETH_gt: uni_BigDecimal
  totalVolumeETH_lt: uni_BigDecimal
  totalVolumeETH_gte: uni_BigDecimal
  totalVolumeETH_lte: uni_BigDecimal
  totalVolumeETH_in: [uni_BigDecimal!]
  totalVolumeETH_not_in: [uni_BigDecimal!]
  totalFeesUSD: uni_BigDecimal
  totalFeesUSD_not: uni_BigDecimal
  totalFeesUSD_gt: uni_BigDecimal
  totalFeesUSD_lt: uni_BigDecimal
  totalFeesUSD_gte: uni_BigDecimal
  totalFeesUSD_lte: uni_BigDecimal
  totalFeesUSD_in: [uni_BigDecimal!]
  totalFeesUSD_not_in: [uni_BigDecimal!]
  totalFeesETH: uni_BigDecimal
  totalFeesETH_not: uni_BigDecimal
  totalFeesETH_gt: uni_BigDecimal
  totalFeesETH_lt: uni_BigDecimal
  totalFeesETH_gte: uni_BigDecimal
  totalFeesETH_lte: uni_BigDecimal
  totalFeesETH_in: [uni_BigDecimal!]
  totalFeesETH_not_in: [uni_BigDecimal!]
  untrackedVolumeUSD: uni_BigDecimal
  untrackedVolumeUSD_not: uni_BigDecimal
  untrackedVolumeUSD_gt: uni_BigDecimal
  untrackedVolumeUSD_lt: uni_BigDecimal
  untrackedVolumeUSD_gte: uni_BigDecimal
  untrackedVolumeUSD_lte: uni_BigDecimal
  untrackedVolumeUSD_in: [uni_BigDecimal!]
  untrackedVolumeUSD_not_in: [uni_BigDecimal!]
  totalValueLockedUSD: uni_BigDecimal
  totalValueLockedUSD_not: uni_BigDecimal
  totalValueLockedUSD_gt: uni_BigDecimal
  totalValueLockedUSD_lt: uni_BigDecimal
  totalValueLockedUSD_gte: uni_BigDecimal
  totalValueLockedUSD_lte: uni_BigDecimal
  totalValueLockedUSD_in: [uni_BigDecimal!]
  totalValueLockedUSD_not_in: [uni_BigDecimal!]
  totalValueLockedETH: uni_BigDecimal
  totalValueLockedETH_not: uni_BigDecimal
  totalValueLockedETH_gt: uni_BigDecimal
  totalValueLockedETH_lt: uni_BigDecimal
  totalValueLockedETH_gte: uni_BigDecimal
  totalValueLockedETH_lte: uni_BigDecimal
  totalValueLockedETH_in: [uni_BigDecimal!]
  totalValueLockedETH_not_in: [uni_BigDecimal!]
  totalValueLockedUSDUntracked: uni_BigDecimal
  totalValueLockedUSDUntracked_not: uni_BigDecimal
  totalValueLockedUSDUntracked_gt: uni_BigDecimal
  totalValueLockedUSDUntracked_lt: uni_BigDecimal
  totalValueLockedUSDUntracked_gte: uni_BigDecimal
  totalValueLockedUSDUntracked_lte: uni_BigDecimal
  totalValueLockedUSDUntracked_in: [uni_BigDecimal!]
  totalValueLockedUSDUntracked_not_in: [uni_BigDecimal!]
  totalValueLockedETHUntracked: uni_BigDecimal
  totalValueLockedETHUntracked_not: uni_BigDecimal
  totalValueLockedETHUntracked_gt: uni_BigDecimal
  totalValueLockedETHUntracked_lt: uni_BigDecimal
  totalValueLockedETHUntracked_gte: uni_BigDecimal
  totalValueLockedETHUntracked_lte: uni_BigDecimal
  totalValueLockedETHUntracked_in: [uni_BigDecimal!]
  totalValueLockedETHUntracked_not_in: [uni_BigDecimal!]
  owner: ID
  owner_not: ID
  owner_gt: ID
  owner_lt: ID
  owner_gte: ID
  owner_lte: ID
  owner_in: [ID!]
  owner_not_in: [ID!]
  """Filter for the block changed event."""
  _change_block: uni_BlockChangedFilter
  and: [uni_Factory_filter]
  or: [uni_Factory_filter]
}

enum uni_Factory_orderBy {
  id
  poolCount
  txCount
  totalVolumeUSD
  totalVolumeETH
  totalFeesUSD
  totalFeesETH
  untrackedVolumeUSD
  totalValueLockedUSD
  totalValueLockedETH
  totalValueLockedUSDUntracked
  totalValueLockedETHUntracked
  owner
}

type uni_Flash {
  id: ID!
  transaction: uni_Transaction!
  timestamp: BigInt!
  pool: uni_Pool!
  sender: uni_Bytes!
  recipient: uni_Bytes!
  amount0: uni_BigDecimal!
  amount1: uni_BigDecimal!
  amountUSD: uni_BigDecimal!
  amount0Paid: uni_BigDecimal!
  amount1Paid: uni_BigDecimal!
  logIndex: BigInt
}

input uni_Flash_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: uni_Transaction_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: uni_Pool_filter
  sender: uni_Bytes
  sender_not: uni_Bytes
  sender_gt: uni_Bytes
  sender_lt: uni_Bytes
  sender_gte: uni_Bytes
  sender_lte: uni_Bytes
  sender_in: [uni_Bytes!]
  sender_not_in: [uni_Bytes!]
  sender_contains: uni_Bytes
  sender_not_contains: uni_Bytes
  recipient: uni_Bytes
  recipient_not: uni_Bytes
  recipient_gt: uni_Bytes
  recipient_lt: uni_Bytes
  recipient_gte: uni_Bytes
  recipient_lte: uni_Bytes
  recipient_in: [uni_Bytes!]
  recipient_not_in: [uni_Bytes!]
  recipient_contains: uni_Bytes
  recipient_not_contains: uni_Bytes
  amount0: uni_BigDecimal
  amount0_not: uni_BigDecimal
  amount0_gt: uni_BigDecimal
  amount0_lt: uni_BigDecimal
  amount0_gte: uni_BigDecimal
  amount0_lte: uni_BigDecimal
  amount0_in: [uni_BigDecimal!]
  amount0_not_in: [uni_BigDecimal!]
  amount1: uni_BigDecimal
  amount1_not: uni_BigDecimal
  amount1_gt: uni_BigDecimal
  amount1_lt: uni_BigDecimal
  amount1_gte: uni_BigDecimal
  amount1_lte: uni_BigDecimal
  amount1_in: [uni_BigDecimal!]
  amount1_not_in: [uni_BigDecimal!]
  amountUSD: uni_BigDecimal
  amountUSD_not: uni_BigDecimal
  amountUSD_gt: uni_BigDecimal
  amountUSD_lt: uni_BigDecimal
  amountUSD_gte: uni_BigDecimal
  amountUSD_lte: uni_BigDecimal
  amountUSD_in: [uni_BigDecimal!]
  amountUSD_not_in: [uni_BigDecimal!]
  amount0Paid: uni_BigDecimal
  amount0Paid_not: uni_BigDecimal
  amount0Paid_gt: uni_BigDecimal
  amount0Paid_lt: uni_BigDecimal
  amount0Paid_gte: uni_BigDecimal
  amount0Paid_lte: uni_BigDecimal
  amount0Paid_in: [uni_BigDecimal!]
  amount0Paid_not_in: [uni_BigDecimal!]
  amount1Paid: uni_BigDecimal
  amount1Paid_not: uni_BigDecimal
  amount1Paid_gt: uni_BigDecimal
  amount1Paid_lt: uni_BigDecimal
  amount1Paid_gte: uni_BigDecimal
  amount1Paid_lte: uni_BigDecimal
  amount1Paid_in: [uni_BigDecimal!]
  amount1Paid_not_in: [uni_BigDecimal!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: uni_BlockChangedFilter
  and: [uni_Flash_filter]
  or: [uni_Flash_filter]
}

enum uni_Flash_orderBy {
  id
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  transaction__gasUsed
  transaction__gasPrice
  timestamp
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  sender
  recipient
  amount0
  amount1
  amountUSD
  amount0Paid
  amount1Paid
  logIndex
}

"""
8 bytes signed integer

"""
scalar uni_Int8

type uni_Mint {
  id: ID!
  transaction: uni_Transaction!
  timestamp: BigInt!
  pool: uni_Pool!
  token0: uni_Token!
  token1: uni_Token!
  owner: uni_Bytes!
  sender: uni_Bytes
  origin: uni_Bytes!
  amount: BigInt!
  amount0: uni_BigDecimal!
  amount1: uni_BigDecimal!
  amountUSD: uni_BigDecimal
  tickLower: BigInt!
  tickUpper: BigInt!
  logIndex: BigInt
}

input uni_Mint_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: uni_Transaction_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: uni_Pool_filter
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: uni_Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: uni_Token_filter
  owner: uni_Bytes
  owner_not: uni_Bytes
  owner_gt: uni_Bytes
  owner_lt: uni_Bytes
  owner_gte: uni_Bytes
  owner_lte: uni_Bytes
  owner_in: [uni_Bytes!]
  owner_not_in: [uni_Bytes!]
  owner_contains: uni_Bytes
  owner_not_contains: uni_Bytes
  sender: uni_Bytes
  sender_not: uni_Bytes
  sender_gt: uni_Bytes
  sender_lt: uni_Bytes
  sender_gte: uni_Bytes
  sender_lte: uni_Bytes
  sender_in: [uni_Bytes!]
  sender_not_in: [uni_Bytes!]
  sender_contains: uni_Bytes
  sender_not_contains: uni_Bytes
  origin: uni_Bytes
  origin_not: uni_Bytes
  origin_gt: uni_Bytes
  origin_lt: uni_Bytes
  origin_gte: uni_Bytes
  origin_lte: uni_Bytes
  origin_in: [uni_Bytes!]
  origin_not_in: [uni_Bytes!]
  origin_contains: uni_Bytes
  origin_not_contains: uni_Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  amount0: uni_BigDecimal
  amount0_not: uni_BigDecimal
  amount0_gt: uni_BigDecimal
  amount0_lt: uni_BigDecimal
  amount0_gte: uni_BigDecimal
  amount0_lte: uni_BigDecimal
  amount0_in: [uni_BigDecimal!]
  amount0_not_in: [uni_BigDecimal!]
  amount1: uni_BigDecimal
  amount1_not: uni_BigDecimal
  amount1_gt: uni_BigDecimal
  amount1_lt: uni_BigDecimal
  amount1_gte: uni_BigDecimal
  amount1_lte: uni_BigDecimal
  amount1_in: [uni_BigDecimal!]
  amount1_not_in: [uni_BigDecimal!]
  amountUSD: uni_BigDecimal
  amountUSD_not: uni_BigDecimal
  amountUSD_gt: uni_BigDecimal
  amountUSD_lt: uni_BigDecimal
  amountUSD_gte: uni_BigDecimal
  amountUSD_lte: uni_BigDecimal
  amountUSD_in: [uni_BigDecimal!]
  amountUSD_not_in: [uni_BigDecimal!]
  tickLower: BigInt
  tickLower_not: BigInt
  tickLower_gt: BigInt
  tickLower_lt: BigInt
  tickLower_gte: BigInt
  tickLower_lte: BigInt
  tickLower_in: [BigInt!]
  tickLower_not_in: [BigInt!]
  tickUpper: BigInt
  tickUpper_not: BigInt
  tickUpper_gt: BigInt
  tickUpper_lt: BigInt
  tickUpper_gte: BigInt
  tickUpper_lte: BigInt
  tickUpper_in: [BigInt!]
  tickUpper_not_in: [BigInt!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: uni_BlockChangedFilter
  and: [uni_Mint_filter]
  or: [uni_Mint_filter]
}

enum uni_Mint_orderBy {
  id
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  transaction__gasUsed
  transaction__gasPrice
  timestamp
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  token0
  token0__id
  token0__symbol
  token0__name
  token0__decimals
  token0__totalSupply
  token0__volume
  token0__volumeUSD
  token0__untrackedVolumeUSD
  token0__feesUSD
  token0__txCount
  token0__poolCount
  token0__totalValueLocked
  token0__totalValueLockedUSD
  token0__totalValueLockedUSDUntracked
  token0__derivedETH
  token1
  token1__id
  token1__symbol
  token1__name
  token1__decimals
  token1__totalSupply
  token1__volume
  token1__volumeUSD
  token1__untrackedVolumeUSD
  token1__feesUSD
  token1__txCount
  token1__poolCount
  token1__totalValueLocked
  token1__totalValueLockedUSD
  token1__totalValueLockedUSDUntracked
  token1__derivedETH
  owner
  sender
  origin
  amount
  amount0
  amount1
  amountUSD
  tickLower
  tickUpper
  logIndex
}

"""Defines the order direction, either ascending or descending"""
enum uni_OrderDirection {
  asc
  desc
}

type uni_Pool {
  id: ID!
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
  token0: uni_Token!
  token1: uni_Token!
  feeTier: BigInt!
  liquidity: BigInt!
  sqrtPrice: BigInt!
  feeGrowthGlobal0X128: BigInt!
  feeGrowthGlobal1X128: BigInt!
  token0Price: uni_BigDecimal!
  token1Price: uni_BigDecimal!
  tick: BigInt
  observationIndex: BigInt!
  volumeToken0: uni_BigDecimal!
  volumeToken1: uni_BigDecimal!
  volumeUSD: uni_BigDecimal!
  untrackedVolumeUSD: uni_BigDecimal!
  feesUSD: uni_BigDecimal!
  txCount: BigInt!
  collectedFeesToken0: uni_BigDecimal!
  collectedFeesToken1: uni_BigDecimal!
  collectedFeesUSD: uni_BigDecimal!
  totalValueLockedToken0: uni_BigDecimal!
  totalValueLockedToken1: uni_BigDecimal!
  totalValueLockedETH: uni_BigDecimal!
  totalValueLockedUSD: uni_BigDecimal!
  totalValueLockedUSDUntracked: uni_BigDecimal!
  liquidityProviderCount: BigInt!
  poolHourData(skip: Int = 0, first: Int = 100, orderBy: uni_PoolHourData_orderBy, orderDirection: uni_OrderDirection, where: uni_PoolHourData_filter): [uni_PoolHourData!]!
  poolDayData(skip: Int = 0, first: Int = 100, orderBy: uni_PoolDayData_orderBy, orderDirection: uni_OrderDirection, where: uni_PoolDayData_filter): [uni_PoolDayData!]!
  mints(skip: Int = 0, first: Int = 100, orderBy: uni_Mint_orderBy, orderDirection: uni_OrderDirection, where: uni_Mint_filter): [uni_Mint!]!
  burns(skip: Int = 0, first: Int = 100, orderBy: uni_Burn_orderBy, orderDirection: uni_OrderDirection, where: uni_Burn_filter): [uni_Burn!]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: uni_Swap_orderBy, orderDirection: uni_OrderDirection, where: uni_Swap_filter): [uni_Swap!]!
  collects(skip: Int = 0, first: Int = 100, orderBy: uni_Collect_orderBy, orderDirection: uni_OrderDirection, where: uni_Collect_filter): [uni_Collect!]!
  ticks(skip: Int = 0, first: Int = 100, orderBy: uni_Tick_orderBy, orderDirection: uni_OrderDirection, where: uni_Tick_filter): [uni_Tick!]!
}

type uni_PoolDayData {
  id: ID!
  date: Int!
  pool: uni_Pool!
  liquidity: BigInt!
  sqrtPrice: BigInt!
  token0Price: uni_BigDecimal!
  token1Price: uni_BigDecimal!
  tick: BigInt
  feeGrowthGlobal0X128: BigInt!
  feeGrowthGlobal1X128: BigInt!
  tvlUSD: uni_BigDecimal!
  volumeToken0: uni_BigDecimal!
  volumeToken1: uni_BigDecimal!
  volumeUSD: uni_BigDecimal!
  feesUSD: uni_BigDecimal!
  txCount: BigInt!
  open: uni_BigDecimal!
  high: uni_BigDecimal!
  low: uni_BigDecimal!
  close: uni_BigDecimal!
}

input uni_PoolDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: uni_Pool_filter
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  sqrtPrice: BigInt
  sqrtPrice_not: BigInt
  sqrtPrice_gt: BigInt
  sqrtPrice_lt: BigInt
  sqrtPrice_gte: BigInt
  sqrtPrice_lte: BigInt
  sqrtPrice_in: [BigInt!]
  sqrtPrice_not_in: [BigInt!]
  token0Price: uni_BigDecimal
  token0Price_not: uni_BigDecimal
  token0Price_gt: uni_BigDecimal
  token0Price_lt: uni_BigDecimal
  token0Price_gte: uni_BigDecimal
  token0Price_lte: uni_BigDecimal
  token0Price_in: [uni_BigDecimal!]
  token0Price_not_in: [uni_BigDecimal!]
  token1Price: uni_BigDecimal
  token1Price_not: uni_BigDecimal
  token1Price_gt: uni_BigDecimal
  token1Price_lt: uni_BigDecimal
  token1Price_gte: uni_BigDecimal
  token1Price_lte: uni_BigDecimal
  token1Price_in: [uni_BigDecimal!]
  token1Price_not_in: [uni_BigDecimal!]
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  feeGrowthGlobal0X128: BigInt
  feeGrowthGlobal0X128_not: BigInt
  feeGrowthGlobal0X128_gt: BigInt
  feeGrowthGlobal0X128_lt: BigInt
  feeGrowthGlobal0X128_gte: BigInt
  feeGrowthGlobal0X128_lte: BigInt
  feeGrowthGlobal0X128_in: [BigInt!]
  feeGrowthGlobal0X128_not_in: [BigInt!]
  feeGrowthGlobal1X128: BigInt
  feeGrowthGlobal1X128_not: BigInt
  feeGrowthGlobal1X128_gt: BigInt
  feeGrowthGlobal1X128_lt: BigInt
  feeGrowthGlobal1X128_gte: BigInt
  feeGrowthGlobal1X128_lte: BigInt
  feeGrowthGlobal1X128_in: [BigInt!]
  feeGrowthGlobal1X128_not_in: [BigInt!]
  tvlUSD: uni_BigDecimal
  tvlUSD_not: uni_BigDecimal
  tvlUSD_gt: uni_BigDecimal
  tvlUSD_lt: uni_BigDecimal
  tvlUSD_gte: uni_BigDecimal
  tvlUSD_lte: uni_BigDecimal
  tvlUSD_in: [uni_BigDecimal!]
  tvlUSD_not_in: [uni_BigDecimal!]
  volumeToken0: uni_BigDecimal
  volumeToken0_not: uni_BigDecimal
  volumeToken0_gt: uni_BigDecimal
  volumeToken0_lt: uni_BigDecimal
  volumeToken0_gte: uni_BigDecimal
  volumeToken0_lte: uni_BigDecimal
  volumeToken0_in: [uni_BigDecimal!]
  volumeToken0_not_in: [uni_BigDecimal!]
  volumeToken1: uni_BigDecimal
  volumeToken1_not: uni_BigDecimal
  volumeToken1_gt: uni_BigDecimal
  volumeToken1_lt: uni_BigDecimal
  volumeToken1_gte: uni_BigDecimal
  volumeToken1_lte: uni_BigDecimal
  volumeToken1_in: [uni_BigDecimal!]
  volumeToken1_not_in: [uni_BigDecimal!]
  volumeUSD: uni_BigDecimal
  volumeUSD_not: uni_BigDecimal
  volumeUSD_gt: uni_BigDecimal
  volumeUSD_lt: uni_BigDecimal
  volumeUSD_gte: uni_BigDecimal
  volumeUSD_lte: uni_BigDecimal
  volumeUSD_in: [uni_BigDecimal!]
  volumeUSD_not_in: [uni_BigDecimal!]
  feesUSD: uni_BigDecimal
  feesUSD_not: uni_BigDecimal
  feesUSD_gt: uni_BigDecimal
  feesUSD_lt: uni_BigDecimal
  feesUSD_gte: uni_BigDecimal
  feesUSD_lte: uni_BigDecimal
  feesUSD_in: [uni_BigDecimal!]
  feesUSD_not_in: [uni_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  open: uni_BigDecimal
  open_not: uni_BigDecimal
  open_gt: uni_BigDecimal
  open_lt: uni_BigDecimal
  open_gte: uni_BigDecimal
  open_lte: uni_BigDecimal
  open_in: [uni_BigDecimal!]
  open_not_in: [uni_BigDecimal!]
  high: uni_BigDecimal
  high_not: uni_BigDecimal
  high_gt: uni_BigDecimal
  high_lt: uni_BigDecimal
  high_gte: uni_BigDecimal
  high_lte: uni_BigDecimal
  high_in: [uni_BigDecimal!]
  high_not_in: [uni_BigDecimal!]
  low: uni_BigDecimal
  low_not: uni_BigDecimal
  low_gt: uni_BigDecimal
  low_lt: uni_BigDecimal
  low_gte: uni_BigDecimal
  low_lte: uni_BigDecimal
  low_in: [uni_BigDecimal!]
  low_not_in: [uni_BigDecimal!]
  close: uni_BigDecimal
  close_not: uni_BigDecimal
  close_gt: uni_BigDecimal
  close_lt: uni_BigDecimal
  close_gte: uni_BigDecimal
  close_lte: uni_BigDecimal
  close_in: [uni_BigDecimal!]
  close_not_in: [uni_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: uni_BlockChangedFilter
  and: [uni_PoolDayData_filter]
  or: [uni_PoolDayData_filter]
}

enum uni_PoolDayData_orderBy {
  id
  date
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  liquidity
  sqrtPrice
  token0Price
  token1Price
  tick
  feeGrowthGlobal0X128
  feeGrowthGlobal1X128
  tvlUSD
  volumeToken0
  volumeToken1
  volumeUSD
  feesUSD
  txCount
  open
  high
  low
  close
}

type uni_PoolHourData {
  id: ID!
  periodStartUnix: Int!
  pool: uni_Pool!
  liquidity: BigInt!
  sqrtPrice: BigInt!
  token0Price: uni_BigDecimal!
  token1Price: uni_BigDecimal!
  tick: BigInt
  feeGrowthGlobal0X128: BigInt!
  feeGrowthGlobal1X128: BigInt!
  tvlUSD: uni_BigDecimal!
  volumeToken0: uni_BigDecimal!
  volumeToken1: uni_BigDecimal!
  volumeUSD: uni_BigDecimal!
  feesUSD: uni_BigDecimal!
  txCount: BigInt!
  open: uni_BigDecimal!
  high: uni_BigDecimal!
  low: uni_BigDecimal!
  close: uni_BigDecimal!
}

input uni_PoolHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  periodStartUnix: Int
  periodStartUnix_not: Int
  periodStartUnix_gt: Int
  periodStartUnix_lt: Int
  periodStartUnix_gte: Int
  periodStartUnix_lte: Int
  periodStartUnix_in: [Int!]
  periodStartUnix_not_in: [Int!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: uni_Pool_filter
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  sqrtPrice: BigInt
  sqrtPrice_not: BigInt
  sqrtPrice_gt: BigInt
  sqrtPrice_lt: BigInt
  sqrtPrice_gte: BigInt
  sqrtPrice_lte: BigInt
  sqrtPrice_in: [BigInt!]
  sqrtPrice_not_in: [BigInt!]
  token0Price: uni_BigDecimal
  token0Price_not: uni_BigDecimal
  token0Price_gt: uni_BigDecimal
  token0Price_lt: uni_BigDecimal
  token0Price_gte: uni_BigDecimal
  token0Price_lte: uni_BigDecimal
  token0Price_in: [uni_BigDecimal!]
  token0Price_not_in: [uni_BigDecimal!]
  token1Price: uni_BigDecimal
  token1Price_not: uni_BigDecimal
  token1Price_gt: uni_BigDecimal
  token1Price_lt: uni_BigDecimal
  token1Price_gte: uni_BigDecimal
  token1Price_lte: uni_BigDecimal
  token1Price_in: [uni_BigDecimal!]
  token1Price_not_in: [uni_BigDecimal!]
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  feeGrowthGlobal0X128: BigInt
  feeGrowthGlobal0X128_not: BigInt
  feeGrowthGlobal0X128_gt: BigInt
  feeGrowthGlobal0X128_lt: BigInt
  feeGrowthGlobal0X128_gte: BigInt
  feeGrowthGlobal0X128_lte: BigInt
  feeGrowthGlobal0X128_in: [BigInt!]
  feeGrowthGlobal0X128_not_in: [BigInt!]
  feeGrowthGlobal1X128: BigInt
  feeGrowthGlobal1X128_not: BigInt
  feeGrowthGlobal1X128_gt: BigInt
  feeGrowthGlobal1X128_lt: BigInt
  feeGrowthGlobal1X128_gte: BigInt
  feeGrowthGlobal1X128_lte: BigInt
  feeGrowthGlobal1X128_in: [BigInt!]
  feeGrowthGlobal1X128_not_in: [BigInt!]
  tvlUSD: uni_BigDecimal
  tvlUSD_not: uni_BigDecimal
  tvlUSD_gt: uni_BigDecimal
  tvlUSD_lt: uni_BigDecimal
  tvlUSD_gte: uni_BigDecimal
  tvlUSD_lte: uni_BigDecimal
  tvlUSD_in: [uni_BigDecimal!]
  tvlUSD_not_in: [uni_BigDecimal!]
  volumeToken0: uni_BigDecimal
  volumeToken0_not: uni_BigDecimal
  volumeToken0_gt: uni_BigDecimal
  volumeToken0_lt: uni_BigDecimal
  volumeToken0_gte: uni_BigDecimal
  volumeToken0_lte: uni_BigDecimal
  volumeToken0_in: [uni_BigDecimal!]
  volumeToken0_not_in: [uni_BigDecimal!]
  volumeToken1: uni_BigDecimal
  volumeToken1_not: uni_BigDecimal
  volumeToken1_gt: uni_BigDecimal
  volumeToken1_lt: uni_BigDecimal
  volumeToken1_gte: uni_BigDecimal
  volumeToken1_lte: uni_BigDecimal
  volumeToken1_in: [uni_BigDecimal!]
  volumeToken1_not_in: [uni_BigDecimal!]
  volumeUSD: uni_BigDecimal
  volumeUSD_not: uni_BigDecimal
  volumeUSD_gt: uni_BigDecimal
  volumeUSD_lt: uni_BigDecimal
  volumeUSD_gte: uni_BigDecimal
  volumeUSD_lte: uni_BigDecimal
  volumeUSD_in: [uni_BigDecimal!]
  volumeUSD_not_in: [uni_BigDecimal!]
  feesUSD: uni_BigDecimal
  feesUSD_not: uni_BigDecimal
  feesUSD_gt: uni_BigDecimal
  feesUSD_lt: uni_BigDecimal
  feesUSD_gte: uni_BigDecimal
  feesUSD_lte: uni_BigDecimal
  feesUSD_in: [uni_BigDecimal!]
  feesUSD_not_in: [uni_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  open: uni_BigDecimal
  open_not: uni_BigDecimal
  open_gt: uni_BigDecimal
  open_lt: uni_BigDecimal
  open_gte: uni_BigDecimal
  open_lte: uni_BigDecimal
  open_in: [uni_BigDecimal!]
  open_not_in: [uni_BigDecimal!]
  high: uni_BigDecimal
  high_not: uni_BigDecimal
  high_gt: uni_BigDecimal
  high_lt: uni_BigDecimal
  high_gte: uni_BigDecimal
  high_lte: uni_BigDecimal
  high_in: [uni_BigDecimal!]
  high_not_in: [uni_BigDecimal!]
  low: uni_BigDecimal
  low_not: uni_BigDecimal
  low_gt: uni_BigDecimal
  low_lt: uni_BigDecimal
  low_gte: uni_BigDecimal
  low_lte: uni_BigDecimal
  low_in: [uni_BigDecimal!]
  low_not_in: [uni_BigDecimal!]
  close: uni_BigDecimal
  close_not: uni_BigDecimal
  close_gt: uni_BigDecimal
  close_lt: uni_BigDecimal
  close_gte: uni_BigDecimal
  close_lte: uni_BigDecimal
  close_in: [uni_BigDecimal!]
  close_not_in: [uni_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: uni_BlockChangedFilter
  and: [uni_PoolHourData_filter]
  or: [uni_PoolHourData_filter]
}

enum uni_PoolHourData_orderBy {
  id
  periodStartUnix
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  liquidity
  sqrtPrice
  token0Price
  token1Price
  tick
  feeGrowthGlobal0X128
  feeGrowthGlobal1X128
  tvlUSD
  volumeToken0
  volumeToken1
  volumeUSD
  feesUSD
  txCount
  open
  high
  low
  close
}

input uni_Pool_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  createdAtBlockNumber: BigInt
  createdAtBlockNumber_not: BigInt
  createdAtBlockNumber_gt: BigInt
  createdAtBlockNumber_lt: BigInt
  createdAtBlockNumber_gte: BigInt
  createdAtBlockNumber_lte: BigInt
  createdAtBlockNumber_in: [BigInt!]
  createdAtBlockNumber_not_in: [BigInt!]
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: uni_Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: uni_Token_filter
  feeTier: BigInt
  feeTier_not: BigInt
  feeTier_gt: BigInt
  feeTier_lt: BigInt
  feeTier_gte: BigInt
  feeTier_lte: BigInt
  feeTier_in: [BigInt!]
  feeTier_not_in: [BigInt!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  sqrtPrice: BigInt
  sqrtPrice_not: BigInt
  sqrtPrice_gt: BigInt
  sqrtPrice_lt: BigInt
  sqrtPrice_gte: BigInt
  sqrtPrice_lte: BigInt
  sqrtPrice_in: [BigInt!]
  sqrtPrice_not_in: [BigInt!]
  feeGrowthGlobal0X128: BigInt
  feeGrowthGlobal0X128_not: BigInt
  feeGrowthGlobal0X128_gt: BigInt
  feeGrowthGlobal0X128_lt: BigInt
  feeGrowthGlobal0X128_gte: BigInt
  feeGrowthGlobal0X128_lte: BigInt
  feeGrowthGlobal0X128_in: [BigInt!]
  feeGrowthGlobal0X128_not_in: [BigInt!]
  feeGrowthGlobal1X128: BigInt
  feeGrowthGlobal1X128_not: BigInt
  feeGrowthGlobal1X128_gt: BigInt
  feeGrowthGlobal1X128_lt: BigInt
  feeGrowthGlobal1X128_gte: BigInt
  feeGrowthGlobal1X128_lte: BigInt
  feeGrowthGlobal1X128_in: [BigInt!]
  feeGrowthGlobal1X128_not_in: [BigInt!]
  token0Price: uni_BigDecimal
  token0Price_not: uni_BigDecimal
  token0Price_gt: uni_BigDecimal
  token0Price_lt: uni_BigDecimal
  token0Price_gte: uni_BigDecimal
  token0Price_lte: uni_BigDecimal
  token0Price_in: [uni_BigDecimal!]
  token0Price_not_in: [uni_BigDecimal!]
  token1Price: uni_BigDecimal
  token1Price_not: uni_BigDecimal
  token1Price_gt: uni_BigDecimal
  token1Price_lt: uni_BigDecimal
  token1Price_gte: uni_BigDecimal
  token1Price_lte: uni_BigDecimal
  token1Price_in: [uni_BigDecimal!]
  token1Price_not_in: [uni_BigDecimal!]
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  observationIndex: BigInt
  observationIndex_not: BigInt
  observationIndex_gt: BigInt
  observationIndex_lt: BigInt
  observationIndex_gte: BigInt
  observationIndex_lte: BigInt
  observationIndex_in: [BigInt!]
  observationIndex_not_in: [BigInt!]
  volumeToken0: uni_BigDecimal
  volumeToken0_not: uni_BigDecimal
  volumeToken0_gt: uni_BigDecimal
  volumeToken0_lt: uni_BigDecimal
  volumeToken0_gte: uni_BigDecimal
  volumeToken0_lte: uni_BigDecimal
  volumeToken0_in: [uni_BigDecimal!]
  volumeToken0_not_in: [uni_BigDecimal!]
  volumeToken1: uni_BigDecimal
  volumeToken1_not: uni_BigDecimal
  volumeToken1_gt: uni_BigDecimal
  volumeToken1_lt: uni_BigDecimal
  volumeToken1_gte: uni_BigDecimal
  volumeToken1_lte: uni_BigDecimal
  volumeToken1_in: [uni_BigDecimal!]
  volumeToken1_not_in: [uni_BigDecimal!]
  volumeUSD: uni_BigDecimal
  volumeUSD_not: uni_BigDecimal
  volumeUSD_gt: uni_BigDecimal
  volumeUSD_lt: uni_BigDecimal
  volumeUSD_gte: uni_BigDecimal
  volumeUSD_lte: uni_BigDecimal
  volumeUSD_in: [uni_BigDecimal!]
  volumeUSD_not_in: [uni_BigDecimal!]
  untrackedVolumeUSD: uni_BigDecimal
  untrackedVolumeUSD_not: uni_BigDecimal
  untrackedVolumeUSD_gt: uni_BigDecimal
  untrackedVolumeUSD_lt: uni_BigDecimal
  untrackedVolumeUSD_gte: uni_BigDecimal
  untrackedVolumeUSD_lte: uni_BigDecimal
  untrackedVolumeUSD_in: [uni_BigDecimal!]
  untrackedVolumeUSD_not_in: [uni_BigDecimal!]
  feesUSD: uni_BigDecimal
  feesUSD_not: uni_BigDecimal
  feesUSD_gt: uni_BigDecimal
  feesUSD_lt: uni_BigDecimal
  feesUSD_gte: uni_BigDecimal
  feesUSD_lte: uni_BigDecimal
  feesUSD_in: [uni_BigDecimal!]
  feesUSD_not_in: [uni_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  collectedFeesToken0: uni_BigDecimal
  collectedFeesToken0_not: uni_BigDecimal
  collectedFeesToken0_gt: uni_BigDecimal
  collectedFeesToken0_lt: uni_BigDecimal
  collectedFeesToken0_gte: uni_BigDecimal
  collectedFeesToken0_lte: uni_BigDecimal
  collectedFeesToken0_in: [uni_BigDecimal!]
  collectedFeesToken0_not_in: [uni_BigDecimal!]
  collectedFeesToken1: uni_BigDecimal
  collectedFeesToken1_not: uni_BigDecimal
  collectedFeesToken1_gt: uni_BigDecimal
  collectedFeesToken1_lt: uni_BigDecimal
  collectedFeesToken1_gte: uni_BigDecimal
  collectedFeesToken1_lte: uni_BigDecimal
  collectedFeesToken1_in: [uni_BigDecimal!]
  collectedFeesToken1_not_in: [uni_BigDecimal!]
  collectedFeesUSD: uni_BigDecimal
  collectedFeesUSD_not: uni_BigDecimal
  collectedFeesUSD_gt: uni_BigDecimal
  collectedFeesUSD_lt: uni_BigDecimal
  collectedFeesUSD_gte: uni_BigDecimal
  collectedFeesUSD_lte: uni_BigDecimal
  collectedFeesUSD_in: [uni_BigDecimal!]
  collectedFeesUSD_not_in: [uni_BigDecimal!]
  totalValueLockedToken0: uni_BigDecimal
  totalValueLockedToken0_not: uni_BigDecimal
  totalValueLockedToken0_gt: uni_BigDecimal
  totalValueLockedToken0_lt: uni_BigDecimal
  totalValueLockedToken0_gte: uni_BigDecimal
  totalValueLockedToken0_lte: uni_BigDecimal
  totalValueLockedToken0_in: [uni_BigDecimal!]
  totalValueLockedToken0_not_in: [uni_BigDecimal!]
  totalValueLockedToken1: uni_BigDecimal
  totalValueLockedToken1_not: uni_BigDecimal
  totalValueLockedToken1_gt: uni_BigDecimal
  totalValueLockedToken1_lt: uni_BigDecimal
  totalValueLockedToken1_gte: uni_BigDecimal
  totalValueLockedToken1_lte: uni_BigDecimal
  totalValueLockedToken1_in: [uni_BigDecimal!]
  totalValueLockedToken1_not_in: [uni_BigDecimal!]
  totalValueLockedETH: uni_BigDecimal
  totalValueLockedETH_not: uni_BigDecimal
  totalValueLockedETH_gt: uni_BigDecimal
  totalValueLockedETH_lt: uni_BigDecimal
  totalValueLockedETH_gte: uni_BigDecimal
  totalValueLockedETH_lte: uni_BigDecimal
  totalValueLockedETH_in: [uni_BigDecimal!]
  totalValueLockedETH_not_in: [uni_BigDecimal!]
  totalValueLockedUSD: uni_BigDecimal
  totalValueLockedUSD_not: uni_BigDecimal
  totalValueLockedUSD_gt: uni_BigDecimal
  totalValueLockedUSD_lt: uni_BigDecimal
  totalValueLockedUSD_gte: uni_BigDecimal
  totalValueLockedUSD_lte: uni_BigDecimal
  totalValueLockedUSD_in: [uni_BigDecimal!]
  totalValueLockedUSD_not_in: [uni_BigDecimal!]
  totalValueLockedUSDUntracked: uni_BigDecimal
  totalValueLockedUSDUntracked_not: uni_BigDecimal
  totalValueLockedUSDUntracked_gt: uni_BigDecimal
  totalValueLockedUSDUntracked_lt: uni_BigDecimal
  totalValueLockedUSDUntracked_gte: uni_BigDecimal
  totalValueLockedUSDUntracked_lte: uni_BigDecimal
  totalValueLockedUSDUntracked_in: [uni_BigDecimal!]
  totalValueLockedUSDUntracked_not_in: [uni_BigDecimal!]
  liquidityProviderCount: BigInt
  liquidityProviderCount_not: BigInt
  liquidityProviderCount_gt: BigInt
  liquidityProviderCount_lt: BigInt
  liquidityProviderCount_gte: BigInt
  liquidityProviderCount_lte: BigInt
  liquidityProviderCount_in: [BigInt!]
  liquidityProviderCount_not_in: [BigInt!]
  poolHourData_: uni_PoolHourData_filter
  poolDayData_: uni_PoolDayData_filter
  mints_: uni_Mint_filter
  burns_: uni_Burn_filter
  swaps_: uni_Swap_filter
  collects_: uni_Collect_filter
  ticks_: uni_Tick_filter
  """Filter for the block changed event."""
  _change_block: uni_BlockChangedFilter
  and: [uni_Pool_filter]
  or: [uni_Pool_filter]
}

enum uni_Pool_orderBy {
  id
  createdAtTimestamp
  createdAtBlockNumber
  token0
  token0__id
  token0__symbol
  token0__name
  token0__decimals
  token0__totalSupply
  token0__volume
  token0__volumeUSD
  token0__untrackedVolumeUSD
  token0__feesUSD
  token0__txCount
  token0__poolCount
  token0__totalValueLocked
  token0__totalValueLockedUSD
  token0__totalValueLockedUSDUntracked
  token0__derivedETH
  token1
  token1__id
  token1__symbol
  token1__name
  token1__decimals
  token1__totalSupply
  token1__volume
  token1__volumeUSD
  token1__untrackedVolumeUSD
  token1__feesUSD
  token1__txCount
  token1__poolCount
  token1__totalValueLocked
  token1__totalValueLockedUSD
  token1__totalValueLockedUSDUntracked
  token1__derivedETH
  feeTier
  liquidity
  sqrtPrice
  feeGrowthGlobal0X128
  feeGrowthGlobal1X128
  token0Price
  token1Price
  tick
  observationIndex
  volumeToken0
  volumeToken1
  volumeUSD
  untrackedVolumeUSD
  feesUSD
  txCount
  collectedFeesToken0
  collectedFeesToken1
  collectedFeesUSD
  totalValueLockedToken0
  totalValueLockedToken1
  totalValueLockedETH
  totalValueLockedUSD
  totalValueLockedUSDUntracked
  liquidityProviderCount
  poolHourData
  poolDayData
  mints
  burns
  swaps
  collects
  ticks
}

type uni_Position {
  id: ID!
  owner: uni_Bytes!
  pool: uni_Pool!
  token0: uni_Token!
  token1: uni_Token!
  tickLower: uni_Tick!
  tickUpper: uni_Tick!
  liquidity: BigInt!
  depositedToken0: uni_BigDecimal!
  depositedToken1: uni_BigDecimal!
  withdrawnToken0: uni_BigDecimal!
  withdrawnToken1: uni_BigDecimal!
  collectedFeesToken0: uni_BigDecimal!
  collectedFeesToken1: uni_BigDecimal!
  transaction: uni_Transaction!
  feeGrowthInside0LastX128: BigInt!
  feeGrowthInside1LastX128: BigInt!
}

type uni_PositionSnapshot {
  id: ID!
  owner: uni_Bytes!
  pool: uni_Pool!
  position: uni_Position!
  blockNumber: BigInt!
  timestamp: BigInt!
  liquidity: BigInt!
  depositedToken0: uni_BigDecimal!
  depositedToken1: uni_BigDecimal!
  withdrawnToken0: uni_BigDecimal!
  withdrawnToken1: uni_BigDecimal!
  collectedFeesToken0: uni_BigDecimal!
  collectedFeesToken1: uni_BigDecimal!
  transaction: uni_Transaction!
  feeGrowthInside0LastX128: BigInt!
  feeGrowthInside1LastX128: BigInt!
}

input uni_PositionSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  owner: uni_Bytes
  owner_not: uni_Bytes
  owner_gt: uni_Bytes
  owner_lt: uni_Bytes
  owner_gte: uni_Bytes
  owner_lte: uni_Bytes
  owner_in: [uni_Bytes!]
  owner_not_in: [uni_Bytes!]
  owner_contains: uni_Bytes
  owner_not_contains: uni_Bytes
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: uni_Pool_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: uni_Position_filter
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  depositedToken0: uni_BigDecimal
  depositedToken0_not: uni_BigDecimal
  depositedToken0_gt: uni_BigDecimal
  depositedToken0_lt: uni_BigDecimal
  depositedToken0_gte: uni_BigDecimal
  depositedToken0_lte: uni_BigDecimal
  depositedToken0_in: [uni_BigDecimal!]
  depositedToken0_not_in: [uni_BigDecimal!]
  depositedToken1: uni_BigDecimal
  depositedToken1_not: uni_BigDecimal
  depositedToken1_gt: uni_BigDecimal
  depositedToken1_lt: uni_BigDecimal
  depositedToken1_gte: uni_BigDecimal
  depositedToken1_lte: uni_BigDecimal
  depositedToken1_in: [uni_BigDecimal!]
  depositedToken1_not_in: [uni_BigDecimal!]
  withdrawnToken0: uni_BigDecimal
  withdrawnToken0_not: uni_BigDecimal
  withdrawnToken0_gt: uni_BigDecimal
  withdrawnToken0_lt: uni_BigDecimal
  withdrawnToken0_gte: uni_BigDecimal
  withdrawnToken0_lte: uni_BigDecimal
  withdrawnToken0_in: [uni_BigDecimal!]
  withdrawnToken0_not_in: [uni_BigDecimal!]
  withdrawnToken1: uni_BigDecimal
  withdrawnToken1_not: uni_BigDecimal
  withdrawnToken1_gt: uni_BigDecimal
  withdrawnToken1_lt: uni_BigDecimal
  withdrawnToken1_gte: uni_BigDecimal
  withdrawnToken1_lte: uni_BigDecimal
  withdrawnToken1_in: [uni_BigDecimal!]
  withdrawnToken1_not_in: [uni_BigDecimal!]
  collectedFeesToken0: uni_BigDecimal
  collectedFeesToken0_not: uni_BigDecimal
  collectedFeesToken0_gt: uni_BigDecimal
  collectedFeesToken0_lt: uni_BigDecimal
  collectedFeesToken0_gte: uni_BigDecimal
  collectedFeesToken0_lte: uni_BigDecimal
  collectedFeesToken0_in: [uni_BigDecimal!]
  collectedFeesToken0_not_in: [uni_BigDecimal!]
  collectedFeesToken1: uni_BigDecimal
  collectedFeesToken1_not: uni_BigDecimal
  collectedFeesToken1_gt: uni_BigDecimal
  collectedFeesToken1_lt: uni_BigDecimal
  collectedFeesToken1_gte: uni_BigDecimal
  collectedFeesToken1_lte: uni_BigDecimal
  collectedFeesToken1_in: [uni_BigDecimal!]
  collectedFeesToken1_not_in: [uni_BigDecimal!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: uni_Transaction_filter
  feeGrowthInside0LastX128: BigInt
  feeGrowthInside0LastX128_not: BigInt
  feeGrowthInside0LastX128_gt: BigInt
  feeGrowthInside0LastX128_lt: BigInt
  feeGrowthInside0LastX128_gte: BigInt
  feeGrowthInside0LastX128_lte: BigInt
  feeGrowthInside0LastX128_in: [BigInt!]
  feeGrowthInside0LastX128_not_in: [BigInt!]
  feeGrowthInside1LastX128: BigInt
  feeGrowthInside1LastX128_not: BigInt
  feeGrowthInside1LastX128_gt: BigInt
  feeGrowthInside1LastX128_lt: BigInt
  feeGrowthInside1LastX128_gte: BigInt
  feeGrowthInside1LastX128_lte: BigInt
  feeGrowthInside1LastX128_in: [BigInt!]
  feeGrowthInside1LastX128_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: uni_BlockChangedFilter
  and: [uni_PositionSnapshot_filter]
  or: [uni_PositionSnapshot_filter]
}

enum uni_PositionSnapshot_orderBy {
  id
  owner
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  position
  position__id
  position__owner
  position__liquidity
  position__depositedToken0
  position__depositedToken1
  position__withdrawnToken0
  position__withdrawnToken1
  position__collectedFeesToken0
  position__collectedFeesToken1
  position__feeGrowthInside0LastX128
  position__feeGrowthInside1LastX128
  blockNumber
  timestamp
  liquidity
  depositedToken0
  depositedToken1
  withdrawnToken0
  withdrawnToken1
  collectedFeesToken0
  collectedFeesToken1
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  transaction__gasUsed
  transaction__gasPrice
  feeGrowthInside0LastX128
  feeGrowthInside1LastX128
}

input uni_Position_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  owner: uni_Bytes
  owner_not: uni_Bytes
  owner_gt: uni_Bytes
  owner_lt: uni_Bytes
  owner_gte: uni_Bytes
  owner_lte: uni_Bytes
  owner_in: [uni_Bytes!]
  owner_not_in: [uni_Bytes!]
  owner_contains: uni_Bytes
  owner_not_contains: uni_Bytes
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: uni_Pool_filter
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: uni_Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: uni_Token_filter
  tickLower: String
  tickLower_not: String
  tickLower_gt: String
  tickLower_lt: String
  tickLower_gte: String
  tickLower_lte: String
  tickLower_in: [String!]
  tickLower_not_in: [String!]
  tickLower_contains: String
  tickLower_contains_nocase: String
  tickLower_not_contains: String
  tickLower_not_contains_nocase: String
  tickLower_starts_with: String
  tickLower_starts_with_nocase: String
  tickLower_not_starts_with: String
  tickLower_not_starts_with_nocase: String
  tickLower_ends_with: String
  tickLower_ends_with_nocase: String
  tickLower_not_ends_with: String
  tickLower_not_ends_with_nocase: String
  tickLower_: uni_Tick_filter
  tickUpper: String
  tickUpper_not: String
  tickUpper_gt: String
  tickUpper_lt: String
  tickUpper_gte: String
  tickUpper_lte: String
  tickUpper_in: [String!]
  tickUpper_not_in: [String!]
  tickUpper_contains: String
  tickUpper_contains_nocase: String
  tickUpper_not_contains: String
  tickUpper_not_contains_nocase: String
  tickUpper_starts_with: String
  tickUpper_starts_with_nocase: String
  tickUpper_not_starts_with: String
  tickUpper_not_starts_with_nocase: String
  tickUpper_ends_with: String
  tickUpper_ends_with_nocase: String
  tickUpper_not_ends_with: String
  tickUpper_not_ends_with_nocase: String
  tickUpper_: uni_Tick_filter
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  depositedToken0: uni_BigDecimal
  depositedToken0_not: uni_BigDecimal
  depositedToken0_gt: uni_BigDecimal
  depositedToken0_lt: uni_BigDecimal
  depositedToken0_gte: uni_BigDecimal
  depositedToken0_lte: uni_BigDecimal
  depositedToken0_in: [uni_BigDecimal!]
  depositedToken0_not_in: [uni_BigDecimal!]
  depositedToken1: uni_BigDecimal
  depositedToken1_not: uni_BigDecimal
  depositedToken1_gt: uni_BigDecimal
  depositedToken1_lt: uni_BigDecimal
  depositedToken1_gte: uni_BigDecimal
  depositedToken1_lte: uni_BigDecimal
  depositedToken1_in: [uni_BigDecimal!]
  depositedToken1_not_in: [uni_BigDecimal!]
  withdrawnToken0: uni_BigDecimal
  withdrawnToken0_not: uni_BigDecimal
  withdrawnToken0_gt: uni_BigDecimal
  withdrawnToken0_lt: uni_BigDecimal
  withdrawnToken0_gte: uni_BigDecimal
  withdrawnToken0_lte: uni_BigDecimal
  withdrawnToken0_in: [uni_BigDecimal!]
  withdrawnToken0_not_in: [uni_BigDecimal!]
  withdrawnToken1: uni_BigDecimal
  withdrawnToken1_not: uni_BigDecimal
  withdrawnToken1_gt: uni_BigDecimal
  withdrawnToken1_lt: uni_BigDecimal
  withdrawnToken1_gte: uni_BigDecimal
  withdrawnToken1_lte: uni_BigDecimal
  withdrawnToken1_in: [uni_BigDecimal!]
  withdrawnToken1_not_in: [uni_BigDecimal!]
  collectedFeesToken0: uni_BigDecimal
  collectedFeesToken0_not: uni_BigDecimal
  collectedFeesToken0_gt: uni_BigDecimal
  collectedFeesToken0_lt: uni_BigDecimal
  collectedFeesToken0_gte: uni_BigDecimal
  collectedFeesToken0_lte: uni_BigDecimal
  collectedFeesToken0_in: [uni_BigDecimal!]
  collectedFeesToken0_not_in: [uni_BigDecimal!]
  collectedFeesToken1: uni_BigDecimal
  collectedFeesToken1_not: uni_BigDecimal
  collectedFeesToken1_gt: uni_BigDecimal
  collectedFeesToken1_lt: uni_BigDecimal
  collectedFeesToken1_gte: uni_BigDecimal
  collectedFeesToken1_lte: uni_BigDecimal
  collectedFeesToken1_in: [uni_BigDecimal!]
  collectedFeesToken1_not_in: [uni_BigDecimal!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: uni_Transaction_filter
  feeGrowthInside0LastX128: BigInt
  feeGrowthInside0LastX128_not: BigInt
  feeGrowthInside0LastX128_gt: BigInt
  feeGrowthInside0LastX128_lt: BigInt
  feeGrowthInside0LastX128_gte: BigInt
  feeGrowthInside0LastX128_lte: BigInt
  feeGrowthInside0LastX128_in: [BigInt!]
  feeGrowthInside0LastX128_not_in: [BigInt!]
  feeGrowthInside1LastX128: BigInt
  feeGrowthInside1LastX128_not: BigInt
  feeGrowthInside1LastX128_gt: BigInt
  feeGrowthInside1LastX128_lt: BigInt
  feeGrowthInside1LastX128_gte: BigInt
  feeGrowthInside1LastX128_lte: BigInt
  feeGrowthInside1LastX128_in: [BigInt!]
  feeGrowthInside1LastX128_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: uni_BlockChangedFilter
  and: [uni_Position_filter]
  or: [uni_Position_filter]
}

enum uni_Position_orderBy {
  id
  owner
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  token0
  token0__id
  token0__symbol
  token0__name
  token0__decimals
  token0__totalSupply
  token0__volume
  token0__volumeUSD
  token0__untrackedVolumeUSD
  token0__feesUSD
  token0__txCount
  token0__poolCount
  token0__totalValueLocked
  token0__totalValueLockedUSD
  token0__totalValueLockedUSDUntracked
  token0__derivedETH
  token1
  token1__id
  token1__symbol
  token1__name
  token1__decimals
  token1__totalSupply
  token1__volume
  token1__volumeUSD
  token1__untrackedVolumeUSD
  token1__feesUSD
  token1__txCount
  token1__poolCount
  token1__totalValueLocked
  token1__totalValueLockedUSD
  token1__totalValueLockedUSDUntracked
  token1__derivedETH
  tickLower
  tickLower__id
  tickLower__poolAddress
  tickLower__tickIdx
  tickLower__liquidityGross
  tickLower__liquidityNet
  tickLower__price0
  tickLower__price1
  tickLower__volumeToken0
  tickLower__volumeToken1
  tickLower__volumeUSD
  tickLower__untrackedVolumeUSD
  tickLower__feesUSD
  tickLower__collectedFeesToken0
  tickLower__collectedFeesToken1
  tickLower__collectedFeesUSD
  tickLower__createdAtTimestamp
  tickLower__createdAtBlockNumber
  tickLower__liquidityProviderCount
  tickLower__feeGrowthOutside0X128
  tickLower__feeGrowthOutside1X128
  tickUpper
  tickUpper__id
  tickUpper__poolAddress
  tickUpper__tickIdx
  tickUpper__liquidityGross
  tickUpper__liquidityNet
  tickUpper__price0
  tickUpper__price1
  tickUpper__volumeToken0
  tickUpper__volumeToken1
  tickUpper__volumeUSD
  tickUpper__untrackedVolumeUSD
  tickUpper__feesUSD
  tickUpper__collectedFeesToken0
  tickUpper__collectedFeesToken1
  tickUpper__collectedFeesUSD
  tickUpper__createdAtTimestamp
  tickUpper__createdAtBlockNumber
  tickUpper__liquidityProviderCount
  tickUpper__feeGrowthOutside0X128
  tickUpper__feeGrowthOutside1X128
  liquidity
  depositedToken0
  depositedToken1
  withdrawnToken0
  withdrawnToken1
  collectedFeesToken0
  collectedFeesToken1
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  transaction__gasUsed
  transaction__gasPrice
  feeGrowthInside0LastX128
  feeGrowthInside1LastX128
}

type uni_Swap {
  id: ID!
  transaction: uni_Transaction!
  timestamp: BigInt!
  pool: uni_Pool!
  token0: uni_Token!
  token1: uni_Token!
  sender: uni_Bytes!
  recipient: uni_Bytes!
  origin: uni_Bytes!
  amount0: uni_BigDecimal!
  amount1: uni_BigDecimal!
  amountUSD: uni_BigDecimal!
  sqrtPriceX96: BigInt!
  tick: BigInt!
  logIndex: BigInt
}

input uni_Swap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: uni_Transaction_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: uni_Pool_filter
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: uni_Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: uni_Token_filter
  sender: uni_Bytes
  sender_not: uni_Bytes
  sender_gt: uni_Bytes
  sender_lt: uni_Bytes
  sender_gte: uni_Bytes
  sender_lte: uni_Bytes
  sender_in: [uni_Bytes!]
  sender_not_in: [uni_Bytes!]
  sender_contains: uni_Bytes
  sender_not_contains: uni_Bytes
  recipient: uni_Bytes
  recipient_not: uni_Bytes
  recipient_gt: uni_Bytes
  recipient_lt: uni_Bytes
  recipient_gte: uni_Bytes
  recipient_lte: uni_Bytes
  recipient_in: [uni_Bytes!]
  recipient_not_in: [uni_Bytes!]
  recipient_contains: uni_Bytes
  recipient_not_contains: uni_Bytes
  origin: uni_Bytes
  origin_not: uni_Bytes
  origin_gt: uni_Bytes
  origin_lt: uni_Bytes
  origin_gte: uni_Bytes
  origin_lte: uni_Bytes
  origin_in: [uni_Bytes!]
  origin_not_in: [uni_Bytes!]
  origin_contains: uni_Bytes
  origin_not_contains: uni_Bytes
  amount0: uni_BigDecimal
  amount0_not: uni_BigDecimal
  amount0_gt: uni_BigDecimal
  amount0_lt: uni_BigDecimal
  amount0_gte: uni_BigDecimal
  amount0_lte: uni_BigDecimal
  amount0_in: [uni_BigDecimal!]
  amount0_not_in: [uni_BigDecimal!]
  amount1: uni_BigDecimal
  amount1_not: uni_BigDecimal
  amount1_gt: uni_BigDecimal
  amount1_lt: uni_BigDecimal
  amount1_gte: uni_BigDecimal
  amount1_lte: uni_BigDecimal
  amount1_in: [uni_BigDecimal!]
  amount1_not_in: [uni_BigDecimal!]
  amountUSD: uni_BigDecimal
  amountUSD_not: uni_BigDecimal
  amountUSD_gt: uni_BigDecimal
  amountUSD_lt: uni_BigDecimal
  amountUSD_gte: uni_BigDecimal
  amountUSD_lte: uni_BigDecimal
  amountUSD_in: [uni_BigDecimal!]
  amountUSD_not_in: [uni_BigDecimal!]
  sqrtPriceX96: BigInt
  sqrtPriceX96_not: BigInt
  sqrtPriceX96_gt: BigInt
  sqrtPriceX96_lt: BigInt
  sqrtPriceX96_gte: BigInt
  sqrtPriceX96_lte: BigInt
  sqrtPriceX96_in: [BigInt!]
  sqrtPriceX96_not_in: [BigInt!]
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: uni_BlockChangedFilter
  and: [uni_Swap_filter]
  or: [uni_Swap_filter]
}

enum uni_Swap_orderBy {
  id
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  transaction__gasUsed
  transaction__gasPrice
  timestamp
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  token0
  token0__id
  token0__symbol
  token0__name
  token0__decimals
  token0__totalSupply
  token0__volume
  token0__volumeUSD
  token0__untrackedVolumeUSD
  token0__feesUSD
  token0__txCount
  token0__poolCount
  token0__totalValueLocked
  token0__totalValueLockedUSD
  token0__totalValueLockedUSDUntracked
  token0__derivedETH
  token1
  token1__id
  token1__symbol
  token1__name
  token1__decimals
  token1__totalSupply
  token1__volume
  token1__volumeUSD
  token1__untrackedVolumeUSD
  token1__feesUSD
  token1__txCount
  token1__poolCount
  token1__totalValueLocked
  token1__totalValueLockedUSD
  token1__totalValueLockedUSDUntracked
  token1__derivedETH
  sender
  recipient
  origin
  amount0
  amount1
  amountUSD
  sqrtPriceX96
  tick
  logIndex
}

type uni_Tick {
  id: ID!
  poolAddress: String
  tickIdx: BigInt!
  pool: uni_Pool!
  liquidityGross: BigInt!
  liquidityNet: BigInt!
  price0: uni_BigDecimal!
  price1: uni_BigDecimal!
  volumeToken0: uni_BigDecimal!
  volumeToken1: uni_BigDecimal!
  volumeUSD: uni_BigDecimal!
  untrackedVolumeUSD: uni_BigDecimal!
  feesUSD: uni_BigDecimal!
  collectedFeesToken0: uni_BigDecimal!
  collectedFeesToken1: uni_BigDecimal!
  collectedFeesUSD: uni_BigDecimal!
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
  liquidityProviderCount: BigInt!
  feeGrowthOutside0X128: BigInt!
  feeGrowthOutside1X128: BigInt!
}

type uni_TickDayData {
  id: ID!
  date: Int!
  pool: uni_Pool!
  tick: uni_Tick!
  liquidityGross: BigInt!
  liquidityNet: BigInt!
  volumeToken0: uni_BigDecimal!
  volumeToken1: uni_BigDecimal!
  volumeUSD: uni_BigDecimal!
  feesUSD: uni_BigDecimal!
  feeGrowthOutside0X128: BigInt!
  feeGrowthOutside1X128: BigInt!
}

input uni_TickDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: uni_Pool_filter
  tick: String
  tick_not: String
  tick_gt: String
  tick_lt: String
  tick_gte: String
  tick_lte: String
  tick_in: [String!]
  tick_not_in: [String!]
  tick_contains: String
  tick_contains_nocase: String
  tick_not_contains: String
  tick_not_contains_nocase: String
  tick_starts_with: String
  tick_starts_with_nocase: String
  tick_not_starts_with: String
  tick_not_starts_with_nocase: String
  tick_ends_with: String
  tick_ends_with_nocase: String
  tick_not_ends_with: String
  tick_not_ends_with_nocase: String
  tick_: uni_Tick_filter
  liquidityGross: BigInt
  liquidityGross_not: BigInt
  liquidityGross_gt: BigInt
  liquidityGross_lt: BigInt
  liquidityGross_gte: BigInt
  liquidityGross_lte: BigInt
  liquidityGross_in: [BigInt!]
  liquidityGross_not_in: [BigInt!]
  liquidityNet: BigInt
  liquidityNet_not: BigInt
  liquidityNet_gt: BigInt
  liquidityNet_lt: BigInt
  liquidityNet_gte: BigInt
  liquidityNet_lte: BigInt
  liquidityNet_in: [BigInt!]
  liquidityNet_not_in: [BigInt!]
  volumeToken0: uni_BigDecimal
  volumeToken0_not: uni_BigDecimal
  volumeToken0_gt: uni_BigDecimal
  volumeToken0_lt: uni_BigDecimal
  volumeToken0_gte: uni_BigDecimal
  volumeToken0_lte: uni_BigDecimal
  volumeToken0_in: [uni_BigDecimal!]
  volumeToken0_not_in: [uni_BigDecimal!]
  volumeToken1: uni_BigDecimal
  volumeToken1_not: uni_BigDecimal
  volumeToken1_gt: uni_BigDecimal
  volumeToken1_lt: uni_BigDecimal
  volumeToken1_gte: uni_BigDecimal
  volumeToken1_lte: uni_BigDecimal
  volumeToken1_in: [uni_BigDecimal!]
  volumeToken1_not_in: [uni_BigDecimal!]
  volumeUSD: uni_BigDecimal
  volumeUSD_not: uni_BigDecimal
  volumeUSD_gt: uni_BigDecimal
  volumeUSD_lt: uni_BigDecimal
  volumeUSD_gte: uni_BigDecimal
  volumeUSD_lte: uni_BigDecimal
  volumeUSD_in: [uni_BigDecimal!]
  volumeUSD_not_in: [uni_BigDecimal!]
  feesUSD: uni_BigDecimal
  feesUSD_not: uni_BigDecimal
  feesUSD_gt: uni_BigDecimal
  feesUSD_lt: uni_BigDecimal
  feesUSD_gte: uni_BigDecimal
  feesUSD_lte: uni_BigDecimal
  feesUSD_in: [uni_BigDecimal!]
  feesUSD_not_in: [uni_BigDecimal!]
  feeGrowthOutside0X128: BigInt
  feeGrowthOutside0X128_not: BigInt
  feeGrowthOutside0X128_gt: BigInt
  feeGrowthOutside0X128_lt: BigInt
  feeGrowthOutside0X128_gte: BigInt
  feeGrowthOutside0X128_lte: BigInt
  feeGrowthOutside0X128_in: [BigInt!]
  feeGrowthOutside0X128_not_in: [BigInt!]
  feeGrowthOutside1X128: BigInt
  feeGrowthOutside1X128_not: BigInt
  feeGrowthOutside1X128_gt: BigInt
  feeGrowthOutside1X128_lt: BigInt
  feeGrowthOutside1X128_gte: BigInt
  feeGrowthOutside1X128_lte: BigInt
  feeGrowthOutside1X128_in: [BigInt!]
  feeGrowthOutside1X128_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: uni_BlockChangedFilter
  and: [uni_TickDayData_filter]
  or: [uni_TickDayData_filter]
}

enum uni_TickDayData_orderBy {
  id
  date
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  tick
  tick__id
  tick__poolAddress
  tick__tickIdx
  tick__liquidityGross
  tick__liquidityNet
  tick__price0
  tick__price1
  tick__volumeToken0
  tick__volumeToken1
  tick__volumeUSD
  tick__untrackedVolumeUSD
  tick__feesUSD
  tick__collectedFeesToken0
  tick__collectedFeesToken1
  tick__collectedFeesUSD
  tick__createdAtTimestamp
  tick__createdAtBlockNumber
  tick__liquidityProviderCount
  tick__feeGrowthOutside0X128
  tick__feeGrowthOutside1X128
  liquidityGross
  liquidityNet
  volumeToken0
  volumeToken1
  volumeUSD
  feesUSD
  feeGrowthOutside0X128
  feeGrowthOutside1X128
}

type uni_TickHourData {
  id: ID!
  periodStartUnix: Int!
  pool: uni_Pool!
  tick: uni_Tick!
  liquidityGross: BigInt!
  liquidityNet: BigInt!
  volumeToken0: uni_BigDecimal!
  volumeToken1: uni_BigDecimal!
  volumeUSD: uni_BigDecimal!
  feesUSD: uni_BigDecimal!
}

input uni_TickHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  periodStartUnix: Int
  periodStartUnix_not: Int
  periodStartUnix_gt: Int
  periodStartUnix_lt: Int
  periodStartUnix_gte: Int
  periodStartUnix_lte: Int
  periodStartUnix_in: [Int!]
  periodStartUnix_not_in: [Int!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: uni_Pool_filter
  tick: String
  tick_not: String
  tick_gt: String
  tick_lt: String
  tick_gte: String
  tick_lte: String
  tick_in: [String!]
  tick_not_in: [String!]
  tick_contains: String
  tick_contains_nocase: String
  tick_not_contains: String
  tick_not_contains_nocase: String
  tick_starts_with: String
  tick_starts_with_nocase: String
  tick_not_starts_with: String
  tick_not_starts_with_nocase: String
  tick_ends_with: String
  tick_ends_with_nocase: String
  tick_not_ends_with: String
  tick_not_ends_with_nocase: String
  tick_: uni_Tick_filter
  liquidityGross: BigInt
  liquidityGross_not: BigInt
  liquidityGross_gt: BigInt
  liquidityGross_lt: BigInt
  liquidityGross_gte: BigInt
  liquidityGross_lte: BigInt
  liquidityGross_in: [BigInt!]
  liquidityGross_not_in: [BigInt!]
  liquidityNet: BigInt
  liquidityNet_not: BigInt
  liquidityNet_gt: BigInt
  liquidityNet_lt: BigInt
  liquidityNet_gte: BigInt
  liquidityNet_lte: BigInt
  liquidityNet_in: [BigInt!]
  liquidityNet_not_in: [BigInt!]
  volumeToken0: uni_BigDecimal
  volumeToken0_not: uni_BigDecimal
  volumeToken0_gt: uni_BigDecimal
  volumeToken0_lt: uni_BigDecimal
  volumeToken0_gte: uni_BigDecimal
  volumeToken0_lte: uni_BigDecimal
  volumeToken0_in: [uni_BigDecimal!]
  volumeToken0_not_in: [uni_BigDecimal!]
  volumeToken1: uni_BigDecimal
  volumeToken1_not: uni_BigDecimal
  volumeToken1_gt: uni_BigDecimal
  volumeToken1_lt: uni_BigDecimal
  volumeToken1_gte: uni_BigDecimal
  volumeToken1_lte: uni_BigDecimal
  volumeToken1_in: [uni_BigDecimal!]
  volumeToken1_not_in: [uni_BigDecimal!]
  volumeUSD: uni_BigDecimal
  volumeUSD_not: uni_BigDecimal
  volumeUSD_gt: uni_BigDecimal
  volumeUSD_lt: uni_BigDecimal
  volumeUSD_gte: uni_BigDecimal
  volumeUSD_lte: uni_BigDecimal
  volumeUSD_in: [uni_BigDecimal!]
  volumeUSD_not_in: [uni_BigDecimal!]
  feesUSD: uni_BigDecimal
  feesUSD_not: uni_BigDecimal
  feesUSD_gt: uni_BigDecimal
  feesUSD_lt: uni_BigDecimal
  feesUSD_gte: uni_BigDecimal
  feesUSD_lte: uni_BigDecimal
  feesUSD_in: [uni_BigDecimal!]
  feesUSD_not_in: [uni_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: uni_BlockChangedFilter
  and: [uni_TickHourData_filter]
  or: [uni_TickHourData_filter]
}

enum uni_TickHourData_orderBy {
  id
  periodStartUnix
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  tick
  tick__id
  tick__poolAddress
  tick__tickIdx
  tick__liquidityGross
  tick__liquidityNet
  tick__price0
  tick__price1
  tick__volumeToken0
  tick__volumeToken1
  tick__volumeUSD
  tick__untrackedVolumeUSD
  tick__feesUSD
  tick__collectedFeesToken0
  tick__collectedFeesToken1
  tick__collectedFeesUSD
  tick__createdAtTimestamp
  tick__createdAtBlockNumber
  tick__liquidityProviderCount
  tick__feeGrowthOutside0X128
  tick__feeGrowthOutside1X128
  liquidityGross
  liquidityNet
  volumeToken0
  volumeToken1
  volumeUSD
  feesUSD
}

input uni_Tick_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  poolAddress: String
  poolAddress_not: String
  poolAddress_gt: String
  poolAddress_lt: String
  poolAddress_gte: String
  poolAddress_lte: String
  poolAddress_in: [String!]
  poolAddress_not_in: [String!]
  poolAddress_contains: String
  poolAddress_contains_nocase: String
  poolAddress_not_contains: String
  poolAddress_not_contains_nocase: String
  poolAddress_starts_with: String
  poolAddress_starts_with_nocase: String
  poolAddress_not_starts_with: String
  poolAddress_not_starts_with_nocase: String
  poolAddress_ends_with: String
  poolAddress_ends_with_nocase: String
  poolAddress_not_ends_with: String
  poolAddress_not_ends_with_nocase: String
  tickIdx: BigInt
  tickIdx_not: BigInt
  tickIdx_gt: BigInt
  tickIdx_lt: BigInt
  tickIdx_gte: BigInt
  tickIdx_lte: BigInt
  tickIdx_in: [BigInt!]
  tickIdx_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: uni_Pool_filter
  liquidityGross: BigInt
  liquidityGross_not: BigInt
  liquidityGross_gt: BigInt
  liquidityGross_lt: BigInt
  liquidityGross_gte: BigInt
  liquidityGross_lte: BigInt
  liquidityGross_in: [BigInt!]
  liquidityGross_not_in: [BigInt!]
  liquidityNet: BigInt
  liquidityNet_not: BigInt
  liquidityNet_gt: BigInt
  liquidityNet_lt: BigInt
  liquidityNet_gte: BigInt
  liquidityNet_lte: BigInt
  liquidityNet_in: [BigInt!]
  liquidityNet_not_in: [BigInt!]
  price0: uni_BigDecimal
  price0_not: uni_BigDecimal
  price0_gt: uni_BigDecimal
  price0_lt: uni_BigDecimal
  price0_gte: uni_BigDecimal
  price0_lte: uni_BigDecimal
  price0_in: [uni_BigDecimal!]
  price0_not_in: [uni_BigDecimal!]
  price1: uni_BigDecimal
  price1_not: uni_BigDecimal
  price1_gt: uni_BigDecimal
  price1_lt: uni_BigDecimal
  price1_gte: uni_BigDecimal
  price1_lte: uni_BigDecimal
  price1_in: [uni_BigDecimal!]
  price1_not_in: [uni_BigDecimal!]
  volumeToken0: uni_BigDecimal
  volumeToken0_not: uni_BigDecimal
  volumeToken0_gt: uni_BigDecimal
  volumeToken0_lt: uni_BigDecimal
  volumeToken0_gte: uni_BigDecimal
  volumeToken0_lte: uni_BigDecimal
  volumeToken0_in: [uni_BigDecimal!]
  volumeToken0_not_in: [uni_BigDecimal!]
  volumeToken1: uni_BigDecimal
  volumeToken1_not: uni_BigDecimal
  volumeToken1_gt: uni_BigDecimal
  volumeToken1_lt: uni_BigDecimal
  volumeToken1_gte: uni_BigDecimal
  volumeToken1_lte: uni_BigDecimal
  volumeToken1_in: [uni_BigDecimal!]
  volumeToken1_not_in: [uni_BigDecimal!]
  volumeUSD: uni_BigDecimal
  volumeUSD_not: uni_BigDecimal
  volumeUSD_gt: uni_BigDecimal
  volumeUSD_lt: uni_BigDecimal
  volumeUSD_gte: uni_BigDecimal
  volumeUSD_lte: uni_BigDecimal
  volumeUSD_in: [uni_BigDecimal!]
  volumeUSD_not_in: [uni_BigDecimal!]
  untrackedVolumeUSD: uni_BigDecimal
  untrackedVolumeUSD_not: uni_BigDecimal
  untrackedVolumeUSD_gt: uni_BigDecimal
  untrackedVolumeUSD_lt: uni_BigDecimal
  untrackedVolumeUSD_gte: uni_BigDecimal
  untrackedVolumeUSD_lte: uni_BigDecimal
  untrackedVolumeUSD_in: [uni_BigDecimal!]
  untrackedVolumeUSD_not_in: [uni_BigDecimal!]
  feesUSD: uni_BigDecimal
  feesUSD_not: uni_BigDecimal
  feesUSD_gt: uni_BigDecimal
  feesUSD_lt: uni_BigDecimal
  feesUSD_gte: uni_BigDecimal
  feesUSD_lte: uni_BigDecimal
  feesUSD_in: [uni_BigDecimal!]
  feesUSD_not_in: [uni_BigDecimal!]
  collectedFeesToken0: uni_BigDecimal
  collectedFeesToken0_not: uni_BigDecimal
  collectedFeesToken0_gt: uni_BigDecimal
  collectedFeesToken0_lt: uni_BigDecimal
  collectedFeesToken0_gte: uni_BigDecimal
  collectedFeesToken0_lte: uni_BigDecimal
  collectedFeesToken0_in: [uni_BigDecimal!]
  collectedFeesToken0_not_in: [uni_BigDecimal!]
  collectedFeesToken1: uni_BigDecimal
  collectedFeesToken1_not: uni_BigDecimal
  collectedFeesToken1_gt: uni_BigDecimal
  collectedFeesToken1_lt: uni_BigDecimal
  collectedFeesToken1_gte: uni_BigDecimal
  collectedFeesToken1_lte: uni_BigDecimal
  collectedFeesToken1_in: [uni_BigDecimal!]
  collectedFeesToken1_not_in: [uni_BigDecimal!]
  collectedFeesUSD: uni_BigDecimal
  collectedFeesUSD_not: uni_BigDecimal
  collectedFeesUSD_gt: uni_BigDecimal
  collectedFeesUSD_lt: uni_BigDecimal
  collectedFeesUSD_gte: uni_BigDecimal
  collectedFeesUSD_lte: uni_BigDecimal
  collectedFeesUSD_in: [uni_BigDecimal!]
  collectedFeesUSD_not_in: [uni_BigDecimal!]
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  createdAtBlockNumber: BigInt
  createdAtBlockNumber_not: BigInt
  createdAtBlockNumber_gt: BigInt
  createdAtBlockNumber_lt: BigInt
  createdAtBlockNumber_gte: BigInt
  createdAtBlockNumber_lte: BigInt
  createdAtBlockNumber_in: [BigInt!]
  createdAtBlockNumber_not_in: [BigInt!]
  liquidityProviderCount: BigInt
  liquidityProviderCount_not: BigInt
  liquidityProviderCount_gt: BigInt
  liquidityProviderCount_lt: BigInt
  liquidityProviderCount_gte: BigInt
  liquidityProviderCount_lte: BigInt
  liquidityProviderCount_in: [BigInt!]
  liquidityProviderCount_not_in: [BigInt!]
  feeGrowthOutside0X128: BigInt
  feeGrowthOutside0X128_not: BigInt
  feeGrowthOutside0X128_gt: BigInt
  feeGrowthOutside0X128_lt: BigInt
  feeGrowthOutside0X128_gte: BigInt
  feeGrowthOutside0X128_lte: BigInt
  feeGrowthOutside0X128_in: [BigInt!]
  feeGrowthOutside0X128_not_in: [BigInt!]
  feeGrowthOutside1X128: BigInt
  feeGrowthOutside1X128_not: BigInt
  feeGrowthOutside1X128_gt: BigInt
  feeGrowthOutside1X128_lt: BigInt
  feeGrowthOutside1X128_gte: BigInt
  feeGrowthOutside1X128_lte: BigInt
  feeGrowthOutside1X128_in: [BigInt!]
  feeGrowthOutside1X128_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: uni_BlockChangedFilter
  and: [uni_Tick_filter]
  or: [uni_Tick_filter]
}

enum uni_Tick_orderBy {
  id
  poolAddress
  tickIdx
  pool
  pool__id
  pool__createdAtTimestamp
  pool__createdAtBlockNumber
  pool__feeTier
  pool__liquidity
  pool__sqrtPrice
  pool__feeGrowthGlobal0X128
  pool__feeGrowthGlobal1X128
  pool__token0Price
  pool__token1Price
  pool__tick
  pool__observationIndex
  pool__volumeToken0
  pool__volumeToken1
  pool__volumeUSD
  pool__untrackedVolumeUSD
  pool__feesUSD
  pool__txCount
  pool__collectedFeesToken0
  pool__collectedFeesToken1
  pool__collectedFeesUSD
  pool__totalValueLockedToken0
  pool__totalValueLockedToken1
  pool__totalValueLockedETH
  pool__totalValueLockedUSD
  pool__totalValueLockedUSDUntracked
  pool__liquidityProviderCount
  liquidityGross
  liquidityNet
  price0
  price1
  volumeToken0
  volumeToken1
  volumeUSD
  untrackedVolumeUSD
  feesUSD
  collectedFeesToken0
  collectedFeesToken1
  collectedFeesUSD
  createdAtTimestamp
  createdAtBlockNumber
  liquidityProviderCount
  feeGrowthOutside0X128
  feeGrowthOutside1X128
}

type uni_Token {
  id: ID!
  symbol: String!
  name: String!
  decimals: BigInt!
  totalSupply: BigInt!
  volume: uni_BigDecimal!
  volumeUSD: uni_BigDecimal!
  untrackedVolumeUSD: uni_BigDecimal!
  feesUSD: uni_BigDecimal!
  txCount: BigInt!
  poolCount: BigInt!
  totalValueLocked: uni_BigDecimal!
  totalValueLockedUSD: uni_BigDecimal!
  totalValueLockedUSDUntracked: uni_BigDecimal!
  derivedETH: uni_BigDecimal!
  whitelistPools(skip: Int = 0, first: Int = 100, orderBy: uni_Pool_orderBy, orderDirection: uni_OrderDirection, where: uni_Pool_filter): [uni_Pool!]!
  tokenDayData(skip: Int = 0, first: Int = 100, orderBy: uni_TokenDayData_orderBy, orderDirection: uni_OrderDirection, where: uni_TokenDayData_filter): [uni_TokenDayData!]!
}

type uni_TokenDayData {
  id: ID!
  date: Int!
  token: uni_Token!
  volume: uni_BigDecimal!
  volumeUSD: uni_BigDecimal!
  untrackedVolumeUSD: uni_BigDecimal!
  totalValueLocked: uni_BigDecimal!
  totalValueLockedUSD: uni_BigDecimal!
  priceUSD: uni_BigDecimal!
  feesUSD: uni_BigDecimal!
  open: uni_BigDecimal!
  high: uni_BigDecimal!
  low: uni_BigDecimal!
  close: uni_BigDecimal!
}

input uni_TokenDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: uni_Token_filter
  volume: uni_BigDecimal
  volume_not: uni_BigDecimal
  volume_gt: uni_BigDecimal
  volume_lt: uni_BigDecimal
  volume_gte: uni_BigDecimal
  volume_lte: uni_BigDecimal
  volume_in: [uni_BigDecimal!]
  volume_not_in: [uni_BigDecimal!]
  volumeUSD: uni_BigDecimal
  volumeUSD_not: uni_BigDecimal
  volumeUSD_gt: uni_BigDecimal
  volumeUSD_lt: uni_BigDecimal
  volumeUSD_gte: uni_BigDecimal
  volumeUSD_lte: uni_BigDecimal
  volumeUSD_in: [uni_BigDecimal!]
  volumeUSD_not_in: [uni_BigDecimal!]
  untrackedVolumeUSD: uni_BigDecimal
  untrackedVolumeUSD_not: uni_BigDecimal
  untrackedVolumeUSD_gt: uni_BigDecimal
  untrackedVolumeUSD_lt: uni_BigDecimal
  untrackedVolumeUSD_gte: uni_BigDecimal
  untrackedVolumeUSD_lte: uni_BigDecimal
  untrackedVolumeUSD_in: [uni_BigDecimal!]
  untrackedVolumeUSD_not_in: [uni_BigDecimal!]
  totalValueLocked: uni_BigDecimal
  totalValueLocked_not: uni_BigDecimal
  totalValueLocked_gt: uni_BigDecimal
  totalValueLocked_lt: uni_BigDecimal
  totalValueLocked_gte: uni_BigDecimal
  totalValueLocked_lte: uni_BigDecimal
  totalValueLocked_in: [uni_BigDecimal!]
  totalValueLocked_not_in: [uni_BigDecimal!]
  totalValueLockedUSD: uni_BigDecimal
  totalValueLockedUSD_not: uni_BigDecimal
  totalValueLockedUSD_gt: uni_BigDecimal
  totalValueLockedUSD_lt: uni_BigDecimal
  totalValueLockedUSD_gte: uni_BigDecimal
  totalValueLockedUSD_lte: uni_BigDecimal
  totalValueLockedUSD_in: [uni_BigDecimal!]
  totalValueLockedUSD_not_in: [uni_BigDecimal!]
  priceUSD: uni_BigDecimal
  priceUSD_not: uni_BigDecimal
  priceUSD_gt: uni_BigDecimal
  priceUSD_lt: uni_BigDecimal
  priceUSD_gte: uni_BigDecimal
  priceUSD_lte: uni_BigDecimal
  priceUSD_in: [uni_BigDecimal!]
  priceUSD_not_in: [uni_BigDecimal!]
  feesUSD: uni_BigDecimal
  feesUSD_not: uni_BigDecimal
  feesUSD_gt: uni_BigDecimal
  feesUSD_lt: uni_BigDecimal
  feesUSD_gte: uni_BigDecimal
  feesUSD_lte: uni_BigDecimal
  feesUSD_in: [uni_BigDecimal!]
  feesUSD_not_in: [uni_BigDecimal!]
  open: uni_BigDecimal
  open_not: uni_BigDecimal
  open_gt: uni_BigDecimal
  open_lt: uni_BigDecimal
  open_gte: uni_BigDecimal
  open_lte: uni_BigDecimal
  open_in: [uni_BigDecimal!]
  open_not_in: [uni_BigDecimal!]
  high: uni_BigDecimal
  high_not: uni_BigDecimal
  high_gt: uni_BigDecimal
  high_lt: uni_BigDecimal
  high_gte: uni_BigDecimal
  high_lte: uni_BigDecimal
  high_in: [uni_BigDecimal!]
  high_not_in: [uni_BigDecimal!]
  low: uni_BigDecimal
  low_not: uni_BigDecimal
  low_gt: uni_BigDecimal
  low_lt: uni_BigDecimal
  low_gte: uni_BigDecimal
  low_lte: uni_BigDecimal
  low_in: [uni_BigDecimal!]
  low_not_in: [uni_BigDecimal!]
  close: uni_BigDecimal
  close_not: uni_BigDecimal
  close_gt: uni_BigDecimal
  close_lt: uni_BigDecimal
  close_gte: uni_BigDecimal
  close_lte: uni_BigDecimal
  close_in: [uni_BigDecimal!]
  close_not_in: [uni_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: uni_BlockChangedFilter
  and: [uni_TokenDayData_filter]
  or: [uni_TokenDayData_filter]
}

enum uni_TokenDayData_orderBy {
  id
  date
  token
  token__id
  token__symbol
  token__name
  token__decimals
  token__totalSupply
  token__volume
  token__volumeUSD
  token__untrackedVolumeUSD
  token__feesUSD
  token__txCount
  token__poolCount
  token__totalValueLocked
  token__totalValueLockedUSD
  token__totalValueLockedUSDUntracked
  token__derivedETH
  volume
  volumeUSD
  untrackedVolumeUSD
  totalValueLocked
  totalValueLockedUSD
  priceUSD
  feesUSD
  open
  high
  low
  close
}

type uni_TokenHourData {
  id: ID!
  periodStartUnix: Int!
  token: uni_Token!
  volume: uni_BigDecimal!
  volumeUSD: uni_BigDecimal!
  untrackedVolumeUSD: uni_BigDecimal!
  totalValueLocked: uni_BigDecimal!
  totalValueLockedUSD: uni_BigDecimal!
  priceUSD: uni_BigDecimal!
  feesUSD: uni_BigDecimal!
  open: uni_BigDecimal!
  high: uni_BigDecimal!
  low: uni_BigDecimal!
  close: uni_BigDecimal!
}

input uni_TokenHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  periodStartUnix: Int
  periodStartUnix_not: Int
  periodStartUnix_gt: Int
  periodStartUnix_lt: Int
  periodStartUnix_gte: Int
  periodStartUnix_lte: Int
  periodStartUnix_in: [Int!]
  periodStartUnix_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: uni_Token_filter
  volume: uni_BigDecimal
  volume_not: uni_BigDecimal
  volume_gt: uni_BigDecimal
  volume_lt: uni_BigDecimal
  volume_gte: uni_BigDecimal
  volume_lte: uni_BigDecimal
  volume_in: [uni_BigDecimal!]
  volume_not_in: [uni_BigDecimal!]
  volumeUSD: uni_BigDecimal
  volumeUSD_not: uni_BigDecimal
  volumeUSD_gt: uni_BigDecimal
  volumeUSD_lt: uni_BigDecimal
  volumeUSD_gte: uni_BigDecimal
  volumeUSD_lte: uni_BigDecimal
  volumeUSD_in: [uni_BigDecimal!]
  volumeUSD_not_in: [uni_BigDecimal!]
  untrackedVolumeUSD: uni_BigDecimal
  untrackedVolumeUSD_not: uni_BigDecimal
  untrackedVolumeUSD_gt: uni_BigDecimal
  untrackedVolumeUSD_lt: uni_BigDecimal
  untrackedVolumeUSD_gte: uni_BigDecimal
  untrackedVolumeUSD_lte: uni_BigDecimal
  untrackedVolumeUSD_in: [uni_BigDecimal!]
  untrackedVolumeUSD_not_in: [uni_BigDecimal!]
  totalValueLocked: uni_BigDecimal
  totalValueLocked_not: uni_BigDecimal
  totalValueLocked_gt: uni_BigDecimal
  totalValueLocked_lt: uni_BigDecimal
  totalValueLocked_gte: uni_BigDecimal
  totalValueLocked_lte: uni_BigDecimal
  totalValueLocked_in: [uni_BigDecimal!]
  totalValueLocked_not_in: [uni_BigDecimal!]
  totalValueLockedUSD: uni_BigDecimal
  totalValueLockedUSD_not: uni_BigDecimal
  totalValueLockedUSD_gt: uni_BigDecimal
  totalValueLockedUSD_lt: uni_BigDecimal
  totalValueLockedUSD_gte: uni_BigDecimal
  totalValueLockedUSD_lte: uni_BigDecimal
  totalValueLockedUSD_in: [uni_BigDecimal!]
  totalValueLockedUSD_not_in: [uni_BigDecimal!]
  priceUSD: uni_BigDecimal
  priceUSD_not: uni_BigDecimal
  priceUSD_gt: uni_BigDecimal
  priceUSD_lt: uni_BigDecimal
  priceUSD_gte: uni_BigDecimal
  priceUSD_lte: uni_BigDecimal
  priceUSD_in: [uni_BigDecimal!]
  priceUSD_not_in: [uni_BigDecimal!]
  feesUSD: uni_BigDecimal
  feesUSD_not: uni_BigDecimal
  feesUSD_gt: uni_BigDecimal
  feesUSD_lt: uni_BigDecimal
  feesUSD_gte: uni_BigDecimal
  feesUSD_lte: uni_BigDecimal
  feesUSD_in: [uni_BigDecimal!]
  feesUSD_not_in: [uni_BigDecimal!]
  open: uni_BigDecimal
  open_not: uni_BigDecimal
  open_gt: uni_BigDecimal
  open_lt: uni_BigDecimal
  open_gte: uni_BigDecimal
  open_lte: uni_BigDecimal
  open_in: [uni_BigDecimal!]
  open_not_in: [uni_BigDecimal!]
  high: uni_BigDecimal
  high_not: uni_BigDecimal
  high_gt: uni_BigDecimal
  high_lt: uni_BigDecimal
  high_gte: uni_BigDecimal
  high_lte: uni_BigDecimal
  high_in: [uni_BigDecimal!]
  high_not_in: [uni_BigDecimal!]
  low: uni_BigDecimal
  low_not: uni_BigDecimal
  low_gt: uni_BigDecimal
  low_lt: uni_BigDecimal
  low_gte: uni_BigDecimal
  low_lte: uni_BigDecimal
  low_in: [uni_BigDecimal!]
  low_not_in: [uni_BigDecimal!]
  close: uni_BigDecimal
  close_not: uni_BigDecimal
  close_gt: uni_BigDecimal
  close_lt: uni_BigDecimal
  close_gte: uni_BigDecimal
  close_lte: uni_BigDecimal
  close_in: [uni_BigDecimal!]
  close_not_in: [uni_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: uni_BlockChangedFilter
  and: [uni_TokenHourData_filter]
  or: [uni_TokenHourData_filter]
}

enum uni_TokenHourData_orderBy {
  id
  periodStartUnix
  token
  token__id
  token__symbol
  token__name
  token__decimals
  token__totalSupply
  token__volume
  token__volumeUSD
  token__untrackedVolumeUSD
  token__feesUSD
  token__txCount
  token__poolCount
  token__totalValueLocked
  token__totalValueLockedUSD
  token__totalValueLockedUSDUntracked
  token__derivedETH
  volume
  volumeUSD
  untrackedVolumeUSD
  totalValueLocked
  totalValueLockedUSD
  priceUSD
  feesUSD
  open
  high
  low
  close
}

input uni_Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  volume: uni_BigDecimal
  volume_not: uni_BigDecimal
  volume_gt: uni_BigDecimal
  volume_lt: uni_BigDecimal
  volume_gte: uni_BigDecimal
  volume_lte: uni_BigDecimal
  volume_in: [uni_BigDecimal!]
  volume_not_in: [uni_BigDecimal!]
  volumeUSD: uni_BigDecimal
  volumeUSD_not: uni_BigDecimal
  volumeUSD_gt: uni_BigDecimal
  volumeUSD_lt: uni_BigDecimal
  volumeUSD_gte: uni_BigDecimal
  volumeUSD_lte: uni_BigDecimal
  volumeUSD_in: [uni_BigDecimal!]
  volumeUSD_not_in: [uni_BigDecimal!]
  untrackedVolumeUSD: uni_BigDecimal
  untrackedVolumeUSD_not: uni_BigDecimal
  untrackedVolumeUSD_gt: uni_BigDecimal
  untrackedVolumeUSD_lt: uni_BigDecimal
  untrackedVolumeUSD_gte: uni_BigDecimal
  untrackedVolumeUSD_lte: uni_BigDecimal
  untrackedVolumeUSD_in: [uni_BigDecimal!]
  untrackedVolumeUSD_not_in: [uni_BigDecimal!]
  feesUSD: uni_BigDecimal
  feesUSD_not: uni_BigDecimal
  feesUSD_gt: uni_BigDecimal
  feesUSD_lt: uni_BigDecimal
  feesUSD_gte: uni_BigDecimal
  feesUSD_lte: uni_BigDecimal
  feesUSD_in: [uni_BigDecimal!]
  feesUSD_not_in: [uni_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  poolCount: BigInt
  poolCount_not: BigInt
  poolCount_gt: BigInt
  poolCount_lt: BigInt
  poolCount_gte: BigInt
  poolCount_lte: BigInt
  poolCount_in: [BigInt!]
  poolCount_not_in: [BigInt!]
  totalValueLocked: uni_BigDecimal
  totalValueLocked_not: uni_BigDecimal
  totalValueLocked_gt: uni_BigDecimal
  totalValueLocked_lt: uni_BigDecimal
  totalValueLocked_gte: uni_BigDecimal
  totalValueLocked_lte: uni_BigDecimal
  totalValueLocked_in: [uni_BigDecimal!]
  totalValueLocked_not_in: [uni_BigDecimal!]
  totalValueLockedUSD: uni_BigDecimal
  totalValueLockedUSD_not: uni_BigDecimal
  totalValueLockedUSD_gt: uni_BigDecimal
  totalValueLockedUSD_lt: uni_BigDecimal
  totalValueLockedUSD_gte: uni_BigDecimal
  totalValueLockedUSD_lte: uni_BigDecimal
  totalValueLockedUSD_in: [uni_BigDecimal!]
  totalValueLockedUSD_not_in: [uni_BigDecimal!]
  totalValueLockedUSDUntracked: uni_BigDecimal
  totalValueLockedUSDUntracked_not: uni_BigDecimal
  totalValueLockedUSDUntracked_gt: uni_BigDecimal
  totalValueLockedUSDUntracked_lt: uni_BigDecimal
  totalValueLockedUSDUntracked_gte: uni_BigDecimal
  totalValueLockedUSDUntracked_lte: uni_BigDecimal
  totalValueLockedUSDUntracked_in: [uni_BigDecimal!]
  totalValueLockedUSDUntracked_not_in: [uni_BigDecimal!]
  derivedETH: uni_BigDecimal
  derivedETH_not: uni_BigDecimal
  derivedETH_gt: uni_BigDecimal
  derivedETH_lt: uni_BigDecimal
  derivedETH_gte: uni_BigDecimal
  derivedETH_lte: uni_BigDecimal
  derivedETH_in: [uni_BigDecimal!]
  derivedETH_not_in: [uni_BigDecimal!]
  whitelistPools: [String!]
  whitelistPools_not: [String!]
  whitelistPools_contains: [String!]
  whitelistPools_contains_nocase: [String!]
  whitelistPools_not_contains: [String!]
  whitelistPools_not_contains_nocase: [String!]
  whitelistPools_: uni_Pool_filter
  tokenDayData_: uni_TokenDayData_filter
  """Filter for the block changed event."""
  _change_block: uni_BlockChangedFilter
  and: [uni_Token_filter]
  or: [uni_Token_filter]
}

enum uni_Token_orderBy {
  id
  symbol
  name
  decimals
  totalSupply
  volume
  volumeUSD
  untrackedVolumeUSD
  feesUSD
  txCount
  poolCount
  totalValueLocked
  totalValueLockedUSD
  totalValueLockedUSDUntracked
  derivedETH
  whitelistPools
  tokenDayData
}

type uni_Transaction {
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  mints(skip: Int = 0, first: Int = 100, orderBy: uni_Mint_orderBy, orderDirection: uni_OrderDirection, where: uni_Mint_filter): [uni_Mint]!
  burns(skip: Int = 0, first: Int = 100, orderBy: uni_Burn_orderBy, orderDirection: uni_OrderDirection, where: uni_Burn_filter): [uni_Burn]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: uni_Swap_orderBy, orderDirection: uni_OrderDirection, where: uni_Swap_filter): [uni_Swap]!
  flashed(skip: Int = 0, first: Int = 100, orderBy: uni_Flash_orderBy, orderDirection: uni_OrderDirection, where: uni_Flash_filter): [uni_Flash]!
  collects(skip: Int = 0, first: Int = 100, orderBy: uni_Collect_orderBy, orderDirection: uni_OrderDirection, where: uni_Collect_filter): [uni_Collect]!
}

input uni_Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  mints_: uni_Mint_filter
  burns_: uni_Burn_filter
  swaps_: uni_Swap_filter
  flashed_: uni_Flash_filter
  collects_: uni_Collect_filter
  """Filter for the block changed event."""
  _change_block: uni_BlockChangedFilter
  and: [uni_Transaction_filter]
  or: [uni_Transaction_filter]
}

enum uni_Transaction_orderBy {
  id
  blockNumber
  timestamp
  gasUsed
  gasPrice
  mints
  burns
  swaps
  flashed
  collects
}

type uni_UniswapDayData {
  id: ID!
  date: Int!
  volumeETH: uni_BigDecimal!
  volumeUSD: uni_BigDecimal!
  volumeUSDUntracked: uni_BigDecimal!
  feesUSD: uni_BigDecimal!
  txCount: BigInt!
  tvlUSD: uni_BigDecimal!
}

input uni_UniswapDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  volumeETH: uni_BigDecimal
  volumeETH_not: uni_BigDecimal
  volumeETH_gt: uni_BigDecimal
  volumeETH_lt: uni_BigDecimal
  volumeETH_gte: uni_BigDecimal
  volumeETH_lte: uni_BigDecimal
  volumeETH_in: [uni_BigDecimal!]
  volumeETH_not_in: [uni_BigDecimal!]
  volumeUSD: uni_BigDecimal
  volumeUSD_not: uni_BigDecimal
  volumeUSD_gt: uni_BigDecimal
  volumeUSD_lt: uni_BigDecimal
  volumeUSD_gte: uni_BigDecimal
  volumeUSD_lte: uni_BigDecimal
  volumeUSD_in: [uni_BigDecimal!]
  volumeUSD_not_in: [uni_BigDecimal!]
  volumeUSDUntracked: uni_BigDecimal
  volumeUSDUntracked_not: uni_BigDecimal
  volumeUSDUntracked_gt: uni_BigDecimal
  volumeUSDUntracked_lt: uni_BigDecimal
  volumeUSDUntracked_gte: uni_BigDecimal
  volumeUSDUntracked_lte: uni_BigDecimal
  volumeUSDUntracked_in: [uni_BigDecimal!]
  volumeUSDUntracked_not_in: [uni_BigDecimal!]
  feesUSD: uni_BigDecimal
  feesUSD_not: uni_BigDecimal
  feesUSD_gt: uni_BigDecimal
  feesUSD_lt: uni_BigDecimal
  feesUSD_gte: uni_BigDecimal
  feesUSD_lte: uni_BigDecimal
  feesUSD_in: [uni_BigDecimal!]
  feesUSD_not_in: [uni_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  tvlUSD: uni_BigDecimal
  tvlUSD_not: uni_BigDecimal
  tvlUSD_gt: uni_BigDecimal
  tvlUSD_lt: uni_BigDecimal
  tvlUSD_gte: uni_BigDecimal
  tvlUSD_lte: uni_BigDecimal
  tvlUSD_in: [uni_BigDecimal!]
  tvlUSD_not_in: [uni_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: uni_BlockChangedFilter
  and: [uni_UniswapDayData_filter]
  or: [uni_UniswapDayData_filter]
}

enum uni_UniswapDayData_orderBy {
  id
  date
  volumeETH
  volumeUSD
  volumeUSDUntracked
  feesUSD
  txCount
  tvlUSD
}

type uni__Block_ {
  """The hash of the block"""
  hash: uni_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: uni_Bytes
}

"""The type for the top-level _meta field"""
type uni__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: uni__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum uni__SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}